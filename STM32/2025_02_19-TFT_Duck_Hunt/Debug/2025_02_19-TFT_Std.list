
2025_02_19-TFT_Std.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f60  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  08007124  08007124  00008124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008028  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  08008040  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08008040  0000a0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe63  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  00019eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021eb3  00000000  00000000  0001cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011665  00000000  00000000  0003ebb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d1ac4  00000000  00000000  00050218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00121cdc  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000bc3  00000000  00000000  00121d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004060  00000000  00000000  001228e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00126944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800710c 	.word	0x0800710c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	0800710c 	.word	0x0800710c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f004 fec3 	bl	8005284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f853 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f939 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f90d 	bl	8000724 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800050a:	f000 f8bb 	bl	8000684 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Sequência de inicialização do LCD
  tft_gpio_init(); //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 800050e:	f004 fe1d 	bl	800514c <tft_gpio_init>
  HAL_TIM_Base_Start(&htim1); //Inicializa o Timer1 (base de tempo de us do LCD)
 8000512:	4821      	ldr	r0, [pc, #132]	@ (8000598 <main+0xa4>)
 8000514:	f006 f818 	bl	8006548 <HAL_TIM_Base_Start>
  ID = tft_readID(); //Lê o ID do LCD (poderia ser chamada pela inicialização do LCD)
 8000518:	f002 fec4 	bl	80032a4 <tft_readID>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b1e      	ldr	r3, [pc, #120]	@ (800059c <main+0xa8>)
 8000522:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f004 ff1f 	bl	8005368 <HAL_Delay>
  tft_init (ID); //Inicializa o LCD de acordo com seu ID
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <main+0xa8>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fb30 	bl	8002b94 <tft_init>
  tft_setRotation(0); //Ajusta a orientação da tela
 8000534:	2000      	movs	r0, #0
 8000536:	f002 fff5 	bl	8003524 <tft_setRotation>
  tft_fillScreen(BLACK); //Preenche a tela em uma só cor
 800053a:	2000      	movs	r0, #0
 800053c:	f004 fa06 	bl	800494c <tft_fillScreen>
  //Funções de teste do LCD
  tft_testfillScreen();
 8000540:	f004 fa1e 	bl	8004980 <tft_testfillScreen>
  tft_testLines(CYAN);
 8000544:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000548:	f004 fa2f 	bl	80049aa <tft_testLines>
  tft_testFastLines(RED, BLUE);
 800054c:	211f      	movs	r1, #31
 800054e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000552:	f004 fb28 	bl	8004ba6 <tft_testFastLines>
  tft_testFilledCircles(10, MAGENTA);
 8000556:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 800055a:	200a      	movs	r0, #10
 800055c:	f004 fb5f 	bl	8004c1e <tft_testFilledCircles>
  tft_testCircles(10, WHITE);
 8000560:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000564:	200a      	movs	r0, #10
 8000566:	f004 fb94 	bl	8004c92 <tft_testCircles>
  tft_fillScreen(BLACK);
 800056a:	2000      	movs	r0, #0
 800056c:	f004 f9ee 	bl	800494c <tft_fillScreen>
  //Demonstração de scroll de texto
  tft_setRotation(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f002 ffd7 	bl	8003524 <tft_setRotation>
  tft_printnewtstr(100, RED, &mono12x7bold, 1, (uint8_t *)"HELLO WORLD");
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <main+0xac>)
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <main+0xb0>)
 800057e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f004 fd58 	bl	8005038 <tft_printnewtstr>
  tft_scrollup(100);
 8000588:	2064      	movs	r0, #100	@ 0x64
 800058a:	f004 fda1 	bl	80050d0 <tft_scrollup>
  //Demonstração de inversão de cores do LCD (efeito negativo)
  tft_invertDisplay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f003 fc88 	bl	8003ea4 <tft_invertDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0xa0>
 8000598:	2000003c 	.word	0x2000003c
 800059c:	20000038 	.word	0x20000038
 80005a0:	08007124 	.word	0x08007124
 80005a4:	08007af0 	.word	0x08007af0

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	@ 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fd7c 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b2a      	ldr	r3, [pc, #168]	@ (800067c <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a29      	ldr	r2, [pc, #164]	@ (800067c <SystemClock_Config+0xd4>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f4:	4a22      	ldr	r2, [pc, #136]	@ (8000680 <SystemClock_Config+0xd8>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fc98 	bl	8005f6c <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000642:	f000 f925 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f005 f938 	bl	80058d8 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066e:	f000 f90f 	bl	8000890 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_TIM1_Init+0x98>)
 80006a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000720 <MX_TIM1_Init+0x9c>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_TIM1_Init+0x98>)
 80006a8:	2253      	movs	r2, #83	@ 0x53
 80006aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_TIM1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_TIM1_Init+0x98>)
 80006b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80006b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_TIM1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_TIM1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_TIM1_Init+0x98>)
 80006c8:	2280      	movs	r2, #128	@ 0x80
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006cc:	4813      	ldr	r0, [pc, #76]	@ (800071c <MX_TIM1_Init+0x98>)
 80006ce:	f005 feeb 	bl	80064a8 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006d8:	f000 f8da 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <MX_TIM1_Init+0x98>)
 80006ea:	f005 ff95 	bl	8006618 <HAL_TIM_ConfigClockSource>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006f4:	f000 f8cc 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_TIM1_Init+0x98>)
 8000706:	f006 f995 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000710:	f000 f8be 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000003c 	.word	0x2000003c
 8000720:	40010000 	.word	0x40010000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f006 f9e6 	bl	8006b2c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f893 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000084 	.word	0x20000084
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <MX_GPIO_Init+0x108>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a3a      	ldr	r2, [pc, #232]	@ (8000880 <MX_GPIO_Init+0x108>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a33      	ldr	r2, [pc, #204]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a25      	ldr	r2, [pc, #148]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_GPIO_Init+0x108>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2182      	movs	r1, #130	@ 0x82
 8000802:	4820      	ldr	r0, [pc, #128]	@ (8000884 <MX_GPIO_Init+0x10c>)
 8000804:	f005 f84e 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000808:	2200      	movs	r2, #0
 800080a:	f240 7113 	movw	r1, #1811	@ 0x713
 800080e:	481e      	ldr	r0, [pc, #120]	@ (8000888 <MX_GPIO_Init+0x110>)
 8000810:	f005 f848 	bl	80058a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000814:	2200      	movs	r2, #0
 8000816:	f240 4139 	movw	r1, #1081	@ 0x439
 800081a:	481c      	ldr	r0, [pc, #112]	@ (800088c <MX_GPIO_Init+0x114>)
 800081c:	f005 f842 	bl	80058a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000820:	2382      	movs	r3, #130	@ 0x82
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4813      	ldr	r0, [pc, #76]	@ (8000884 <MX_GPIO_Init+0x10c>)
 8000838:	f004 fea0 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 800083c:	f240 7313 	movw	r3, #1811	@ 0x713
 8000840:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_GPIO_Init+0x110>)
 8000856:	f004 fe91 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 800085a:	f240 4339 	movw	r3, #1081	@ 0x439
 800085e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_GPIO_Init+0x114>)
 8000874:	f004 fe82 	bl	800557c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	@ 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008da:	2007      	movs	r0, #7
 80008dc:	f004 fe1a 	bl	8005514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <HAL_TIM_Base_MspInit+0x3c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10d      	bne.n	800091a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <HAL_TIM_Base_MspInit+0x40>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <HAL_TIM_Base_MspInit+0x40>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <HAL_TIM_Base_MspInit+0x40>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40010000 	.word	0x40010000
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <HAL_UART_MspInit+0x84>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12b      	bne.n	80009aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <HAL_UART_MspInit+0x8c>)
 80009a6:	f004 fde9 	bl	800557c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f004 fc87 	bl	8005328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <PIN_LOW>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f004 ff24 	bl	80058a4 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <PIN_HIGH>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f004 ff14 	bl	80058a4 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <PIN_INPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f004 fd6a 	bl	800557c <HAL_GPIO_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <PIN_OUTPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f004 fd52 	bl	800557c <HAL_GPIO_Init>
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <width>:
/* Variáveis globais *********************************************************/
uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <width+0x14>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000004 	.word	0x20000004

08000af8 <height>:

uint16_t height(void)
{ return _height; }
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <height+0x14>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000006 	.word	0x20000006

08000b10 <color565_to_555>:

static void delay (uint32_t time);

/* Funções privadas **********************************************************/
static uint16_t color565_to_555(uint16_t color)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	b29b      	uxth	r3, r3
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <color555_to_565>:

static uint16_t color555_to_565(uint16_t color)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	115b      	asrs	r3, r3, #5
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	105b      	asrs	r3, r3, #1
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	f003 031f 	and.w	r3, r3, #31
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29b      	uxth	r3, r3
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <color565_to_r>:

static uint8_t color565_to_r(uint16_t color)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	80fb      	strh	r3, [r7, #6]
	return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f023 0307 	bic.w	r3, r3, #7
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <color565_to_g>:

static uint8_t color565_to_g(uint16_t color)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	10db      	asrs	r3, r3, #3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f023 0303 	bic.w	r3, r3, #3
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <color565_to_b>:

static uint8_t color565_to_b(uint16_t color)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	b2db      	uxtb	r3, r3
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <pushCommand>:

static void pushCommand(uint16_t cmd, uint8_t * block, int8_t N)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	6039      	str	r1, [r7, #0]
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	WriteCmdParamN(cmd, N, block);
 8000c02:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fab6 	bl	800117c <WriteCmdParamN>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <setReadDir>:

static void setReadDir (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000c1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <setReadDir+0x50>)
 8000c22:	f7ff ff2f 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000c26:	2180      	movs	r1, #128	@ 0x80
 8000c28:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <setReadDir+0x54>)
 8000c2a:	f7ff ff2b 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000c2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <setReadDir+0x50>)
 8000c34:	f7ff ff26 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000c38:	2108      	movs	r1, #8
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <setReadDir+0x58>)
 8000c3c:	f7ff ff22 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000c40:	2120      	movs	r1, #32
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <setReadDir+0x58>)
 8000c44:	f7ff ff1e 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000c48:	2110      	movs	r1, #16
 8000c4a:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <setReadDir+0x58>)
 8000c4c:	f7ff ff1a 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000c50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c54:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <setReadDir+0x58>)
 8000c56:	f7ff ff15 	bl	8000a84 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5e:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <setReadDir+0x50>)
 8000c60:	f7ff ff10 	bl	8000a84 <PIN_INPUT>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020400 	.word	0x40020400

08000c74 <setWriteDir>:

static void setWriteDir (void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000c78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <setWriteDir+0x50>)
 8000c7e:	f7ff ff17 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	4810      	ldr	r0, [pc, #64]	@ (8000cc8 <setWriteDir+0x54>)
 8000c86:	f7ff ff13 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <setWriteDir+0x50>)
 8000c90:	f7ff ff0e 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000c94:	2108      	movs	r1, #8
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <setWriteDir+0x58>)
 8000c98:	f7ff ff0a 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <setWriteDir+0x58>)
 8000ca0:	f7ff ff06 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <setWriteDir+0x58>)
 8000ca8:	f7ff ff02 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000cac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb0:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <setWriteDir+0x58>)
 8000cb2:	f7ff fefd 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cba:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <setWriteDir+0x50>)
 8000cbc:	f7ff fef8 	bl	8000ab0 <PIN_OUTPUT>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <write24>:
		}
	CS_IDLE;
}

static void write24(uint16_t color)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
	uint8_t r = color565_to_r(color);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff58 	bl	8000b92 <color565_to_r>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	73fb      	strb	r3, [r7, #15]
	uint8_t g = color565_to_g(color);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff63 	bl	8000bb4 <color565_to_g>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73bb      	strb	r3, [r7, #14]
	uint8_t b = color565_to_b(color);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff6e 	bl	8000bd6 <color565_to_b>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	737b      	strb	r3, [r7, #13]
	write8(r);
 8000cfe:	4b71      	ldr	r3, [pc, #452]	@ (8000ec4 <write24+0x1f4>)
 8000d00:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	4b70      	ldr	r3, [pc, #448]	@ (8000ec8 <write24+0x1f8>)
 8000d08:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000d0c:	619a      	str	r2, [r3, #24]
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000ecc <write24+0x1fc>)
 8000d10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d14:	619a      	str	r2, [r3, #24]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d26:	431a      	orrs	r2, r3
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d30:	431a      	orrs	r2, r3
 8000d32:	4b64      	ldr	r3, [pc, #400]	@ (8000ec4 <write24+0x1f4>)
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	105b      	asrs	r3, r3, #1
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	431a      	orrs	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	431a      	orrs	r2, r3
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec8 <write24+0x1f8>)
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	4a5a      	ldr	r2, [pc, #360]	@ (8000ecc <write24+0x1fc>)
 8000d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4855      	ldr	r0, [pc, #340]	@ (8000ec4 <write24+0x1f4>)
 8000d6e:	f7ff fe69 	bl	8000a44 <PIN_LOW>
 8000d72:	2102      	movs	r1, #2
 8000d74:	4853      	ldr	r0, [pc, #332]	@ (8000ec4 <write24+0x1f4>)
 8000d76:	f7ff fe65 	bl	8000a44 <PIN_LOW>
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4851      	ldr	r0, [pc, #324]	@ (8000ec4 <write24+0x1f4>)
 8000d7e:	f7ff fe61 	bl	8000a44 <PIN_LOW>
 8000d82:	2102      	movs	r1, #2
 8000d84:	484f      	ldr	r0, [pc, #316]	@ (8000ec4 <write24+0x1f4>)
 8000d86:	f7ff fe6d 	bl	8000a64 <PIN_HIGH>
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	484d      	ldr	r0, [pc, #308]	@ (8000ec4 <write24+0x1f4>)
 8000d8e:	f7ff fe69 	bl	8000a64 <PIN_HIGH>
	write8(g);
 8000d92:	4b4c      	ldr	r3, [pc, #304]	@ (8000ec4 <write24+0x1f4>)
 8000d94:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000d98:	619a      	str	r2, [r3, #24]
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec8 <write24+0x1f8>)
 8000d9c:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000da0:	619a      	str	r2, [r3, #24]
 8000da2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ecc <write24+0x1fc>)
 8000da4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	025b      	lsls	r3, r3, #9
 8000dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <write24+0x1f4>)
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	105b      	asrs	r3, r3, #1
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	431a      	orrs	r2, r3
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	431a      	orrs	r2, r3
 8000dee:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <write24+0x1f8>)
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	4a35      	ldr	r2, [pc, #212]	@ (8000ecc <write24+0x1fc>)
 8000df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4830      	ldr	r0, [pc, #192]	@ (8000ec4 <write24+0x1f4>)
 8000e02:	f7ff fe1f 	bl	8000a44 <PIN_LOW>
 8000e06:	2102      	movs	r1, #2
 8000e08:	482e      	ldr	r0, [pc, #184]	@ (8000ec4 <write24+0x1f4>)
 8000e0a:	f7ff fe1b 	bl	8000a44 <PIN_LOW>
 8000e0e:	2102      	movs	r1, #2
 8000e10:	482c      	ldr	r0, [pc, #176]	@ (8000ec4 <write24+0x1f4>)
 8000e12:	f7ff fe17 	bl	8000a44 <PIN_LOW>
 8000e16:	2102      	movs	r1, #2
 8000e18:	482a      	ldr	r0, [pc, #168]	@ (8000ec4 <write24+0x1f4>)
 8000e1a:	f7ff fe23 	bl	8000a64 <PIN_HIGH>
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4828      	ldr	r0, [pc, #160]	@ (8000ec4 <write24+0x1f4>)
 8000e22:	f7ff fe1f 	bl	8000a64 <PIN_HIGH>
	write8(b);
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <write24+0x1f4>)
 8000e28:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <write24+0x1f8>)
 8000e30:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000e34:	619a      	str	r2, [r3, #24]
 8000e36:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <write24+0x1fc>)
 8000e38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	7b7b      	ldrb	r3, [r7, #13]
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <write24+0x1f4>)
 8000e5c:	619a      	str	r2, [r3, #24]
 8000e5e:	7b7b      	ldrb	r3, [r7, #13]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000e66:	7b7b      	ldrb	r3, [r7, #13]
 8000e68:	105b      	asrs	r3, r3, #1
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	7b7b      	ldrb	r3, [r7, #13]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	431a      	orrs	r2, r3
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <write24+0x1f8>)
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <write24+0x1fc>)
 8000e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	2102      	movs	r1, #2
 8000e94:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <write24+0x1f4>)
 8000e96:	f7ff fdd5 	bl	8000a44 <PIN_LOW>
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <write24+0x1f4>)
 8000e9e:	f7ff fdd1 	bl	8000a44 <PIN_LOW>
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <write24+0x1f4>)
 8000ea6:	f7ff fdcd 	bl	8000a44 <PIN_LOW>
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <write24+0x1f4>)
 8000eae:	f7ff fdd9 	bl	8000a64 <PIN_HIGH>
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <write24+0x1f4>)
 8000eb6:	f7ff fdd5 	bl	8000a64 <PIN_HIGH>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	80fb      	strh	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE;
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	48a3      	ldr	r0, [pc, #652]	@ (8001170 <writecmddata+0x2a0>)
 8000ee4:	f7ff fdae 	bl	8000a44 <PIN_LOW>
	WriteCmd(cmd);
 8000ee8:	2110      	movs	r1, #16
 8000eea:	48a2      	ldr	r0, [pc, #648]	@ (8001174 <writecmddata+0x2a4>)
 8000eec:	f7ff fdaa 	bl	8000a44 <PIN_LOW>
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	4b9d      	ldr	r3, [pc, #628]	@ (8001174 <writecmddata+0x2a4>)
 8000efe:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	4b9a      	ldr	r3, [pc, #616]	@ (8001170 <writecmddata+0x2a0>)
 8000f06:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	4b9a      	ldr	r3, [pc, #616]	@ (8001178 <writecmddata+0x2a8>)
 8000f0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f12:	619a      	str	r2, [r3, #24]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f24:	431a      	orrs	r2, r3
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	025b      	lsls	r3, r3, #9
 8000f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4b90      	ldr	r3, [pc, #576]	@ (8001174 <writecmddata+0x2a4>)
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	105b      	asrs	r3, r3, #1
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	431a      	orrs	r2, r3
 8000f58:	4b85      	ldr	r3, [pc, #532]	@ (8001170 <writecmddata+0x2a0>)
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	019b      	lsls	r3, r3, #6
 8000f60:	4a85      	ldr	r2, [pc, #532]	@ (8001178 <writecmddata+0x2a8>)
 8000f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4882      	ldr	r0, [pc, #520]	@ (8001174 <writecmddata+0x2a4>)
 8000f6c:	f7ff fd6a 	bl	8000a44 <PIN_LOW>
 8000f70:	2102      	movs	r1, #2
 8000f72:	4880      	ldr	r0, [pc, #512]	@ (8001174 <writecmddata+0x2a4>)
 8000f74:	f7ff fd66 	bl	8000a44 <PIN_LOW>
 8000f78:	2102      	movs	r1, #2
 8000f7a:	487e      	ldr	r0, [pc, #504]	@ (8001174 <writecmddata+0x2a4>)
 8000f7c:	f7ff fd62 	bl	8000a44 <PIN_LOW>
 8000f80:	2102      	movs	r1, #2
 8000f82:	487c      	ldr	r0, [pc, #496]	@ (8001174 <writecmddata+0x2a4>)
 8000f84:	f7ff fd6e 	bl	8000a64 <PIN_HIGH>
 8000f88:	2102      	movs	r1, #2
 8000f8a:	487a      	ldr	r0, [pc, #488]	@ (8001174 <writecmddata+0x2a4>)
 8000f8c:	f7ff fd6a 	bl	8000a64 <PIN_HIGH>
 8000f90:	4b78      	ldr	r3, [pc, #480]	@ (8001174 <writecmddata+0x2a4>)
 8000f92:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	4b75      	ldr	r3, [pc, #468]	@ (8001170 <writecmddata+0x2a0>)
 8000f9a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	4b75      	ldr	r3, [pc, #468]	@ (8001178 <writecmddata+0x2a8>)
 8000fa2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fa6:	619a      	str	r2, [r3, #24]
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001174 <writecmddata+0x2a4>)
 8000fc6:	619a      	str	r2, [r3, #24]
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	105b      	asrs	r3, r3, #1
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	431a      	orrs	r2, r3
 8000fec:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <writecmddata+0x2a0>)
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	4a60      	ldr	r2, [pc, #384]	@ (8001178 <writecmddata+0x2a8>)
 8000ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	485d      	ldr	r0, [pc, #372]	@ (8001174 <writecmddata+0x2a4>)
 8001000:	f7ff fd20 	bl	8000a44 <PIN_LOW>
 8001004:	2102      	movs	r1, #2
 8001006:	485b      	ldr	r0, [pc, #364]	@ (8001174 <writecmddata+0x2a4>)
 8001008:	f7ff fd1c 	bl	8000a44 <PIN_LOW>
 800100c:	2102      	movs	r1, #2
 800100e:	4859      	ldr	r0, [pc, #356]	@ (8001174 <writecmddata+0x2a4>)
 8001010:	f7ff fd18 	bl	8000a44 <PIN_LOW>
 8001014:	2102      	movs	r1, #2
 8001016:	4857      	ldr	r0, [pc, #348]	@ (8001174 <writecmddata+0x2a4>)
 8001018:	f7ff fd24 	bl	8000a64 <PIN_HIGH>
 800101c:	2102      	movs	r1, #2
 800101e:	4855      	ldr	r0, [pc, #340]	@ (8001174 <writecmddata+0x2a4>)
 8001020:	f7ff fd20 	bl	8000a64 <PIN_HIGH>
 8001024:	2110      	movs	r1, #16
 8001026:	4853      	ldr	r0, [pc, #332]	@ (8001174 <writecmddata+0x2a4>)
 8001028:	f7ff fd1c 	bl	8000a64 <PIN_HIGH>
	WriteData(dat);
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	737b      	strb	r3, [r7, #13]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	733b      	strb	r3, [r7, #12]
 8001038:	4b4e      	ldr	r3, [pc, #312]	@ (8001174 <writecmddata+0x2a4>)
 800103a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <writecmddata+0x2a0>)
 8001042:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	4b4b      	ldr	r3, [pc, #300]	@ (8001178 <writecmddata+0x2a8>)
 800104a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800104e:	619a      	str	r2, [r3, #24]
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001060:	431a      	orrs	r2, r3
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800106a:	431a      	orrs	r2, r3
 800106c:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <writecmddata+0x2a4>)
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	105b      	asrs	r3, r3, #1
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	431a      	orrs	r2, r3
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	431a      	orrs	r2, r3
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	431a      	orrs	r2, r3
 8001094:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <writecmddata+0x2a0>)
 8001096:	619a      	str	r2, [r3, #24]
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	4a36      	ldr	r2, [pc, #216]	@ (8001178 <writecmddata+0x2a8>)
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	2102      	movs	r1, #2
 80010a6:	4833      	ldr	r0, [pc, #204]	@ (8001174 <writecmddata+0x2a4>)
 80010a8:	f7ff fccc 	bl	8000a44 <PIN_LOW>
 80010ac:	2102      	movs	r1, #2
 80010ae:	4831      	ldr	r0, [pc, #196]	@ (8001174 <writecmddata+0x2a4>)
 80010b0:	f7ff fcc8 	bl	8000a44 <PIN_LOW>
 80010b4:	2102      	movs	r1, #2
 80010b6:	482f      	ldr	r0, [pc, #188]	@ (8001174 <writecmddata+0x2a4>)
 80010b8:	f7ff fcc4 	bl	8000a44 <PIN_LOW>
 80010bc:	2102      	movs	r1, #2
 80010be:	482d      	ldr	r0, [pc, #180]	@ (8001174 <writecmddata+0x2a4>)
 80010c0:	f7ff fcd0 	bl	8000a64 <PIN_HIGH>
 80010c4:	2102      	movs	r1, #2
 80010c6:	482b      	ldr	r0, [pc, #172]	@ (8001174 <writecmddata+0x2a4>)
 80010c8:	f7ff fccc 	bl	8000a64 <PIN_HIGH>
 80010cc:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <writecmddata+0x2a4>)
 80010ce:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <writecmddata+0x2a0>)
 80010d6:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80010da:	619a      	str	r2, [r3, #24]
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <writecmddata+0x2a8>)
 80010de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010e2:	619a      	str	r2, [r3, #24]
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f4:	431a      	orrs	r2, r3
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fe:	431a      	orrs	r2, r3
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <writecmddata+0x2a4>)
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	105b      	asrs	r3, r3, #1
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	431a      	orrs	r2, r3
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	431a      	orrs	r2, r3
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	431a      	orrs	r2, r3
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <writecmddata+0x2a0>)
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	019b      	lsls	r3, r3, #6
 8001130:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <writecmddata+0x2a8>)
 8001132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	2102      	movs	r1, #2
 800113a:	480e      	ldr	r0, [pc, #56]	@ (8001174 <writecmddata+0x2a4>)
 800113c:	f7ff fc82 	bl	8000a44 <PIN_LOW>
 8001140:	2102      	movs	r1, #2
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <writecmddata+0x2a4>)
 8001144:	f7ff fc7e 	bl	8000a44 <PIN_LOW>
 8001148:	2102      	movs	r1, #2
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <writecmddata+0x2a4>)
 800114c:	f7ff fc7a 	bl	8000a44 <PIN_LOW>
 8001150:	2102      	movs	r1, #2
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <writecmddata+0x2a4>)
 8001154:	f7ff fc86 	bl	8000a64 <PIN_HIGH>
 8001158:	2102      	movs	r1, #2
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <writecmddata+0x2a4>)
 800115c:	f7ff fc82 	bl	8000a64 <PIN_HIGH>
	CS_IDLE;
 8001160:	2101      	movs	r1, #1
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <writecmddata+0x2a0>)
 8001164:	f7ff fc7e 	bl	8000a64 <PIN_HIGH>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020400 	.word	0x40020400
 8001174:	40020000 	.word	0x40020000
 8001178:	40020800 	.word	0x40020800

0800117c <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	603a      	str	r2, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	460b      	mov	r3, r1
 800118a:	717b      	strb	r3, [r7, #5]
	CS_ACTIVE;
 800118c:	2101      	movs	r1, #1
 800118e:	4853      	ldr	r0, [pc, #332]	@ (80012dc <WriteCmdParamN+0x160>)
 8001190:	f7ff fc58 	bl	8000a44 <PIN_LOW>
	WriteCmd(cmd);
 8001194:	2110      	movs	r1, #16
 8001196:	4852      	ldr	r0, [pc, #328]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001198:	f7ff fc54 	bl	8000a44 <PIN_LOW>
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	73bb      	strb	r3, [r7, #14]
 80011a8:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <WriteCmdParamN+0x164>)
 80011aa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <WriteCmdParamN+0x160>)
 80011b2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <WriteCmdParamN+0x168>)
 80011ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	431a      	orrs	r2, r3
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011da:	431a      	orrs	r2, r3
 80011dc:	4b40      	ldr	r3, [pc, #256]	@ (80012e0 <WriteCmdParamN+0x164>)
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	105b      	asrs	r3, r3, #1
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	431a      	orrs	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	431a      	orrs	r2, r3
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	431a      	orrs	r2, r3
 8001204:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <WriteCmdParamN+0x160>)
 8001206:	619a      	str	r2, [r3, #24]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	4a35      	ldr	r2, [pc, #212]	@ (80012e4 <WriteCmdParamN+0x168>)
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	2102      	movs	r1, #2
 8001216:	4832      	ldr	r0, [pc, #200]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001218:	f7ff fc14 	bl	8000a44 <PIN_LOW>
 800121c:	2102      	movs	r1, #2
 800121e:	4830      	ldr	r0, [pc, #192]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001220:	f7ff fc10 	bl	8000a44 <PIN_LOW>
 8001224:	2102      	movs	r1, #2
 8001226:	482e      	ldr	r0, [pc, #184]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001228:	f7ff fc0c 	bl	8000a44 <PIN_LOW>
 800122c:	2102      	movs	r1, #2
 800122e:	482c      	ldr	r0, [pc, #176]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001230:	f7ff fc18 	bl	8000a64 <PIN_HIGH>
 8001234:	2102      	movs	r1, #2
 8001236:	482a      	ldr	r0, [pc, #168]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001238:	f7ff fc14 	bl	8000a64 <PIN_HIGH>
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <WriteCmdParamN+0x164>)
 800123e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001242:	619a      	str	r2, [r3, #24]
 8001244:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <WriteCmdParamN+0x160>)
 8001246:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <WriteCmdParamN+0x168>)
 800124e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001264:	431a      	orrs	r2, r3
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800126e:	431a      	orrs	r2, r3
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <WriteCmdParamN+0x164>)
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	105b      	asrs	r3, r3, #1
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	431a      	orrs	r2, r3
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	431a      	orrs	r2, r3
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <WriteCmdParamN+0x160>)
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	019b      	lsls	r3, r3, #6
 80012a0:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <WriteCmdParamN+0x168>)
 80012a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	2102      	movs	r1, #2
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012ac:	f7ff fbca 	bl	8000a44 <PIN_LOW>
 80012b0:	2102      	movs	r1, #2
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012b4:	f7ff fbc6 	bl	8000a44 <PIN_LOW>
 80012b8:	2102      	movs	r1, #2
 80012ba:	4809      	ldr	r0, [pc, #36]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012bc:	f7ff fbc2 	bl	8000a44 <PIN_LOW>
 80012c0:	2102      	movs	r1, #2
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012c4:	f7ff fbce 	bl	8000a64 <PIN_HIGH>
 80012c8:	2102      	movs	r1, #2
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012cc:	f7ff fbca 	bl	8000a64 <PIN_HIGH>
 80012d0:	2110      	movs	r1, #16
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <WriteCmdParamN+0x164>)
 80012d4:	f7ff fbc6 	bl	8000a64 <PIN_HIGH>
	while (N-- > 0) {
 80012d8:	e104      	b.n	80014e4 <WriteCmdParamN+0x368>
 80012da:	bf00      	nop
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020800 	.word	0x40020800
		uint8_t u8 = *block++;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	603a      	str	r2, [r7, #0]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	737b      	strb	r3, [r7, #13]
		write8(u8);
 80012f2:	4b85      	ldr	r3, [pc, #532]	@ (8001508 <WriteCmdParamN+0x38c>)
 80012f4:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	4b84      	ldr	r3, [pc, #528]	@ (800150c <WriteCmdParamN+0x390>)
 80012fc:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	4b83      	ldr	r3, [pc, #524]	@ (8001510 <WriteCmdParamN+0x394>)
 8001304:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	7b7b      	ldrb	r3, [r7, #13]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131a:	431a      	orrs	r2, r3
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001324:	431a      	orrs	r2, r3
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001332:	7b7b      	ldrb	r3, [r7, #13]
 8001334:	105b      	asrs	r3, r3, #1
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	431a      	orrs	r2, r3
 8001346:	7b7b      	ldrb	r3, [r7, #13]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	431a      	orrs	r2, r3
 800134e:	4b6f      	ldr	r3, [pc, #444]	@ (800150c <WriteCmdParamN+0x390>)
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	7b7b      	ldrb	r3, [r7, #13]
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	4a6e      	ldr	r2, [pc, #440]	@ (8001510 <WriteCmdParamN+0x394>)
 8001358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	2102      	movs	r1, #2
 8001360:	4869      	ldr	r0, [pc, #420]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001362:	f7ff fb6f 	bl	8000a44 <PIN_LOW>
 8001366:	2102      	movs	r1, #2
 8001368:	4867      	ldr	r0, [pc, #412]	@ (8001508 <WriteCmdParamN+0x38c>)
 800136a:	f7ff fb6b 	bl	8000a44 <PIN_LOW>
 800136e:	2102      	movs	r1, #2
 8001370:	4865      	ldr	r0, [pc, #404]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001372:	f7ff fb67 	bl	8000a44 <PIN_LOW>
 8001376:	2102      	movs	r1, #2
 8001378:	4863      	ldr	r0, [pc, #396]	@ (8001508 <WriteCmdParamN+0x38c>)
 800137a:	f7ff fb73 	bl	8000a64 <PIN_HIGH>
 800137e:	2102      	movs	r1, #2
 8001380:	4861      	ldr	r0, [pc, #388]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001382:	f7ff fb6f 	bl	8000a64 <PIN_HIGH>
		if (N && is8347) {
 8001386:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80aa 	beq.w	80014e4 <WriteCmdParamN+0x368>
 8001390:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <WriteCmdParamN+0x398>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a5 	beq.w	80014e4 <WriteCmdParamN+0x368>
			cmd++;
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	3301      	adds	r3, #1
 800139e:	80fb      	strh	r3, [r7, #6]
			WriteCmd(cmd);
 80013a0:	2110      	movs	r1, #16
 80013a2:	4859      	ldr	r0, [pc, #356]	@ (8001508 <WriteCmdParamN+0x38c>)
 80013a4:	f7ff fb4e 	bl	8000a44 <PIN_LOW>
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	733b      	strb	r3, [r7, #12]
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	72fb      	strb	r3, [r7, #11]
 80013b4:	4b54      	ldr	r3, [pc, #336]	@ (8001508 <WriteCmdParamN+0x38c>)
 80013b6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80013ba:	619a      	str	r2, [r3, #24]
 80013bc:	4b53      	ldr	r3, [pc, #332]	@ (800150c <WriteCmdParamN+0x390>)
 80013be:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80013c2:	619a      	str	r2, [r3, #24]
 80013c4:	4b52      	ldr	r3, [pc, #328]	@ (8001510 <WriteCmdParamN+0x394>)
 80013c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ca:	619a      	str	r2, [r3, #24]
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013dc:	431a      	orrs	r2, r3
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	025b      	lsls	r3, r3, #9
 80013e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e6:	431a      	orrs	r2, r3
 80013e8:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <WriteCmdParamN+0x38c>)
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	105b      	asrs	r3, r3, #1
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	7b3b      	ldrb	r3, [r7, #12]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	431a      	orrs	r2, r3
 8001408:	7b3b      	ldrb	r3, [r7, #12]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	431a      	orrs	r2, r3
 8001410:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <WriteCmdParamN+0x390>)
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	019b      	lsls	r3, r3, #6
 8001418:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <WriteCmdParamN+0x394>)
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	2102      	movs	r1, #2
 8001422:	4839      	ldr	r0, [pc, #228]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001424:	f7ff fb0e 	bl	8000a44 <PIN_LOW>
 8001428:	2102      	movs	r1, #2
 800142a:	4837      	ldr	r0, [pc, #220]	@ (8001508 <WriteCmdParamN+0x38c>)
 800142c:	f7ff fb0a 	bl	8000a44 <PIN_LOW>
 8001430:	2102      	movs	r1, #2
 8001432:	4835      	ldr	r0, [pc, #212]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001434:	f7ff fb06 	bl	8000a44 <PIN_LOW>
 8001438:	2102      	movs	r1, #2
 800143a:	4833      	ldr	r0, [pc, #204]	@ (8001508 <WriteCmdParamN+0x38c>)
 800143c:	f7ff fb12 	bl	8000a64 <PIN_HIGH>
 8001440:	2102      	movs	r1, #2
 8001442:	4831      	ldr	r0, [pc, #196]	@ (8001508 <WriteCmdParamN+0x38c>)
 8001444:	f7ff fb0e 	bl	8000a64 <PIN_HIGH>
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <WriteCmdParamN+0x38c>)
 800144a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <WriteCmdParamN+0x390>)
 8001452:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001456:	619a      	str	r2, [r3, #24]
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <WriteCmdParamN+0x394>)
 800145a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001470:	431a      	orrs	r2, r3
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800147a:	431a      	orrs	r2, r3
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <WriteCmdParamN+0x38c>)
 800147e:	619a      	str	r2, [r3, #24]
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	105b      	asrs	r3, r3, #1
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	431a      	orrs	r2, r3
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	431a      	orrs	r2, r3
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <WriteCmdParamN+0x390>)
 80014a6:	619a      	str	r2, [r3, #24]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	019b      	lsls	r3, r3, #6
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <WriteCmdParamN+0x394>)
 80014ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	2102      	movs	r1, #2
 80014b6:	4814      	ldr	r0, [pc, #80]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014b8:	f7ff fac4 	bl	8000a44 <PIN_LOW>
 80014bc:	2102      	movs	r1, #2
 80014be:	4812      	ldr	r0, [pc, #72]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014c0:	f7ff fac0 	bl	8000a44 <PIN_LOW>
 80014c4:	2102      	movs	r1, #2
 80014c6:	4810      	ldr	r0, [pc, #64]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014c8:	f7ff fabc 	bl	8000a44 <PIN_LOW>
 80014cc:	2102      	movs	r1, #2
 80014ce:	480e      	ldr	r0, [pc, #56]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014d0:	f7ff fac8 	bl	8000a64 <PIN_HIGH>
 80014d4:	2102      	movs	r1, #2
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014d8:	f7ff fac4 	bl	8000a64 <PIN_HIGH>
 80014dc:	2110      	movs	r1, #16
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <WriteCmdParamN+0x38c>)
 80014e0:	f7ff fac0 	bl	8000a64 <PIN_HIGH>
	while (N-- > 0) {
 80014e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	3a01      	subs	r2, #1
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	717a      	strb	r2, [r7, #5]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f73f aef9 	bgt.w	80012e8 <WriteCmdParamN+0x16c>
		}
	}
	CS_IDLE;
 80014f6:	2101      	movs	r1, #1
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <WriteCmdParamN+0x390>)
 80014fa:	f7ff fab3 	bl	8000a64 <PIN_HIGH>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	200000cd 	.word	0x200000cd

08001518 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	4603      	mov	r3, r0
 800152c:	71bb      	strb	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	717b      	strb	r3, [r7, #5]
 8001532:	4613      	mov	r3, r2
 8001534:	713b      	strb	r3, [r7, #4]
	uint8_t d[4];
	d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	733b      	strb	r3, [r7, #12]
 800153a:	797b      	ldrb	r3, [r7, #5]
 800153c:	737b      	strb	r3, [r7, #13]
 800153e:	793b      	ldrb	r3, [r7, #4]
 8001540:	73bb      	strb	r3, [r7, #14]
 8001542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001546:	73fb      	strb	r3, [r7, #15]
	WriteCmdParamN(cmd, 4, d);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f107 020c 	add.w	r2, r7, #12
 8001550:	2104      	movs	r1, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe12 	bl	800117c <WriteCmdParamN>
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}

08001560 <init_table>:

static void init_table(const void *table, int16_t size)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]

	uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24

	while (size > 0)
 8001570:	e046      	b.n	8001600 <init_table+0xa0>
	{
		uint8_t cmd = pgm_read_byte(p++);
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	627a      	str	r2, [r7, #36]	@ 0x24
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t len = pgm_read_byte(p++);
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	627a      	str	r2, [r7, #36]	@ 0x24
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (cmd == TFTLCD_DELAY8)
 800158a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800158e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001590:	d108      	bne.n	80015a4 <init_table+0x44>
		{
			delay(len);
 8001592:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fc58 	bl	8001e4c <delay>
			len = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015a2:	e024      	b.n	80015ee <init_table+0x8e>
		}
		else
		{
			for (uint8_t i = 0; i < len; i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80015aa:	e010      	b.n	80015ce <init_table+0x6e>
				dat[i] = pgm_read_byte(p++);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80015b2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b6:	7819      	ldrb	r1, [r3, #0]
 80015b8:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 80015bc:	443b      	add	r3, r7
 80015be:	460a      	mov	r2, r1
 80015c0:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (uint8_t i = 0; i < len; i++)
 80015c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015c8:	3301      	adds	r3, #1
 80015ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80015ce:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3e8      	bcc.n	80015ac <init_table+0x4c>
			WriteCmdParamN(cmd, len, dat);
 80015da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fdc7 	bl	800117c <WriteCmdParamN>
		}
		size -= len + 2;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b02      	subs	r3, #2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	807b      	strh	r3, [r7, #2]
	while (size > 0)
 8001600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	dcb4      	bgt.n	8001572 <init_table+0x12>
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	@ 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <init_table16>:

static void init_table16(const void *table, int16_t size)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
	uint16_t *p = (uint16_t *) table;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]
	while (size > 0) {
 8001622:	e01d      	b.n	8001660 <init_table16+0x4e>
		uint16_t cmd = pgm_read_word(p++);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1c9a      	adds	r2, r3, #2
 8001628:	60fa      	str	r2, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	817b      	strh	r3, [r7, #10]
		uint16_t d = pgm_read_word(p++);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1c9a      	adds	r2, r3, #2
 8001632:	60fa      	str	r2, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	813b      	strh	r3, [r7, #8]
		if (cmd == TFTLCD_DELAY)
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163e:	4293      	cmp	r3, r2
 8001640:	d104      	bne.n	800164c <init_table16+0x3a>
			delay(d);
 8001642:	893b      	ldrh	r3, [r7, #8]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fc01 	bl	8001e4c <delay>
 800164a:	e005      	b.n	8001658 <init_table16+0x46>
		else {
			writecmddata(cmd, d);                      //static function
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc3c 	bl	8000ed0 <writecmddata>
		}
		size -= 2 * sizeof(int16_t);
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	3b04      	subs	r3, #4
 800165c:	b29b      	uxth	r3, r3
 800165e:	807b      	strh	r3, [r7, #2]
	while (size > 0) {
 8001660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dcdd      	bgt.n	8001624 <init_table16+0x12>
	}
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <read16bits>:

static uint16_t read16bits(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	uint16_t ret;
	uint8_t lo;
	READ_8(ret);
 800167a:	2101      	movs	r1, #1
 800167c:	4873      	ldr	r0, [pc, #460]	@ (800184c <read16bits+0x1d8>)
 800167e:	f7ff f9f1 	bl	8000a64 <PIN_HIGH>
 8001682:	2101      	movs	r1, #1
 8001684:	4871      	ldr	r0, [pc, #452]	@ (800184c <read16bits+0x1d8>)
 8001686:	f7ff f9dd 	bl	8000a44 <PIN_LOW>
 800168a:	2101      	movs	r1, #1
 800168c:	486f      	ldr	r0, [pc, #444]	@ (800184c <read16bits+0x1d8>)
 800168e:	f7ff f9d9 	bl	8000a44 <PIN_LOW>
 8001692:	2101      	movs	r1, #1
 8001694:	486d      	ldr	r0, [pc, #436]	@ (800184c <read16bits+0x1d8>)
 8001696:	f7ff f9d5 	bl	8000a44 <PIN_LOW>
 800169a:	2101      	movs	r1, #1
 800169c:	486b      	ldr	r0, [pc, #428]	@ (800184c <read16bits+0x1d8>)
 800169e:	f7ff f9d1 	bl	8000a44 <PIN_LOW>
 80016a2:	2101      	movs	r1, #1
 80016a4:	4869      	ldr	r0, [pc, #420]	@ (800184c <read16bits+0x1d8>)
 80016a6:	f7ff f9cd 	bl	8000a44 <PIN_LOW>
 80016aa:	2101      	movs	r1, #1
 80016ac:	4867      	ldr	r0, [pc, #412]	@ (800184c <read16bits+0x1d8>)
 80016ae:	f7ff f9c9 	bl	8000a44 <PIN_LOW>
 80016b2:	2101      	movs	r1, #1
 80016b4:	4865      	ldr	r0, [pc, #404]	@ (800184c <read16bits+0x1d8>)
 80016b6:	f7ff f9c5 	bl	8000a44 <PIN_LOW>
 80016ba:	4b64      	ldr	r3, [pc, #400]	@ (800184c <read16bits+0x1d8>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b61      	ldr	r3, [pc, #388]	@ (8001850 <read16bits+0x1dc>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b5d      	ldr	r3, [pc, #372]	@ (8001850 <read16bits+0x1dc>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b58      	ldr	r3, [pc, #352]	@ (8001850 <read16bits+0x1dc>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b53      	ldr	r3, [pc, #332]	@ (8001850 <read16bits+0x1dc>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b4e      	ldr	r3, [pc, #312]	@ (800184c <read16bits+0x1d8>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	b29b      	uxth	r3, r3
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	b29b      	uxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <read16bits+0x1e0>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b29b      	uxth	r3, r3
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	b29b      	uxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b45      	ldr	r3, [pc, #276]	@ (800184c <read16bits+0x1d8>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	0a5b      	lsrs	r3, r3, #9
 800173a:	b29b      	uxth	r3, r3
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	2101      	movs	r1, #1
 8001748:	4840      	ldr	r0, [pc, #256]	@ (800184c <read16bits+0x1d8>)
 800174a:	f7ff f98b 	bl	8000a64 <PIN_HIGH>
 800174e:	2101      	movs	r1, #1
 8001750:	483e      	ldr	r0, [pc, #248]	@ (800184c <read16bits+0x1d8>)
 8001752:	f7ff f987 	bl	8000a64 <PIN_HIGH>
	READ_8(lo);
 8001756:	2101      	movs	r1, #1
 8001758:	483c      	ldr	r0, [pc, #240]	@ (800184c <read16bits+0x1d8>)
 800175a:	f7ff f983 	bl	8000a64 <PIN_HIGH>
 800175e:	2101      	movs	r1, #1
 8001760:	483a      	ldr	r0, [pc, #232]	@ (800184c <read16bits+0x1d8>)
 8001762:	f7ff f96f 	bl	8000a44 <PIN_LOW>
 8001766:	2101      	movs	r1, #1
 8001768:	4838      	ldr	r0, [pc, #224]	@ (800184c <read16bits+0x1d8>)
 800176a:	f7ff f96b 	bl	8000a44 <PIN_LOW>
 800176e:	2101      	movs	r1, #1
 8001770:	4836      	ldr	r0, [pc, #216]	@ (800184c <read16bits+0x1d8>)
 8001772:	f7ff f967 	bl	8000a44 <PIN_LOW>
 8001776:	2101      	movs	r1, #1
 8001778:	4834      	ldr	r0, [pc, #208]	@ (800184c <read16bits+0x1d8>)
 800177a:	f7ff f963 	bl	8000a44 <PIN_LOW>
 800177e:	2101      	movs	r1, #1
 8001780:	4832      	ldr	r0, [pc, #200]	@ (800184c <read16bits+0x1d8>)
 8001782:	f7ff f95f 	bl	8000a44 <PIN_LOW>
 8001786:	2101      	movs	r1, #1
 8001788:	4830      	ldr	r0, [pc, #192]	@ (800184c <read16bits+0x1d8>)
 800178a:	f7ff f95b 	bl	8000a44 <PIN_LOW>
 800178e:	2101      	movs	r1, #1
 8001790:	482e      	ldr	r0, [pc, #184]	@ (800184c <read16bits+0x1d8>)
 8001792:	f7ff f957 	bl	8000a44 <PIN_LOW>
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <read16bits+0x1d8>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <read16bits+0x1dc>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <read16bits+0x1dc>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <read16bits+0x1dc>)
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <read16bits+0x1dc>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <read16bits+0x1d8>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <read16bits+0x1e0>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <read16bits+0x1d8>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	0a5b      	lsrs	r3, r3, #9
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	717b      	strb	r3, [r7, #5]
 8001822:	2101      	movs	r1, #1
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <read16bits+0x1d8>)
 8001826:	f7ff f91d 	bl	8000a64 <PIN_HIGH>
 800182a:	2101      	movs	r1, #1
 800182c:	4807      	ldr	r0, [pc, #28]	@ (800184c <read16bits+0x1d8>)
 800182e:	f7ff f919 	bl	8000a64 <PIN_HIGH>
	return (ret << 8) | lo;
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21b      	sxth	r3, r3
 8001840:	b29b      	uxth	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800

08001858 <readReg>:

static uint16_t readReg(uint16_t reg, int8_t index)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	80fb      	strh	r3, [r7, #6]
 8001864:	4613      	mov	r3, r2
 8001866:	717b      	strb	r3, [r7, #5]
	uint16_t ret;
	uint8_t lo;
	if (!done_reset)
 8001868:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <readReg+0x1a8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <readReg+0x1c>
		tft_reset();
 8001870:	f001 f944 	bl	8002afc <tft_reset>
	CS_ACTIVE;
 8001874:	2101      	movs	r1, #1
 8001876:	4863      	ldr	r0, [pc, #396]	@ (8001a04 <readReg+0x1ac>)
 8001878:	f7ff f8e4 	bl	8000a44 <PIN_LOW>
	WriteCmd(reg);
 800187c:	2110      	movs	r1, #16
 800187e:	4862      	ldr	r0, [pc, #392]	@ (8001a08 <readReg+0x1b0>)
 8001880:	f7ff f8e0 	bl	8000a44 <PIN_LOW>
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	73bb      	strb	r3, [r7, #14]
 8001890:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <readReg+0x1b0>)
 8001892:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	4b5a      	ldr	r3, [pc, #360]	@ (8001a04 <readReg+0x1ac>)
 800189a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a0c <readReg+0x1b4>)
 80018a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b8:	431a      	orrs	r2, r3
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c2:	431a      	orrs	r2, r3
 80018c4:	4b50      	ldr	r3, [pc, #320]	@ (8001a08 <readReg+0x1b0>)
 80018c6:	619a      	str	r2, [r3, #24]
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	105b      	asrs	r3, r3, #1
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	431a      	orrs	r2, r3
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	431a      	orrs	r2, r3
 80018ec:	4b45      	ldr	r3, [pc, #276]	@ (8001a04 <readReg+0x1ac>)
 80018ee:	619a      	str	r2, [r3, #24]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	4a45      	ldr	r2, [pc, #276]	@ (8001a0c <readReg+0x1b4>)
 80018f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	2102      	movs	r1, #2
 80018fe:	4842      	ldr	r0, [pc, #264]	@ (8001a08 <readReg+0x1b0>)
 8001900:	f7ff f8a0 	bl	8000a44 <PIN_LOW>
 8001904:	2102      	movs	r1, #2
 8001906:	4840      	ldr	r0, [pc, #256]	@ (8001a08 <readReg+0x1b0>)
 8001908:	f7ff f89c 	bl	8000a44 <PIN_LOW>
 800190c:	2102      	movs	r1, #2
 800190e:	483e      	ldr	r0, [pc, #248]	@ (8001a08 <readReg+0x1b0>)
 8001910:	f7ff f898 	bl	8000a44 <PIN_LOW>
 8001914:	2102      	movs	r1, #2
 8001916:	483c      	ldr	r0, [pc, #240]	@ (8001a08 <readReg+0x1b0>)
 8001918:	f7ff f8a4 	bl	8000a64 <PIN_HIGH>
 800191c:	2102      	movs	r1, #2
 800191e:	483a      	ldr	r0, [pc, #232]	@ (8001a08 <readReg+0x1b0>)
 8001920:	f7ff f8a0 	bl	8000a64 <PIN_HIGH>
 8001924:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <readReg+0x1b0>)
 8001926:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	4b35      	ldr	r3, [pc, #212]	@ (8001a04 <readReg+0x1ac>)
 800192e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001932:	619a      	str	r2, [r3, #24]
 8001934:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <readReg+0x1b4>)
 8001936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194c:	431a      	orrs	r2, r3
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	025b      	lsls	r3, r3, #9
 8001952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001956:	431a      	orrs	r2, r3
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <readReg+0x1b0>)
 800195a:	619a      	str	r2, [r3, #24]
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	431a      	orrs	r2, r3
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	431a      	orrs	r2, r3
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	431a      	orrs	r2, r3
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <readReg+0x1ac>)
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	019b      	lsls	r3, r3, #6
 8001988:	4a20      	ldr	r2, [pc, #128]	@ (8001a0c <readReg+0x1b4>)
 800198a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	2102      	movs	r1, #2
 8001992:	481d      	ldr	r0, [pc, #116]	@ (8001a08 <readReg+0x1b0>)
 8001994:	f7ff f856 	bl	8000a44 <PIN_LOW>
 8001998:	2102      	movs	r1, #2
 800199a:	481b      	ldr	r0, [pc, #108]	@ (8001a08 <readReg+0x1b0>)
 800199c:	f7ff f852 	bl	8000a44 <PIN_LOW>
 80019a0:	2102      	movs	r1, #2
 80019a2:	4819      	ldr	r0, [pc, #100]	@ (8001a08 <readReg+0x1b0>)
 80019a4:	f7ff f84e 	bl	8000a44 <PIN_LOW>
 80019a8:	2102      	movs	r1, #2
 80019aa:	4817      	ldr	r0, [pc, #92]	@ (8001a08 <readReg+0x1b0>)
 80019ac:	f7ff f85a 	bl	8000a64 <PIN_HIGH>
 80019b0:	2102      	movs	r1, #2
 80019b2:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <readReg+0x1b0>)
 80019b4:	f7ff f856 	bl	8000a64 <PIN_HIGH>
 80019b8:	2110      	movs	r1, #16
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <readReg+0x1b0>)
 80019bc:	f7ff f852 	bl	8000a64 <PIN_HIGH>
	setReadDir();
 80019c0:	f7ff f92a 	bl	8000c18 <setReadDir>
	delay(1);    //1us should be adequate
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 fa41 	bl	8001e4c <delay>
	//    READ_16(ret);
	do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 80019ca:	f7ff fe53 	bl	8001674 <read16bits>
 80019ce:	4603      	mov	r3, r0
 80019d0:	81bb      	strh	r3, [r7, #12]
 80019d2:	797b      	ldrb	r3, [r7, #5]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	717b      	strb	r3, [r7, #5]
 80019da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	daf3      	bge.n	80019ca <readReg+0x172>
	RD_IDLE;
 80019e2:	2101      	movs	r1, #1
 80019e4:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <readReg+0x1b0>)
 80019e6:	f7ff f83d 	bl	8000a64 <PIN_HIGH>
	CS_IDLE;
 80019ea:	2101      	movs	r1, #1
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <readReg+0x1ac>)
 80019ee:	f7ff f839 	bl	8000a64 <PIN_HIGH>
	setWriteDir();
 80019f2:	f7ff f93f 	bl	8000c74 <setWriteDir>
	return ret;
 80019f6:	89bb      	ldrh	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200000cc 	.word	0x200000cc
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020800 	.word	0x40020800

08001a10 <readReg32>:

static uint32_t readReg32(uint16_t reg)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff1a 	bl	8001858 <readReg>
 8001a24:	4603      	mov	r3, r0
 8001a26:	81fb      	strh	r3, [r7, #14]
	uint16_t l = readReg(reg, 1);
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff13 	bl	8001858 <readReg>
 8001a32:	4603      	mov	r3, r0
 8001a34:	81bb      	strh	r3, [r7, #12]
	return ((uint32_t) h << 16) | (l);
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	89bb      	ldrh	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <readReg40>:

static uint32_t readReg40(uint16_t reg)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff feff 	bl	8001858 <readReg>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	81fb      	strh	r3, [r7, #14]
	uint16_t m = readReg(reg, 1);
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fef8 	bl	8001858 <readReg>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81bb      	strh	r3, [r7, #12]
	uint16_t l = readReg(reg, 2);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fef1 	bl	8001858 <readReg>
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
	return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	061a      	lsls	r2, r3, #24
 8001a7e:	89bb      	ldrh	r3, [r7, #12]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	4313      	orrs	r3, r2
 8001a84:	897a      	ldrh	r2, [r7, #10]
 8001a86:	0a12      	lsrs	r2, r2, #8
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	4313      	orrs	r3, r2
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <setAddrWindow>:
{
	pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

static void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	80fb      	strh	r3, [r7, #6]
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80bb      	strh	r3, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8001ab2:	4b80      	ldr	r3, [pc, #512]	@ (8001cb4 <setAddrWindow+0x220>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f249 3227 	movw	r2, #37671	@ 0x9327
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d117      	bne.n	8001aee <setAddrWindow+0x5a>
		if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8001abe:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb8 <setAddrWindow+0x224>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <setAddrWindow+0x42>
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	3320      	adds	r3, #32
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	883b      	ldrh	r3, [r7, #0]
 8001ad0:	3320      	adds	r3, #32
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	803b      	strh	r3, [r7, #0]
		if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8001ad6:	4b78      	ldr	r3, [pc, #480]	@ (8001cb8 <setAddrWindow+0x224>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <setAddrWindow+0x5a>
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	3320      	adds	r3, #32
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	80fb      	strh	r3, [r7, #6]
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	3320      	adds	r3, #32
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	807b      	strh	r3, [r7, #2]
	}
#endif
#if 1
	if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8001aee:	4b71      	ldr	r3, [pc, #452]	@ (8001cb4 <setAddrWindow+0x220>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d128      	bne.n	8001b4c <setAddrWindow+0xb8>
 8001afa:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <setAddrWindow+0x224>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d022      	beq.n	8001b4c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	81fb      	strh	r3, [r7, #14]
 8001b10:	883a      	ldrh	r2, [r7, #0]
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8001b1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <setAddrWindow+0x9c>
 8001b22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	803b      	strh	r3, [r7, #0]
 8001b2e:	e00d      	b.n	8001b4c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8001b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <setAddrWindow+0xb8>
 8001b38:	887a      	ldrh	r2, [r7, #2]
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	807b      	strh	r3, [r7, #2]
 8001b42:	883a      	ldrh	r2, [r7, #0]
 8001b44:	89bb      	ldrh	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	803b      	strh	r3, [r7, #0]
	}
#endif
	if (_lcd_capable & MIPI_DCS_REV1) {
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <setAddrWindow+0x228>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d054      	beq.n	8001c02 <setAddrWindow+0x16e>
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <setAddrWindow+0x22c>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	121b      	asrs	r3, r3, #8
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b70:	121b      	asrs	r3, r3, #8
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	b2dc      	uxtb	r4, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	f7ff fccb 	bl	8001518 <WriteCmdParam4>
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8001b82:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <setAddrWindow+0x230>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b2d8      	uxtb	r0, r3
 8001b88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b8c:	121b      	asrs	r3, r3, #8
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b2d9      	uxtb	r1, r3
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b9a:	121b      	asrs	r3, r3, #8
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	b2dc      	uxtb	r4, r3
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	f7ff fcb6 	bl	8001518 <WriteCmdParam4>
		if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8001bac:	4b46      	ldr	r3, [pc, #280]	@ (8001cc8 <setAddrWindow+0x234>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d07b      	beq.n	8001cac <setAddrWindow+0x218>
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <setAddrWindow+0x220>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2b65      	cmp	r3, #101	@ 0x65
 8001bba:	d177      	bne.n	8001cac <setAddrWindow+0x218>
			uint8_t d[2];
			d[0] = x >> 8; d[1] = x;
 8001bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc0:	121b      	asrs	r3, r3, #8
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	723b      	strb	r3, [r7, #8]
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8001bce:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <setAddrWindow+0x238>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f107 0208 	add.w	r2, r7, #8
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff facf 	bl	800117c <WriteCmdParamN>
			d[0] = y >> 8; d[1] = y;
 8001bde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be2:	121b      	asrs	r3, r3, #8
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	723b      	strb	r3, [r7, #8]
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MP, 2, d);
 8001bf0:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <setAddrWindow+0x23c>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f107 0208 	add.w	r2, r7, #8
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fabe 	bl	800117c <WriteCmdParamN>
			tft_writeCmdData(_SP, y);
			tft_writeCmdData(_EC, x1);
			tft_writeCmdData(_EP, y1);
		}
	}
}
 8001c00:	e054      	b.n	8001cac <setAddrWindow+0x218>
		tft_writeCmdData(_MC, x);
 8001c02:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <setAddrWindow+0x238>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f974 	bl	8001ef8 <tft_writeCmdData>
		tft_writeCmdData(_MP, y);
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <setAddrWindow+0x23c>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	88ba      	ldrh	r2, [r7, #4]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f96d 	bl	8001ef8 <tft_writeCmdData>
		if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8001c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d105      	bne.n	8001c36 <setAddrWindow+0x1a2>
 8001c2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d03a      	beq.n	8001cac <setAddrWindow+0x218>
			if (_lcd_capable & XSA_XEA_16BIT) {
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <setAddrWindow+0x228>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d018      	beq.n	8001c74 <setAddrWindow+0x1e0>
				if (rotation & 1)
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <setAddrWindow+0x224>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <setAddrWindow+0x1ce>
					y1 = y = (y1 << 8) | y;
 8001c4e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	88bb      	ldrh	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	80bb      	strh	r3, [r7, #4]
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	803b      	strh	r3, [r7, #0]
 8001c60:	e008      	b.n	8001c74 <setAddrWindow+0x1e0>
					x1 = x = (x1 << 8) | x;
 8001c62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	807b      	strh	r3, [r7, #2]
			tft_writeCmdData(_SC, x);
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <setAddrWindow+0x22c>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f93b 	bl	8001ef8 <tft_writeCmdData>
			tft_writeCmdData(_SP, y);
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <setAddrWindow+0x230>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	88ba      	ldrh	r2, [r7, #4]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f934 	bl	8001ef8 <tft_writeCmdData>
			tft_writeCmdData(_EC, x1);
 8001c90:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <setAddrWindow+0x240>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f92d 	bl	8001ef8 <tft_writeCmdData>
			tft_writeCmdData(_EP, y1);
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <setAddrWindow+0x244>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	883a      	ldrh	r2, [r7, #0]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f926 	bl	8001ef8 <tft_writeCmdData>
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	200000da 	.word	0x200000da
 8001cb8:	200000d4 	.word	0x200000d4
 8001cbc:	200000d8 	.word	0x200000d8
 8001cc0:	200000e6 	.word	0x200000e6
 8001cc4:	200000ea 	.word	0x200000ea
 8001cc8:	200000cd 	.word	0x200000cd
 8001ccc:	200000e0 	.word	0x200000e0
 8001cd0:	200000e2 	.word	0x200000e2
 8001cd4:	200000e8 	.word	0x200000e8
 8001cd8:	200000ec 	.word	0x200000ec

08001cdc <writePixel>:

static void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	807b      	strh	r3, [r7, #2]
	tft_drawPixel(x, y, color);
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fea7 	bl	8003a4c <tft_drawPixel>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <writeLine>:

static void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b089      	sub	sp, #36	@ 0x24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4611      	mov	r1, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	4623      	mov	r3, r4
 8001d16:	80fb      	strh	r3, [r7, #6]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	80bb      	strh	r3, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001d24:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d32:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d36:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bfb8      	it	lt
 8001d44:	425b      	neglt	r3, r3
 8001d46:	429a      	cmp	r2, r3
 8001d48:	bfcc      	ite	gt
 8001d4a:	2301      	movgt	r3, #1
 8001d4c:	2300      	movle	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8001d52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <writeLine+0x6c>
		_swap_int16_t(x0, y0);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	833b      	strh	r3, [r7, #24]
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	80fb      	strh	r3, [r7, #6]
 8001d62:	8b3b      	ldrh	r3, [r7, #24]
 8001d64:	80bb      	strh	r3, [r7, #4]
		_swap_int16_t(x1, y1);
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	82fb      	strh	r3, [r7, #22]
 8001d6a:	883b      	ldrh	r3, [r7, #0]
 8001d6c:	807b      	strh	r3, [r7, #2]
 8001d6e:	8afb      	ldrh	r3, [r7, #22]
 8001d70:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8001d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dd0b      	ble.n	8001d96 <writeLine+0x90>
		_swap_int16_t(x0, x1);
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	82bb      	strh	r3, [r7, #20]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	80fb      	strh	r3, [r7, #6]
 8001d86:	8abb      	ldrh	r3, [r7, #20]
 8001d88:	807b      	strh	r3, [r7, #2]
		_swap_int16_t(y0, y1);
 8001d8a:	88bb      	ldrh	r3, [r7, #4]
 8001d8c:	827b      	strh	r3, [r7, #18]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	80bb      	strh	r3, [r7, #4]
 8001d92:	8a7b      	ldrh	r3, [r7, #18]
 8001d94:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001da0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001da4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bfb8      	it	lt
 8001dae:	425b      	neglt	r3, r3
 8001db0:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001db2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001db6:	0fda      	lsrs	r2, r3, #31
 8001db8:	4413      	add	r3, r2
 8001dba:	105b      	asrs	r3, r3, #1
 8001dbc:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 8001dbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001dc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	da02      	bge.n	8001dd0 <writeLine+0xca>
		ystep = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	83bb      	strh	r3, [r7, #28]
 8001dce:	e031      	b.n	8001e34 <writeLine+0x12e>
	} else {
		ystep = -1;
 8001dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd4:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++) {
 8001dd6:	e02d      	b.n	8001e34 <writeLine+0x12e>
		if (steep) {
 8001dd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <writeLine+0xec>
			writePixel(y0, x0, color);
 8001de0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001de2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001de6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff76 	bl	8001cdc <writePixel>
 8001df0:	e007      	b.n	8001e02 <writeLine+0xfc>
		} else {
			writePixel(x0, y0, color);
 8001df2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001df4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff6d 	bl	8001cdc <writePixel>
		}
		err -= dy;
 8001e02:	8bfa      	ldrh	r2, [r7, #30]
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8001e0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da09      	bge.n	8001e28 <writeLine+0x122>
			y0 += ystep;
 8001e14:	88ba      	ldrh	r2, [r7, #4]
 8001e16:	8bbb      	ldrh	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8001e1e:	8bfa      	ldrh	r2, [r7, #30]
 8001e20:	8a3b      	ldrh	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++) {
 8001e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	ddcb      	ble.n	8001dd8 <writeLine+0xd2>
		}
	}
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
	...

08001e4c <delay>:
 * @details Precisa ser customizada de acordo com o microcontrolador
 *
 * @param time unidade de us
 */
static void delay (uint32_t time)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <delay+0x2c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001e5c:	bf00      	nop
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <delay+0x2c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d8f9      	bhi.n	8001e5e <delay+0x12>
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	2000003c 	.word	0x2000003c

08001e7c <tft_color565>:

/* Funções públicas **********************************************************/
uint16_t tft_color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	460b      	mov	r3, r1
 8001e88:	71bb      	strb	r3, [r7, #6]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	717b      	strb	r3, [r7, #5]
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e98:	f023 0307 	bic.w	r3, r3, #7
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	797b      	ldrb	r3, [r7, #5]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <tft_readPixel>:

uint16_t tft_readPixel(int16_t x, int16_t y) { uint16_t color; tft_readGRAM(x, y, &color, 1, 1); return color; }
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	80fb      	strh	r3, [r7, #6]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	80bb      	strh	r3, [r7, #4]
 8001ed8:	f107 020e 	add.w	r2, r7, #14
 8001edc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ee0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f000 f817 	bl	8001f1c <tft_readGRAM>
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <tft_writeCmdData>:

void tft_writeCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	460a      	mov	r2, r1
 8001f02:	80fb      	strh	r3, [r7, #6]
 8001f04:	4613      	mov	r3, r2
 8001f06:	80bb      	strh	r3, [r7, #4]
 8001f08:	88ba      	ldrh	r2, [r7, #4]
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ffde 	bl	8000ed0 <writecmddata>
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <tft_readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t tft_readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b08b      	sub	sp, #44	@ 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	81fb      	strh	r3, [r7, #14]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	81bb      	strh	r3, [r7, #12]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
	uint16_t ret, dummy, _MR = _MW;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <tft_readGRAM+0x88>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t n = w * h, row = 0, col = 0;
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001f3c:	fb12 f303 	smulbb	r3, r2, r3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f44:	2300      	movs	r3, #0
 8001f46:	843b      	strh	r3, [r7, #32]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	83fb      	strh	r3, [r7, #30]
	uint8_t r, g, b, tmp;

	if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <tft_readGRAM+0x8c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <tft_readGRAM+0x48>
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <tft_readGRAM+0x90>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <tft_readGRAM+0x48>
		_MR = 0x2E;
 8001f60:	232e      	movs	r3, #46	@ 0x2e
 8001f62:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (_lcd_ID == 0x1602)
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <tft_readGRAM+0x94>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f241 6202 	movw	r2, #5634	@ 0x1602
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <tft_readGRAM+0x58>
		_MR = 0x2E;
 8001f70:	232e      	movs	r3, #46	@ 0x2e
 8001f72:	84bb      	strh	r3, [r7, #36]	@ 0x24
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001f74:	89fa      	ldrh	r2, [r7, #14]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b21c      	sxth	r4, r3
 8001f82:	89ba      	ldrh	r2, [r7, #12]
 8001f84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001f94:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001f98:	4622      	mov	r2, r4
 8001f9a:	f7ff fd7b 	bl	8001a94 <setAddrWindow>
	while (n > 0) {
 8001f9e:	f000 bd86 	b.w	8002aae <tft_readGRAM+0xb92>
 8001fa2:	bf00      	nop
 8001fa4:	200000e4 	.word	0x200000e4
 8001fa8:	200000cd 	.word	0x200000cd
 8001fac:	200000d8 	.word	0x200000d8
 8001fb0:	200000da 	.word	0x200000da
		if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8001fb4:	4ba0      	ldr	r3, [pc, #640]	@ (8002238 <tft_readGRAM+0x31c>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <tft_readGRAM+0xc8>
			tft_writeCmdData(_MC, x + col);
 8001fc0:	4b9e      	ldr	r3, [pc, #632]	@ (800223c <tft_readGRAM+0x320>)
 8001fc2:	8818      	ldrh	r0, [r3, #0]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	8bfb      	ldrh	r3, [r7, #30]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff ff93 	bl	8001ef8 <tft_writeCmdData>
			tft_writeCmdData(_MP, y + row);
 8001fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8002240 <tft_readGRAM+0x324>)
 8001fd4:	8818      	ldrh	r0, [r3, #0]
 8001fd6:	89ba      	ldrh	r2, [r7, #12]
 8001fd8:	8c3b      	ldrh	r3, [r7, #32]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7ff ff8a 	bl	8001ef8 <tft_writeCmdData>
		}
		CS_ACTIVE;
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4897      	ldr	r0, [pc, #604]	@ (8002244 <tft_readGRAM+0x328>)
 8001fe8:	f7fe fd2c 	bl	8000a44 <PIN_LOW>
		WriteCmd(_MR);
 8001fec:	2110      	movs	r1, #16
 8001fee:	4896      	ldr	r0, [pc, #600]	@ (8002248 <tft_readGRAM+0x32c>)
 8001ff0:	f7fe fd28 	bl	8000a44 <PIN_LOW>
 8001ff4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	777b      	strb	r3, [r7, #29]
 8001ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ffe:	773b      	strb	r3, [r7, #28]
 8002000:	4b91      	ldr	r3, [pc, #580]	@ (8002248 <tft_readGRAM+0x32c>)
 8002002:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002006:	619a      	str	r2, [r3, #24]
 8002008:	4b8e      	ldr	r3, [pc, #568]	@ (8002244 <tft_readGRAM+0x328>)
 800200a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	4b8e      	ldr	r3, [pc, #568]	@ (800224c <tft_readGRAM+0x330>)
 8002012:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002016:	619a      	str	r2, [r3, #24]
 8002018:	7f7b      	ldrb	r3, [r7, #29]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002020:	7f7b      	ldrb	r3, [r7, #29]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002028:	431a      	orrs	r2, r3
 800202a:	7f7b      	ldrb	r3, [r7, #29]
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002032:	431a      	orrs	r2, r3
 8002034:	4b84      	ldr	r3, [pc, #528]	@ (8002248 <tft_readGRAM+0x32c>)
 8002036:	619a      	str	r2, [r3, #24]
 8002038:	7f7b      	ldrb	r3, [r7, #29]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002040:	7f7b      	ldrb	r3, [r7, #29]
 8002042:	105b      	asrs	r3, r3, #1
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	7f7b      	ldrb	r3, [r7, #29]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	431a      	orrs	r2, r3
 8002054:	7f7b      	ldrb	r3, [r7, #29]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	4b79      	ldr	r3, [pc, #484]	@ (8002244 <tft_readGRAM+0x328>)
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	7f7b      	ldrb	r3, [r7, #29]
 8002062:	019b      	lsls	r3, r3, #6
 8002064:	4a79      	ldr	r2, [pc, #484]	@ (800224c <tft_readGRAM+0x330>)
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	2102      	movs	r1, #2
 800206e:	4876      	ldr	r0, [pc, #472]	@ (8002248 <tft_readGRAM+0x32c>)
 8002070:	f7fe fce8 	bl	8000a44 <PIN_LOW>
 8002074:	2102      	movs	r1, #2
 8002076:	4874      	ldr	r0, [pc, #464]	@ (8002248 <tft_readGRAM+0x32c>)
 8002078:	f7fe fce4 	bl	8000a44 <PIN_LOW>
 800207c:	2102      	movs	r1, #2
 800207e:	4872      	ldr	r0, [pc, #456]	@ (8002248 <tft_readGRAM+0x32c>)
 8002080:	f7fe fce0 	bl	8000a44 <PIN_LOW>
 8002084:	2102      	movs	r1, #2
 8002086:	4870      	ldr	r0, [pc, #448]	@ (8002248 <tft_readGRAM+0x32c>)
 8002088:	f7fe fcec 	bl	8000a64 <PIN_HIGH>
 800208c:	2102      	movs	r1, #2
 800208e:	486e      	ldr	r0, [pc, #440]	@ (8002248 <tft_readGRAM+0x32c>)
 8002090:	f7fe fce8 	bl	8000a64 <PIN_HIGH>
 8002094:	4b6c      	ldr	r3, [pc, #432]	@ (8002248 <tft_readGRAM+0x32c>)
 8002096:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	4b69      	ldr	r3, [pc, #420]	@ (8002244 <tft_readGRAM+0x328>)
 800209e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80020a2:	619a      	str	r2, [r3, #24]
 80020a4:	4b69      	ldr	r3, [pc, #420]	@ (800224c <tft_readGRAM+0x330>)
 80020a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020aa:	619a      	str	r2, [r3, #24]
 80020ac:	7f3b      	ldrb	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80020b4:	7f3b      	ldrb	r3, [r7, #28]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	431a      	orrs	r2, r3
 80020be:	7f3b      	ldrb	r3, [r7, #28]
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	431a      	orrs	r2, r3
 80020c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002248 <tft_readGRAM+0x32c>)
 80020ca:	619a      	str	r2, [r3, #24]
 80020cc:	7f3b      	ldrb	r3, [r7, #28]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80020d4:	7f3b      	ldrb	r3, [r7, #28]
 80020d6:	105b      	asrs	r3, r3, #1
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	7f3b      	ldrb	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	431a      	orrs	r2, r3
 80020e8:	7f3b      	ldrb	r3, [r7, #28]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	431a      	orrs	r2, r3
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <tft_readGRAM+0x328>)
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	7f3b      	ldrb	r3, [r7, #28]
 80020f6:	019b      	lsls	r3, r3, #6
 80020f8:	4a54      	ldr	r2, [pc, #336]	@ (800224c <tft_readGRAM+0x330>)
 80020fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	2102      	movs	r1, #2
 8002102:	4851      	ldr	r0, [pc, #324]	@ (8002248 <tft_readGRAM+0x32c>)
 8002104:	f7fe fc9e 	bl	8000a44 <PIN_LOW>
 8002108:	2102      	movs	r1, #2
 800210a:	484f      	ldr	r0, [pc, #316]	@ (8002248 <tft_readGRAM+0x32c>)
 800210c:	f7fe fc9a 	bl	8000a44 <PIN_LOW>
 8002110:	2102      	movs	r1, #2
 8002112:	484d      	ldr	r0, [pc, #308]	@ (8002248 <tft_readGRAM+0x32c>)
 8002114:	f7fe fc96 	bl	8000a44 <PIN_LOW>
 8002118:	2102      	movs	r1, #2
 800211a:	484b      	ldr	r0, [pc, #300]	@ (8002248 <tft_readGRAM+0x32c>)
 800211c:	f7fe fca2 	bl	8000a64 <PIN_HIGH>
 8002120:	2102      	movs	r1, #2
 8002122:	4849      	ldr	r0, [pc, #292]	@ (8002248 <tft_readGRAM+0x32c>)
 8002124:	f7fe fc9e 	bl	8000a64 <PIN_HIGH>
 8002128:	2110      	movs	r1, #16
 800212a:	4847      	ldr	r0, [pc, #284]	@ (8002248 <tft_readGRAM+0x32c>)
 800212c:	f7fe fc9a 	bl	8000a64 <PIN_HIGH>
		setReadDir();
 8002130:	f7fe fd72 	bl	8000c18 <setReadDir>
		if (_lcd_capable & READ_NODUMMY) {
 8002134:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <tft_readGRAM+0x31c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	f040 816d 	bne.w	800241c <tft_readGRAM+0x500>
			;
		} else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002142:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <tft_readGRAM+0x31c>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <tft_readGRAM+0x23e>
 800214e:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <tft_readGRAM+0x334>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f241 2289 	movw	r2, #4745	@ 0x1289
 8002156:	4293      	cmp	r3, r2
 8002158:	d17c      	bne.n	8002254 <tft_readGRAM+0x338>
			READ_8(r);
 800215a:	2101      	movs	r1, #1
 800215c:	483a      	ldr	r0, [pc, #232]	@ (8002248 <tft_readGRAM+0x32c>)
 800215e:	f7fe fc81 	bl	8000a64 <PIN_HIGH>
 8002162:	2101      	movs	r1, #1
 8002164:	4838      	ldr	r0, [pc, #224]	@ (8002248 <tft_readGRAM+0x32c>)
 8002166:	f7fe fc6d 	bl	8000a44 <PIN_LOW>
 800216a:	2101      	movs	r1, #1
 800216c:	4836      	ldr	r0, [pc, #216]	@ (8002248 <tft_readGRAM+0x32c>)
 800216e:	f7fe fc69 	bl	8000a44 <PIN_LOW>
 8002172:	2101      	movs	r1, #1
 8002174:	4834      	ldr	r0, [pc, #208]	@ (8002248 <tft_readGRAM+0x32c>)
 8002176:	f7fe fc65 	bl	8000a44 <PIN_LOW>
 800217a:	2101      	movs	r1, #1
 800217c:	4832      	ldr	r0, [pc, #200]	@ (8002248 <tft_readGRAM+0x32c>)
 800217e:	f7fe fc61 	bl	8000a44 <PIN_LOW>
 8002182:	2101      	movs	r1, #1
 8002184:	4830      	ldr	r0, [pc, #192]	@ (8002248 <tft_readGRAM+0x32c>)
 8002186:	f7fe fc5d 	bl	8000a44 <PIN_LOW>
 800218a:	2101      	movs	r1, #1
 800218c:	482e      	ldr	r0, [pc, #184]	@ (8002248 <tft_readGRAM+0x32c>)
 800218e:	f7fe fc59 	bl	8000a44 <PIN_LOW>
 8002192:	2101      	movs	r1, #1
 8002194:	482c      	ldr	r0, [pc, #176]	@ (8002248 <tft_readGRAM+0x32c>)
 8002196:	f7fe fc55 	bl	8000a44 <PIN_LOW>
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <tft_readGRAM+0x32c>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <tft_readGRAM+0x328>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <tft_readGRAM+0x328>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <tft_readGRAM+0x328>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <tft_readGRAM+0x328>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <tft_readGRAM+0x32c>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <tft_readGRAM+0x330>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <tft_readGRAM+0x32c>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	0a5b      	lsrs	r3, r3, #9
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	75fb      	strb	r3, [r7, #23]
 8002226:	2101      	movs	r1, #1
 8002228:	4807      	ldr	r0, [pc, #28]	@ (8002248 <tft_readGRAM+0x32c>)
 800222a:	f7fe fc1b 	bl	8000a64 <PIN_HIGH>
 800222e:	2101      	movs	r1, #1
 8002230:	4805      	ldr	r0, [pc, #20]	@ (8002248 <tft_readGRAM+0x32c>)
 8002232:	f7fe fc17 	bl	8000a64 <PIN_HIGH>
 8002236:	e0f1      	b.n	800241c <tft_readGRAM+0x500>
 8002238:	200000d8 	.word	0x200000d8
 800223c:	200000e0 	.word	0x200000e0
 8002240:	200000e2 	.word	0x200000e2
 8002244:	40020400 	.word	0x40020400
 8002248:	40020000 	.word	0x40020000
 800224c:	40020800 	.word	0x40020800
 8002250:	200000da 	.word	0x200000da
		} else {
			READ_16(dummy);
 8002254:	2101      	movs	r1, #1
 8002256:	48ac      	ldr	r0, [pc, #688]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002258:	f7fe fc04 	bl	8000a64 <PIN_HIGH>
 800225c:	2101      	movs	r1, #1
 800225e:	48aa      	ldr	r0, [pc, #680]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002260:	f7fe fbf0 	bl	8000a44 <PIN_LOW>
 8002264:	2101      	movs	r1, #1
 8002266:	48a8      	ldr	r0, [pc, #672]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002268:	f7fe fbec 	bl	8000a44 <PIN_LOW>
 800226c:	2101      	movs	r1, #1
 800226e:	48a6      	ldr	r0, [pc, #664]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002270:	f7fe fbe8 	bl	8000a44 <PIN_LOW>
 8002274:	2101      	movs	r1, #1
 8002276:	48a4      	ldr	r0, [pc, #656]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002278:	f7fe fbe4 	bl	8000a44 <PIN_LOW>
 800227c:	2101      	movs	r1, #1
 800227e:	48a2      	ldr	r0, [pc, #648]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002280:	f7fe fbe0 	bl	8000a44 <PIN_LOW>
 8002284:	2101      	movs	r1, #1
 8002286:	48a0      	ldr	r0, [pc, #640]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002288:	f7fe fbdc 	bl	8000a44 <PIN_LOW>
 800228c:	2101      	movs	r1, #1
 800228e:	489e      	ldr	r0, [pc, #632]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002290:	f7fe fbd8 	bl	8000a44 <PIN_LOW>
 8002294:	4b9c      	ldr	r3, [pc, #624]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b9a      	ldr	r3, [pc, #616]	@ (800250c <tft_readGRAM+0x5f0>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b95      	ldr	r3, [pc, #596]	@ (800250c <tft_readGRAM+0x5f0>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b90      	ldr	r3, [pc, #576]	@ (800250c <tft_readGRAM+0x5f0>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <tft_readGRAM+0x5f0>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b87      	ldr	r3, [pc, #540]	@ (8002508 <tft_readGRAM+0x5ec>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b84      	ldr	r3, [pc, #528]	@ (8002510 <tft_readGRAM+0x5f4>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	76fb      	strb	r3, [r7, #27]
 8002320:	2101      	movs	r1, #1
 8002322:	4879      	ldr	r0, [pc, #484]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002324:	f7fe fb9e 	bl	8000a64 <PIN_HIGH>
 8002328:	2101      	movs	r1, #1
 800232a:	4877      	ldr	r0, [pc, #476]	@ (8002508 <tft_readGRAM+0x5ec>)
 800232c:	f7fe fb9a 	bl	8000a64 <PIN_HIGH>
 8002330:	2101      	movs	r1, #1
 8002332:	4875      	ldr	r0, [pc, #468]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002334:	f7fe fb96 	bl	8000a64 <PIN_HIGH>
 8002338:	2101      	movs	r1, #1
 800233a:	4873      	ldr	r0, [pc, #460]	@ (8002508 <tft_readGRAM+0x5ec>)
 800233c:	f7fe fb82 	bl	8000a44 <PIN_LOW>
 8002340:	2101      	movs	r1, #1
 8002342:	4871      	ldr	r0, [pc, #452]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002344:	f7fe fb7e 	bl	8000a44 <PIN_LOW>
 8002348:	2101      	movs	r1, #1
 800234a:	486f      	ldr	r0, [pc, #444]	@ (8002508 <tft_readGRAM+0x5ec>)
 800234c:	f7fe fb7a 	bl	8000a44 <PIN_LOW>
 8002350:	2101      	movs	r1, #1
 8002352:	486d      	ldr	r0, [pc, #436]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002354:	f7fe fb76 	bl	8000a44 <PIN_LOW>
 8002358:	2101      	movs	r1, #1
 800235a:	486b      	ldr	r0, [pc, #428]	@ (8002508 <tft_readGRAM+0x5ec>)
 800235c:	f7fe fb72 	bl	8000a44 <PIN_LOW>
 8002360:	2101      	movs	r1, #1
 8002362:	4869      	ldr	r0, [pc, #420]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002364:	f7fe fb6e 	bl	8000a44 <PIN_LOW>
 8002368:	2101      	movs	r1, #1
 800236a:	4867      	ldr	r0, [pc, #412]	@ (8002508 <tft_readGRAM+0x5ec>)
 800236c:	f7fe fb6a 	bl	8000a44 <PIN_LOW>
 8002370:	4b65      	ldr	r3, [pc, #404]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	b29b      	uxth	r3, r3
 8002378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b63      	ldr	r3, [pc, #396]	@ (800250c <tft_readGRAM+0x5f0>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	b29b      	uxth	r3, r3
 8002386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238a:	b29b      	uxth	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b5e      	ldr	r3, [pc, #376]	@ (800250c <tft_readGRAM+0x5f0>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	b29b      	uxth	r3, r3
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b59      	ldr	r3, [pc, #356]	@ (800250c <tft_readGRAM+0x5f0>)
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4b55      	ldr	r3, [pc, #340]	@ (800250c <tft_readGRAM+0x5f0>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <tft_readGRAM+0x5ec>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002510 <tft_readGRAM+0x5f4>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <tft_readGRAM+0x5ec>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	0a5b      	lsrs	r3, r3, #9
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	833b      	strh	r3, [r7, #24]
 80023fc:	2101      	movs	r1, #1
 80023fe:	4842      	ldr	r0, [pc, #264]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002400:	f7fe fb30 	bl	8000a64 <PIN_HIGH>
 8002404:	2101      	movs	r1, #1
 8002406:	4840      	ldr	r0, [pc, #256]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002408:	f7fe fb2c 	bl	8000a64 <PIN_HIGH>
 800240c:	7efb      	ldrb	r3, [r7, #27]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	833b      	strh	r3, [r7, #24]
		}
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 800241c:	4b3d      	ldr	r3, [pc, #244]	@ (8002514 <tft_readGRAM+0x5f8>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002424:	4293      	cmp	r3, r2
 8002426:	f040 830f 	bne.w	8002a48 <tft_readGRAM+0xb2c>
 800242a:	2101      	movs	r1, #1
 800242c:	4836      	ldr	r0, [pc, #216]	@ (8002508 <tft_readGRAM+0x5ec>)
 800242e:	f7fe fb19 	bl	8000a64 <PIN_HIGH>
 8002432:	2101      	movs	r1, #1
 8002434:	4834      	ldr	r0, [pc, #208]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002436:	f7fe fb05 	bl	8000a44 <PIN_LOW>
 800243a:	2101      	movs	r1, #1
 800243c:	4832      	ldr	r0, [pc, #200]	@ (8002508 <tft_readGRAM+0x5ec>)
 800243e:	f7fe fb01 	bl	8000a44 <PIN_LOW>
 8002442:	2101      	movs	r1, #1
 8002444:	4830      	ldr	r0, [pc, #192]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002446:	f7fe fafd 	bl	8000a44 <PIN_LOW>
 800244a:	2101      	movs	r1, #1
 800244c:	482e      	ldr	r0, [pc, #184]	@ (8002508 <tft_readGRAM+0x5ec>)
 800244e:	f7fe faf9 	bl	8000a44 <PIN_LOW>
 8002452:	2101      	movs	r1, #1
 8002454:	482c      	ldr	r0, [pc, #176]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002456:	f7fe faf5 	bl	8000a44 <PIN_LOW>
 800245a:	2101      	movs	r1, #1
 800245c:	482a      	ldr	r0, [pc, #168]	@ (8002508 <tft_readGRAM+0x5ec>)
 800245e:	f7fe faf1 	bl	8000a44 <PIN_LOW>
 8002462:	2101      	movs	r1, #1
 8002464:	4828      	ldr	r0, [pc, #160]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002466:	f7fe faed 	bl	8000a44 <PIN_LOW>
 800246a:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <tft_readGRAM+0x5ec>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <tft_readGRAM+0x5f0>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <tft_readGRAM+0x5f0>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <tft_readGRAM+0x5f0>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <tft_readGRAM+0x5f0>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <tft_readGRAM+0x5ec>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <tft_readGRAM+0x5f4>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <tft_readGRAM+0x5ec>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	0a5b      	lsrs	r3, r3, #9
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	75fb      	strb	r3, [r7, #23]
 80024f6:	2101      	movs	r1, #1
 80024f8:	4803      	ldr	r0, [pc, #12]	@ (8002508 <tft_readGRAM+0x5ec>)
 80024fa:	f7fe fab3 	bl	8000a64 <PIN_HIGH>
 80024fe:	2101      	movs	r1, #1
 8002500:	4801      	ldr	r0, [pc, #4]	@ (8002508 <tft_readGRAM+0x5ec>)
 8002502:	f7fe faaf 	bl	8000a64 <PIN_HIGH>
		while (n)
 8002506:	e29f      	b.n	8002a48 <tft_readGRAM+0xb2c>
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	200000da 	.word	0x200000da
		{
			if (_lcd_capable & READ_24BITS)
 8002518:	4bab      	ldr	r3, [pc, #684]	@ (80027c8 <tft_readGRAM+0x8ac>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 816b 	beq.w	80027fc <tft_readGRAM+0x8e0>
			{
				READ_8(r);
 8002526:	2101      	movs	r1, #1
 8002528:	48a8      	ldr	r0, [pc, #672]	@ (80027cc <tft_readGRAM+0x8b0>)
 800252a:	f7fe fa9b 	bl	8000a64 <PIN_HIGH>
 800252e:	2101      	movs	r1, #1
 8002530:	48a6      	ldr	r0, [pc, #664]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002532:	f7fe fa87 	bl	8000a44 <PIN_LOW>
 8002536:	2101      	movs	r1, #1
 8002538:	48a4      	ldr	r0, [pc, #656]	@ (80027cc <tft_readGRAM+0x8b0>)
 800253a:	f7fe fa83 	bl	8000a44 <PIN_LOW>
 800253e:	2101      	movs	r1, #1
 8002540:	48a2      	ldr	r0, [pc, #648]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002542:	f7fe fa7f 	bl	8000a44 <PIN_LOW>
 8002546:	2101      	movs	r1, #1
 8002548:	48a0      	ldr	r0, [pc, #640]	@ (80027cc <tft_readGRAM+0x8b0>)
 800254a:	f7fe fa7b 	bl	8000a44 <PIN_LOW>
 800254e:	2101      	movs	r1, #1
 8002550:	489e      	ldr	r0, [pc, #632]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002552:	f7fe fa77 	bl	8000a44 <PIN_LOW>
 8002556:	2101      	movs	r1, #1
 8002558:	489c      	ldr	r0, [pc, #624]	@ (80027cc <tft_readGRAM+0x8b0>)
 800255a:	f7fe fa73 	bl	8000a44 <PIN_LOW>
 800255e:	2101      	movs	r1, #1
 8002560:	489a      	ldr	r0, [pc, #616]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002562:	f7fe fa6f 	bl	8000a44 <PIN_LOW>
 8002566:	4b99      	ldr	r3, [pc, #612]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b96      	ldr	r3, [pc, #600]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b92      	ldr	r3, [pc, #584]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b8d      	ldr	r3, [pc, #564]	@ (80027d0 <tft_readGRAM+0x8b4>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <tft_readGRAM+0x8b4>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b83      	ldr	r3, [pc, #524]	@ (80027cc <tft_readGRAM+0x8b0>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <tft_readGRAM+0x8b8>)
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b7a      	ldr	r3, [pc, #488]	@ (80027cc <tft_readGRAM+0x8b0>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	75fb      	strb	r3, [r7, #23]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4875      	ldr	r0, [pc, #468]	@ (80027cc <tft_readGRAM+0x8b0>)
 80025f6:	f7fe fa35 	bl	8000a64 <PIN_HIGH>
 80025fa:	2101      	movs	r1, #1
 80025fc:	4873      	ldr	r0, [pc, #460]	@ (80027cc <tft_readGRAM+0x8b0>)
 80025fe:	f7fe fa31 	bl	8000a64 <PIN_HIGH>
				READ_8(g);
 8002602:	2101      	movs	r1, #1
 8002604:	4871      	ldr	r0, [pc, #452]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002606:	f7fe fa2d 	bl	8000a64 <PIN_HIGH>
 800260a:	2101      	movs	r1, #1
 800260c:	486f      	ldr	r0, [pc, #444]	@ (80027cc <tft_readGRAM+0x8b0>)
 800260e:	f7fe fa19 	bl	8000a44 <PIN_LOW>
 8002612:	2101      	movs	r1, #1
 8002614:	486d      	ldr	r0, [pc, #436]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002616:	f7fe fa15 	bl	8000a44 <PIN_LOW>
 800261a:	2101      	movs	r1, #1
 800261c:	486b      	ldr	r0, [pc, #428]	@ (80027cc <tft_readGRAM+0x8b0>)
 800261e:	f7fe fa11 	bl	8000a44 <PIN_LOW>
 8002622:	2101      	movs	r1, #1
 8002624:	4869      	ldr	r0, [pc, #420]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002626:	f7fe fa0d 	bl	8000a44 <PIN_LOW>
 800262a:	2101      	movs	r1, #1
 800262c:	4867      	ldr	r0, [pc, #412]	@ (80027cc <tft_readGRAM+0x8b0>)
 800262e:	f7fe fa09 	bl	8000a44 <PIN_LOW>
 8002632:	2101      	movs	r1, #1
 8002634:	4865      	ldr	r0, [pc, #404]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002636:	f7fe fa05 	bl	8000a44 <PIN_LOW>
 800263a:	2101      	movs	r1, #1
 800263c:	4863      	ldr	r0, [pc, #396]	@ (80027cc <tft_readGRAM+0x8b0>)
 800263e:	f7fe fa01 	bl	8000a44 <PIN_LOW>
 8002642:	4b62      	ldr	r3, [pc, #392]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b5f      	ldr	r3, [pc, #380]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b5b      	ldr	r3, [pc, #364]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b56      	ldr	r3, [pc, #344]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b51      	ldr	r3, [pc, #324]	@ (80027d0 <tft_readGRAM+0x8b4>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b2da      	uxtb	r2, r3
 8002698:	4b4c      	ldr	r3, [pc, #304]	@ (80027cc <tft_readGRAM+0x8b0>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <tft_readGRAM+0x8b8>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	0a5b      	lsrs	r3, r3, #9
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	757b      	strb	r3, [r7, #21]
 80026ce:	2101      	movs	r1, #1
 80026d0:	483e      	ldr	r0, [pc, #248]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026d2:	f7fe f9c7 	bl	8000a64 <PIN_HIGH>
 80026d6:	2101      	movs	r1, #1
 80026d8:	483c      	ldr	r0, [pc, #240]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026da:	f7fe f9c3 	bl	8000a64 <PIN_HIGH>
				READ_8(b);
 80026de:	2101      	movs	r1, #1
 80026e0:	483a      	ldr	r0, [pc, #232]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026e2:	f7fe f9bf 	bl	8000a64 <PIN_HIGH>
 80026e6:	2101      	movs	r1, #1
 80026e8:	4838      	ldr	r0, [pc, #224]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026ea:	f7fe f9ab 	bl	8000a44 <PIN_LOW>
 80026ee:	2101      	movs	r1, #1
 80026f0:	4836      	ldr	r0, [pc, #216]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026f2:	f7fe f9a7 	bl	8000a44 <PIN_LOW>
 80026f6:	2101      	movs	r1, #1
 80026f8:	4834      	ldr	r0, [pc, #208]	@ (80027cc <tft_readGRAM+0x8b0>)
 80026fa:	f7fe f9a3 	bl	8000a44 <PIN_LOW>
 80026fe:	2101      	movs	r1, #1
 8002700:	4832      	ldr	r0, [pc, #200]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002702:	f7fe f99f 	bl	8000a44 <PIN_LOW>
 8002706:	2101      	movs	r1, #1
 8002708:	4830      	ldr	r0, [pc, #192]	@ (80027cc <tft_readGRAM+0x8b0>)
 800270a:	f7fe f99b 	bl	8000a44 <PIN_LOW>
 800270e:	2101      	movs	r1, #1
 8002710:	482e      	ldr	r0, [pc, #184]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002712:	f7fe f997 	bl	8000a44 <PIN_LOW>
 8002716:	2101      	movs	r1, #1
 8002718:	482c      	ldr	r0, [pc, #176]	@ (80027cc <tft_readGRAM+0x8b0>)
 800271a:	f7fe f993 	bl	8000a44 <PIN_LOW>
 800271e:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b28      	ldr	r3, [pc, #160]	@ (80027d0 <tft_readGRAM+0x8b4>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <tft_readGRAM+0x8b4>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <tft_readGRAM+0x8b0>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <tft_readGRAM+0x8b8>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <tft_readGRAM+0x8b0>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	0a5b      	lsrs	r3, r3, #9
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	753b      	strb	r3, [r7, #20]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4807      	ldr	r0, [pc, #28]	@ (80027cc <tft_readGRAM+0x8b0>)
 80027ae:	f7fe f959 	bl	8000a64 <PIN_HIGH>
 80027b2:	2101      	movs	r1, #1
 80027b4:	4805      	ldr	r0, [pc, #20]	@ (80027cc <tft_readGRAM+0x8b0>)
 80027b6:	f7fe f955 	bl	8000a64 <PIN_HIGH>
				if (_lcd_capable & READ_BGR)
 80027ba:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <tft_readGRAM+0x8ac>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d011      	beq.n	80027ea <tft_readGRAM+0x8ce>
 80027c6:	e007      	b.n	80027d8 <tft_readGRAM+0x8bc>
 80027c8:	200000d8 	.word	0x200000d8
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
					ret = tft_color565(b, g, r);
 80027d8:	7dfa      	ldrb	r2, [r7, #23]
 80027da:	7d79      	ldrb	r1, [r7, #21]
 80027dc:	7d3b      	ldrb	r3, [r7, #20]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fb4c 	bl	8001e7c <tft_color565>
 80027e4:	4603      	mov	r3, r0
 80027e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80027e8:	e113      	b.n	8002a12 <tft_readGRAM+0xaf6>
				else
					ret = tft_color565(r, g, b);
 80027ea:	7d3a      	ldrb	r2, [r7, #20]
 80027ec:	7d79      	ldrb	r1, [r7, #21]
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fb43 	bl	8001e7c <tft_color565>
 80027f6:	4603      	mov	r3, r0
 80027f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80027fa:	e10a      	b.n	8002a12 <tft_readGRAM+0xaf6>
			} else
			{
				READ_16(ret);
 80027fc:	2101      	movs	r1, #1
 80027fe:	4895      	ldr	r0, [pc, #596]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002800:	f7fe f930 	bl	8000a64 <PIN_HIGH>
 8002804:	2101      	movs	r1, #1
 8002806:	4893      	ldr	r0, [pc, #588]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002808:	f7fe f91c 	bl	8000a44 <PIN_LOW>
 800280c:	2101      	movs	r1, #1
 800280e:	4891      	ldr	r0, [pc, #580]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002810:	f7fe f918 	bl	8000a44 <PIN_LOW>
 8002814:	2101      	movs	r1, #1
 8002816:	488f      	ldr	r0, [pc, #572]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002818:	f7fe f914 	bl	8000a44 <PIN_LOW>
 800281c:	2101      	movs	r1, #1
 800281e:	488d      	ldr	r0, [pc, #564]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002820:	f7fe f910 	bl	8000a44 <PIN_LOW>
 8002824:	2101      	movs	r1, #1
 8002826:	488b      	ldr	r0, [pc, #556]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002828:	f7fe f90c 	bl	8000a44 <PIN_LOW>
 800282c:	2101      	movs	r1, #1
 800282e:	4889      	ldr	r0, [pc, #548]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002830:	f7fe f908 	bl	8000a44 <PIN_LOW>
 8002834:	2101      	movs	r1, #1
 8002836:	4887      	ldr	r0, [pc, #540]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002838:	f7fe f904 	bl	8000a44 <PIN_LOW>
 800283c:	4b85      	ldr	r3, [pc, #532]	@ (8002a54 <tft_readGRAM+0xb38>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b83      	ldr	r3, [pc, #524]	@ (8002a58 <tft_readGRAM+0xb3c>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a58 <tft_readGRAM+0xb3c>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	b2db      	uxtb	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b79      	ldr	r3, [pc, #484]	@ (8002a58 <tft_readGRAM+0xb3c>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b75      	ldr	r3, [pc, #468]	@ (8002a58 <tft_readGRAM+0xb3c>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b70      	ldr	r3, [pc, #448]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a5c <tft_readGRAM+0xb40>)
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b67      	ldr	r3, [pc, #412]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	75bb      	strb	r3, [r7, #22]
 80028c8:	2101      	movs	r1, #1
 80028ca:	4862      	ldr	r0, [pc, #392]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028cc:	f7fe f8ca 	bl	8000a64 <PIN_HIGH>
 80028d0:	2101      	movs	r1, #1
 80028d2:	4860      	ldr	r0, [pc, #384]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028d4:	f7fe f8c6 	bl	8000a64 <PIN_HIGH>
 80028d8:	2101      	movs	r1, #1
 80028da:	485e      	ldr	r0, [pc, #376]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028dc:	f7fe f8c2 	bl	8000a64 <PIN_HIGH>
 80028e0:	2101      	movs	r1, #1
 80028e2:	485c      	ldr	r0, [pc, #368]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028e4:	f7fe f8ae 	bl	8000a44 <PIN_LOW>
 80028e8:	2101      	movs	r1, #1
 80028ea:	485a      	ldr	r0, [pc, #360]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028ec:	f7fe f8aa 	bl	8000a44 <PIN_LOW>
 80028f0:	2101      	movs	r1, #1
 80028f2:	4858      	ldr	r0, [pc, #352]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028f4:	f7fe f8a6 	bl	8000a44 <PIN_LOW>
 80028f8:	2101      	movs	r1, #1
 80028fa:	4856      	ldr	r0, [pc, #344]	@ (8002a54 <tft_readGRAM+0xb38>)
 80028fc:	f7fe f8a2 	bl	8000a44 <PIN_LOW>
 8002900:	2101      	movs	r1, #1
 8002902:	4854      	ldr	r0, [pc, #336]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002904:	f7fe f89e 	bl	8000a44 <PIN_LOW>
 8002908:	2101      	movs	r1, #1
 800290a:	4852      	ldr	r0, [pc, #328]	@ (8002a54 <tft_readGRAM+0xb38>)
 800290c:	f7fe f89a 	bl	8000a44 <PIN_LOW>
 8002910:	2101      	movs	r1, #1
 8002912:	4850      	ldr	r0, [pc, #320]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002914:	f7fe f896 	bl	8000a44 <PIN_LOW>
 8002918:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <tft_readGRAM+0xb38>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	b29b      	uxth	r3, r3
 8002920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b4c      	ldr	r3, [pc, #304]	@ (8002a58 <tft_readGRAM+0xb3c>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	b29b      	uxth	r3, r3
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	b29b      	uxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <tft_readGRAM+0xb3c>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	b29b      	uxth	r3, r3
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	b29b      	uxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b42      	ldr	r3, [pc, #264]	@ (8002a58 <tft_readGRAM+0xb3c>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	b29b      	uxth	r3, r3
 800295a:	4313      	orrs	r3, r2
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a58 <tft_readGRAM+0xb3c>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b39      	ldr	r3, [pc, #228]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29b      	uxth	r3, r3
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	b29b      	uxth	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b29a      	uxth	r2, r3
 8002980:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <tft_readGRAM+0xb40>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	b29b      	uxth	r3, r3
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	b29b      	uxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b30      	ldr	r3, [pc, #192]	@ (8002a54 <tft_readGRAM+0xb38>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	b29b      	uxth	r3, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80029a4:	2101      	movs	r1, #1
 80029a6:	482b      	ldr	r0, [pc, #172]	@ (8002a54 <tft_readGRAM+0xb38>)
 80029a8:	f7fe f85c 	bl	8000a64 <PIN_HIGH>
 80029ac:	2101      	movs	r1, #1
 80029ae:	4829      	ldr	r0, [pc, #164]	@ (8002a54 <tft_readGRAM+0xb38>)
 80029b0:	f7fe f858 	bl	8000a64 <PIN_HIGH>
 80029b4:	7dbb      	ldrb	r3, [r7, #22]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029be:	4313      	orrs	r3, r2
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_LOWHIGH)
 80029c4:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <tft_readGRAM+0xb44>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <tft_readGRAM+0xac8>
					ret = (ret >> 8) | (ret << 8);
 80029d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_BGR)
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <tft_readGRAM+0xb44>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <tft_readGRAM+0xaf6>
					ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80029f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029fc:	0adb      	lsrs	r3, r3, #11
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a08:	02db      	lsls	r3, r3, #11
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
#if defined(SUPPORT_9488_555)
    		if (is555) ret = color555_to_565(ret);
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <tft_readGRAM+0xb48>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <tft_readGRAM+0xb0a>
 8002a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f897 	bl	8000b50 <color555_to_565>
 8002a22:	4603      	mov	r3, r0
 8002a24:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
*block++ = ret;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	60ba      	str	r2, [r7, #8]
 8002a2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a2e:	801a      	strh	r2, [r3, #0]
n--;
 8002a30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	847b      	strh	r3, [r7, #34]	@ 0x22
if (!(_lcd_capable & AUTO_READINC))
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <tft_readGRAM+0xb44>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <tft_readGRAM+0xb4c>
		while (n)
 8002a48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f ad63 	bne.w	8002518 <tft_readGRAM+0x5fc>
 8002a52:	e00a      	b.n	8002a6a <tft_readGRAM+0xb4e>
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	200000d8 	.word	0x200000d8
 8002a64:	200000ce 	.word	0x200000ce
	break;
 8002a68:	bf00      	nop
		}
		if (++col >= w) {
 8002a6a:	8bfb      	ldrh	r3, [r7, #30]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	83fb      	strh	r3, [r7, #30]
 8002a72:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	db0d      	blt.n	8002a9a <tft_readGRAM+0xb7e>
			col = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	83fb      	strh	r3, [r7, #30]
			if (++row >= h)
 8002a82:	8c3b      	ldrh	r3, [r7, #32]
 8002a84:	3301      	adds	r3, #1
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	843b      	strh	r3, [r7, #32]
 8002a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002a8e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002a92:	429a      	cmp	r2, r3
 8002a94:	db01      	blt.n	8002a9a <tft_readGRAM+0xb7e>
				row = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	843b      	strh	r3, [r7, #32]
		}
		RD_IDLE;
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4814      	ldr	r0, [pc, #80]	@ (8002af0 <tft_readGRAM+0xbd4>)
 8002a9e:	f7fd ffe1 	bl	8000a64 <PIN_HIGH>
		CS_IDLE;
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4813      	ldr	r0, [pc, #76]	@ (8002af4 <tft_readGRAM+0xbd8>)
 8002aa6:	f7fd ffdd 	bl	8000a64 <PIN_HIGH>
		setWriteDir();
 8002aaa:	f7fe f8e3 	bl	8000c74 <setWriteDir>
	while (n > 0) {
 8002aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f73f aa7e 	bgt.w	8001fb4 <tft_readGRAM+0x98>
	}
	if (!(_lcd_capable & MIPI_DCS_REV1))
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <tft_readGRAM+0xbdc>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d110      	bne.n	8002ae6 <tft_readGRAM+0xbca>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8002ac4:	f7fe f80c 	bl	8000ae0 <width>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21c      	sxth	r4, r3
 8002ad0:	f7fe f812 	bl	8000af8 <height>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	4622      	mov	r2, r4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fe ffd7 	bl	8001a94 <setAddrWindow>
	return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	372c      	adds	r7, #44	@ 0x2c
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	200000d8 	.word	0x200000d8

08002afc <tft_reset>:

void tft_reset(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	done_reset = 1;
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <tft_reset+0x88>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
	setWriteDir();
 8002b06:	f7fe f8b5 	bl	8000c74 <setWriteDir>
	CTL_INIT();
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	481e      	ldr	r0, [pc, #120]	@ (8002b88 <tft_reset+0x8c>)
 8002b0e:	f7fd ffcf 	bl	8000ab0 <PIN_OUTPUT>
 8002b12:	2102      	movs	r1, #2
 8002b14:	481c      	ldr	r0, [pc, #112]	@ (8002b88 <tft_reset+0x8c>)
 8002b16:	f7fd ffcb 	bl	8000ab0 <PIN_OUTPUT>
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	481a      	ldr	r0, [pc, #104]	@ (8002b88 <tft_reset+0x8c>)
 8002b1e:	f7fd ffc7 	bl	8000ab0 <PIN_OUTPUT>
 8002b22:	2101      	movs	r1, #1
 8002b24:	4819      	ldr	r0, [pc, #100]	@ (8002b8c <tft_reset+0x90>)
 8002b26:	f7fd ffc3 	bl	8000ab0 <PIN_OUTPUT>
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4818      	ldr	r0, [pc, #96]	@ (8002b90 <tft_reset+0x94>)
 8002b2e:	f7fd ffbf 	bl	8000ab0 <PIN_OUTPUT>
	CS_IDLE;
 8002b32:	2101      	movs	r1, #1
 8002b34:	4815      	ldr	r0, [pc, #84]	@ (8002b8c <tft_reset+0x90>)
 8002b36:	f7fd ff95 	bl	8000a64 <PIN_HIGH>
	RD_IDLE;
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4812      	ldr	r0, [pc, #72]	@ (8002b88 <tft_reset+0x8c>)
 8002b3e:	f7fd ff91 	bl	8000a64 <PIN_HIGH>
	WR_IDLE;
 8002b42:	2102      	movs	r1, #2
 8002b44:	4810      	ldr	r0, [pc, #64]	@ (8002b88 <tft_reset+0x8c>)
 8002b46:	f7fd ff8d 	bl	8000a64 <PIN_HIGH>
	RESET_IDLE;
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4810      	ldr	r0, [pc, #64]	@ (8002b90 <tft_reset+0x94>)
 8002b4e:	f7fd ff89 	bl	8000a64 <PIN_HIGH>
	delay(50);
 8002b52:	2032      	movs	r0, #50	@ 0x32
 8002b54:	f7ff f97a 	bl	8001e4c <delay>
	RESET_ACTIVE;
 8002b58:	2102      	movs	r1, #2
 8002b5a:	480d      	ldr	r0, [pc, #52]	@ (8002b90 <tft_reset+0x94>)
 8002b5c:	f7fd ff72 	bl	8000a44 <PIN_LOW>
	delay(100);
 8002b60:	2064      	movs	r0, #100	@ 0x64
 8002b62:	f7ff f973 	bl	8001e4c <delay>
	RESET_IDLE;
 8002b66:	2102      	movs	r1, #2
 8002b68:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <tft_reset+0x94>)
 8002b6a:	f7fd ff7b 	bl	8000a64 <PIN_HIGH>
	delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002b6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b72:	f7ff f96b 	bl	8001e4c <delay>
	tft_writeCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002b76:	2100      	movs	r1, #0
 8002b78:	20b0      	movs	r0, #176	@ 0xb0
 8002b7a:	f7ff f9bd 	bl	8001ef8 <tft_writeCmdData>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200000cc 	.word	0x200000cc
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800

08002b94 <tft_init>:

void tft_init(uint16_t ID)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
	int16_t *p16;               //so we can "write" to a const protected variable.
	const uint8_t *table8_ads = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
	int16_t table_size;
	_lcd_xor = 0;
 8002ba6:	4bd2      	ldr	r3, [pc, #840]	@ (8002ef0 <tft_init+0x35c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
	switch (_lcd_ID = ID) {
 8002bac:	4ad1      	ldr	r2, [pc, #836]	@ (8002ef4 <tft_init+0x360>)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	8013      	strh	r3, [r2, #0]
 8002bb2:	4bd0      	ldr	r3, [pc, #832]	@ (8002ef4 <tft_init+0x360>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f000 82c8 	beq.w	8003150 <tft_init+0x5bc>
 8002bc0:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	f300 8302 	bgt.w	80031ce <tft_init+0x63a>
 8002bca:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f000 82ee 	beq.w	80031b0 <tft_init+0x61c>
 8002bd4:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f300 82f8 	bgt.w	80031ce <tft_init+0x63a>
 8002bde:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f000 82b4 	beq.w	8003150 <tft_init+0x5bc>
 8002be8:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f300 82ee 	bgt.w	80031ce <tft_init+0x63a>
 8002bf2:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f000 8235 	beq.w	8003066 <tft_init+0x4d2>
 8002bfc:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8002c00:	4293      	cmp	r3, r2
 8002c02:	f300 82e4 	bgt.w	80031ce <tft_init+0x63a>
 8002c06:	f249 4288 	movw	r2, #38024	@ 0x9488
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f300 82df 	bgt.w	80031ce <tft_init+0x63a>
 8002c10:	f249 4287 	movw	r2, #38023	@ 0x9487
 8002c14:	4293      	cmp	r3, r2
 8002c16:	f280 8284 	bge.w	8003122 <tft_init+0x58e>
 8002c1a:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f000 8265 	beq.w	80030ee <tft_init+0x55a>
 8002c24:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f300 82d0 	bgt.w	80031ce <tft_init+0x63a>
 8002c2e:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f000 8244 	beq.w	80030c0 <tft_init+0x52c>
 8002c38:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	f300 82c6 	bgt.w	80031ce <tft_init+0x63a>
 8002c42:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f300 82c1 	bgt.w	80031ce <tft_init+0x63a>
 8002c4c:	f249 3202 	movw	r2, #37634	@ 0x9302
 8002c50:	4293      	cmp	r3, r2
 8002c52:	f280 80a5 	bge.w	8002da0 <tft_init+0x20c>
 8002c56:	f249 0290 	movw	r2, #37008	@ 0x9090
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f000 818b 	beq.w	8002f76 <tft_init+0x3e2>
 8002c60:	f249 0290 	movw	r2, #37008	@ 0x9090
 8002c64:	4293      	cmp	r3, r2
 8002c66:	f300 82b2 	bgt.w	80031ce <tft_init+0x63a>
 8002c6a:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f000 817c 	beq.w	8002f6c <tft_init+0x3d8>
 8002c74:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f300 82a8 	bgt.w	80031ce <tft_init+0x63a>
 8002c7e:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f000 8169 	beq.w	8002f5a <tft_init+0x3c6>
 8002c88:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	f300 829e 	bgt.w	80031ce <tft_init+0x63a>
 8002c92:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f000 823e 	beq.w	8003118 <tft_init+0x584>
 8002c9c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f300 8294 	bgt.w	80031ce <tft_init+0x63a>
 8002ca6:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f000 8280 	beq.w	80031b0 <tft_init+0x61c>
 8002cb0:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	f300 828a 	bgt.w	80031ce <tft_init+0x63a>
 8002cba:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f000 8142 	beq.w	8002f48 <tft_init+0x3b4>
 8002cc4:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	f300 8280 	bgt.w	80031ce <tft_init+0x63a>
 8002cce:	f646 0209 	movw	r2, #26633	@ 0x6809
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f000 8190 	beq.w	8002ff8 <tft_init+0x464>
 8002cd8:	f646 0209 	movw	r2, #26633	@ 0x6809
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f300 8276 	bgt.w	80031ce <tft_init+0x63a>
 8002ce2:	f245 4208 	movw	r2, #21512	@ 0x5408
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f000 8176 	beq.w	8002fd8 <tft_init+0x444>
 8002cec:	f245 4208 	movw	r2, #21512	@ 0x5408
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f300 826c 	bgt.w	80031ce <tft_init+0x63a>
 8002cf6:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f000 810f 	beq.w	8002f1e <tft_init+0x38a>
 8002d00:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f300 8262 	bgt.w	80031ce <tft_init+0x63a>
 8002d0a:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f000 81a4 	beq.w	800305c <tft_init+0x4c8>
 8002d14:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f300 8258 	bgt.w	80031ce <tft_init+0x63a>
 8002d1e:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f000 8191 	beq.w	800304a <tft_init+0x4b6>
 8002d28:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f300 824e 	bgt.w	80031ce <tft_init+0x63a>
 8002d32:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 81bd 	beq.w	80030b6 <tft_init+0x522>
 8002d3c:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002d40:	4293      	cmp	r3, r2
 8002d42:	f300 8244 	bgt.w	80031ce <tft_init+0x63a>
 8002d46:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f000 80de 	beq.w	8002f0c <tft_init+0x378>
 8002d50:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002d54:	4293      	cmp	r3, r2
 8002d56:	f300 823a 	bgt.w	80031ce <tft_init+0x63a>
 8002d5a:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002d5e:	f000 80bd 	beq.w	8002edc <tft_init+0x348>
 8002d62:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002d66:	f300 8232 	bgt.w	80031ce <tft_init+0x63a>
 8002d6a:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f000 80a0 	beq.w	8002eb4 <tft_init+0x320>
 8002d74:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f300 8228 	bgt.w	80031ce <tft_init+0x63a>
 8002d7e:	f241 5205 	movw	r2, #5381	@ 0x1505
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f000 812d 	beq.w	8002fe2 <tft_init+0x44e>
 8002d88:	f241 5205 	movw	r2, #5381	@ 0x1505
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	f300 821e 	bgt.w	80031ce <tft_init+0x63a>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f000 811b 	beq.w	8002fce <tft_init+0x43a>
 8002d98:	2b99      	cmp	r3, #153	@ 0x99
 8002d9a:	f000 8103 	beq.w	8002fa4 <tft_init+0x410>
 8002d9e:	e216      	b.n	80031ce <tft_init+0x63a>
 8002da0:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 8002da4:	3b02      	subs	r3, #2
 8002da6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002da8:	f200 8211 	bhi.w	80031ce <tft_init+0x63a>
 8002dac:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <tft_init+0x220>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08003071 	.word	0x08003071
 8002db8:	080031cf 	.word	0x080031cf
 8002dbc:	080031cf 	.word	0x080031cf
 8002dc0:	080031cf 	.word	0x080031cf
 8002dc4:	080031cf 	.word	0x080031cf
 8002dc8:	080031cf 	.word	0x080031cf
 8002dcc:	080031cf 	.word	0x080031cf
 8002dd0:	080031cf 	.word	0x080031cf
 8002dd4:	080031cf 	.word	0x080031cf
 8002dd8:	080031cf 	.word	0x080031cf
 8002ddc:	080031cf 	.word	0x080031cf
 8002de0:	080031cf 	.word	0x080031cf
 8002de4:	080031cf 	.word	0x080031cf
 8002de8:	080031cf 	.word	0x080031cf
 8002dec:	080031cf 	.word	0x080031cf
 8002df0:	080031cf 	.word	0x080031cf
 8002df4:	080031cf 	.word	0x080031cf
 8002df8:	080031cf 	.word	0x080031cf
 8002dfc:	080031cf 	.word	0x080031cf
 8002e00:	080031cf 	.word	0x080031cf
 8002e04:	080031cf 	.word	0x080031cf
 8002e08:	080031cf 	.word	0x080031cf
 8002e0c:	080031cf 	.word	0x080031cf
 8002e10:	080031cf 	.word	0x080031cf
 8002e14:	080031cf 	.word	0x080031cf
 8002e18:	080031cf 	.word	0x080031cf
 8002e1c:	080031cf 	.word	0x080031cf
 8002e20:	080031cf 	.word	0x080031cf
 8002e24:	080031cf 	.word	0x080031cf
 8002e28:	080031cf 	.word	0x080031cf
 8002e2c:	08002fe3 	.word	0x08002fe3
 8002e30:	080031cf 	.word	0x080031cf
 8002e34:	080031cf 	.word	0x080031cf
 8002e38:	080031cf 	.word	0x080031cf
 8002e3c:	080031cf 	.word	0x080031cf
 8002e40:	08003003 	.word	0x08003003
 8002e44:	080031cf 	.word	0x080031cf
 8002e48:	08003023 	.word	0x08003023
 8002e4c:	08003003 	.word	0x08003003
 8002e50:	08003085 	.word	0x08003085
 8002e54:	080031cf 	.word	0x080031cf
 8002e58:	080031cf 	.word	0x080031cf
 8002e5c:	080031cf 	.word	0x080031cf
 8002e60:	080031cf 	.word	0x080031cf
 8002e64:	080031cf 	.word	0x080031cf
 8002e68:	080031cf 	.word	0x080031cf
 8002e6c:	080031cf 	.word	0x080031cf
 8002e70:	0800300d 	.word	0x0800300d
 8002e74:	080031cf 	.word	0x080031cf
 8002e78:	080031cf 	.word	0x080031cf
 8002e7c:	080031cf 	.word	0x080031cf
 8002e80:	0800300d 	.word	0x0800300d
 8002e84:	080031cf 	.word	0x080031cf
 8002e88:	080031cf 	.word	0x080031cf
 8002e8c:	0800307b 	.word	0x0800307b
 8002e90:	080031cf 	.word	0x080031cf
 8002e94:	080031cf 	.word	0x080031cf
 8002e98:	080031cf 	.word	0x080031cf
 8002e9c:	080031cf 	.word	0x080031cf
 8002ea0:	080031cf 	.word	0x080031cf
 8002ea4:	080031cf 	.word	0x080031cf
 8002ea8:	080031cf 	.word	0x080031cf
 8002eac:	0800309b 	.word	0x0800309b
 8002eb0:	080030a5 	.word	0x080030a5
		init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
		break;
#endif

	case 0x1511:                // Unknown from Levy
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <tft_init+0x364>)
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61511_regValues[]  = {
				0xB0, 1, 0x00,       //Command Access Protect
		};
		table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <tft_init+0x368>)
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <tft_init+0x36c>)
 8002ec4:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002ecc:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <tft_init+0x370>)
 8002ed0:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ed8:	801a      	strh	r2, [r3, #0]
		break;
 8002eda:	e17e      	b.n	80031da <tft_init+0x646>

	case 0x1520:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <tft_init+0x364>)
 8002ede:	f240 4213 	movw	r2, #1043	@ 0x413
 8002ee2:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61520_regValues[]  = {
				0xB0, 1, 0x00,      //Command Access Protect
				0xC0, 1, 0x0A,      //DM=1, BGR=1
		};
		table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <tft_init+0x374>)
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	2306      	movs	r3, #6
 8002eea:	837b      	strh	r3, [r7, #26]
		break;
 8002eec:	e175      	b.n	80031da <tft_init+0x646>
 8002eee:	bf00      	nop
 8002ef0:	200000d6 	.word	0x200000d6
 8002ef4:	200000da 	.word	0x200000da
 8002ef8:	200000d8 	.word	0x200000d8
 8002efc:	08007b14 	.word	0x08007b14
 8002f00:	08000af9 	.word	0x08000af9
 8002f04:	08000ae1 	.word	0x08000ae1
 8002f08:	08007b18 	.word	0x08007b18

	case 0x1526:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002f0c:	4b95      	ldr	r3, [pc, #596]	@ (8003164 <tft_init+0x5d0>)
 8002f0e:	f240 4213 	movw	r2, #1043	@ 0x413
 8002f12:	801a      	strh	r2, [r3, #0]
				0xB0, 1, 0x03,      //Command Access
				0xE2, 1, 0x3F,      //Command Write Access
				0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
				0xE2, 1, 0x00,      //Command Write Protect
		};
		table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002f14:	4b94      	ldr	r3, [pc, #592]	@ (8003168 <tft_init+0x5d4>)
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	230c      	movs	r3, #12
 8002f1a:	837b      	strh	r3, [r7, #26]
		break;
 8002f1c:	e15d      	b.n	80031da <tft_init+0x646>
		init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
		break;
#endif

	case 0x5310:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002f1e:	4b91      	ldr	r3, [pc, #580]	@ (8003164 <tft_init+0x5d0>)
 8002f20:	f640 6213 	movw	r2, #3603	@ 0xe13
 8002f24:	801a      	strh	r2, [r3, #0]
		static const uint8_t NT35310_regValues[]  = {        //
				TFTLCD_DELAY8, 10,    //just some dummy
		};
		table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002f26:	4b91      	ldr	r3, [pc, #580]	@ (800316c <tft_init+0x5d8>)
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8002f2e:	4b90      	ldr	r3, [pc, #576]	@ (8003170 <tft_init+0x5dc>)
 8002f30:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002f38:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8002f3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003174 <tft_init+0x5e0>)
 8002f3c:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002f44:	801a      	strh	r2, [r3, #0]
		break;
 8002f46:	e148      	b.n	80031da <tft_init+0x646>
		init_table16(ST7781_regValues, sizeof(ST7781_regValues));
		break;
#endif

	case 0x7789:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002f48:	4b86      	ldr	r3, [pc, #536]	@ (8003164 <tft_init+0x5d0>)
 8002f4a:	f240 4213 	movw	r2, #1043	@ 0x413
 8002f4e:	801a      	strh	r2, [r3, #0]
				(0x55), 1, 0x90,    //WRCACE  [00]
				(0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
				(0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
				(0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
		};
		table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8002f50:	4b89      	ldr	r3, [pc, #548]	@ (8003178 <tft_init+0x5e4>)
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	2341      	movs	r3, #65	@ 0x41
 8002f56:	837b      	strh	r3, [r7, #26]
		break;
 8002f58:	e13f      	b.n	80031da <tft_init+0x646>

	case 0x8031:      //Unknown BangGood thanks PrinceCharles
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002f5a:	4b82      	ldr	r3, [pc, #520]	@ (8003164 <tft_init+0x5d0>)
 8002f5c:	f241 4213 	movw	r2, #5139	@ 0x1413
 8002f60:	801a      	strh	r2, [r3, #0]
		static const uint8_t FK8031_regValues[]  = {
				// 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
				0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
				0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
		};
		table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8002f62:	4b86      	ldr	r3, [pc, #536]	@ (800317c <tft_init+0x5e8>)
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	2312      	movs	r3, #18
 8002f68:	837b      	strh	r3, [r7, #26]
		break;
 8002f6a:	e136      	b.n	80031da <tft_init+0x646>
		//        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
		break;
#endif

	case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8002f6c:	4b7d      	ldr	r3, [pc, #500]	@ (8003164 <tft_init+0x5d0>)
 8002f6e:	f241 4203 	movw	r2, #5123	@ 0x1403
 8002f72:	801a      	strh	r2, [r3, #0]
		goto common_8357;
 8002f74:	e003      	b.n	8002f7e <tft_init+0x3ea>
	case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002f76:	4b7b      	ldr	r3, [pc, #492]	@ (8003164 <tft_init+0x5d0>)
 8002f78:	f241 4213 	movw	r2, #5139	@ 0x1413
 8002f7c:	801a      	strh	r2, [r3, #0]
		common_8357:
		dummy=1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
		static const uint8_t HX8357C_regValues[]  = {
				TFTLCD_DELAY8, 1,  //dummy table
		};
		table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8002f82:	4b7f      	ldr	r3, [pc, #508]	@ (8003180 <tft_init+0x5ec>)
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2302      	movs	r3, #2
 8002f88:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8002f8a:	4b79      	ldr	r3, [pc, #484]	@ (8003170 <tft_init+0x5dc>)
 8002f8c:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002f94:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8002f96:	4b77      	ldr	r3, [pc, #476]	@ (8003174 <tft_init+0x5e0>)
 8002f98:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002fa0:	801a      	strh	r2, [r3, #0]
		break;
 8002fa2:	e11a      	b.n	80031da <tft_init+0x646>

	case 0x0099:                //HX8357-D matches datasheet
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003164 <tft_init+0x5d0>)
 8002fa6:	f241 4213 	movw	r2, #5139	@ 0x1413
 8002faa:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
				// HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
				(0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
		};
		table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8002fac:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <tft_init+0x5f0>)
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	231d      	movs	r3, #29
 8002fb2:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003170 <tft_init+0x5dc>)
 8002fb6:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002fbe:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <tft_init+0x5e0>)
 8002fc2:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002fca:	801a      	strh	r2, [r3, #0]
		break;
 8002fcc:	e105      	b.n	80031da <tft_init+0x646>
		*p16 = 176;
		break;
#endif

	case 0x0001:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8002fce:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <tft_init+0x5d0>)
 8002fd0:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8002fd4:	801a      	strh	r2, [r3, #0]
		goto common_9320;
 8002fd6:	e008      	b.n	8002fea <tft_init+0x456>
	case 0x5408:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002fd8:	4b62      	ldr	r3, [pc, #392]	@ (8003164 <tft_init+0x5d0>)
 8002fda:	f241 0204 	movw	r2, #4100	@ 0x1004
 8002fde:	801a      	strh	r2, [r3, #0]
		//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
		goto common_9320;
 8002fe0:	e003      	b.n	8002fea <tft_init+0x456>
	case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
	case 0x9320:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8002fe2:	4b60      	ldr	r3, [pc, #384]	@ (8003164 <tft_init+0x5d0>)
 8002fe4:	f241 0204 	movw	r2, #4100	@ 0x1004
 8002fe8:	801a      	strh	r2, [r3, #0]
		common_9320:
		dummy=1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
				0x0098, 0x0000,
				//-----Display on-----------------------
				0x0007, 0x0173,
				TFTLCD_DELAY, 50,
		};
		init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8002fee:	21d8      	movs	r1, #216	@ 0xd8
 8002ff0:	4865      	ldr	r0, [pc, #404]	@ (8003188 <tft_init+0x5f4>)
 8002ff2:	f7fe fb0e 	bl	8001612 <init_table16>
		break;
 8002ff6:	e0f0      	b.n	80031da <tft_init+0x646>
	case 0x6809:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8003164 <tft_init+0x5d0>)
 8002ffa:	f241 1202 	movw	r2, #4354	@ 0x1102
 8002ffe:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 8003000:	e008      	b.n	8003014 <tft_init+0x480>
	case 0x9328:
	case 0x9325:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8003002:	4b58      	ldr	r3, [pc, #352]	@ (8003164 <tft_init+0x5d0>)
 8003004:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8003008:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 800300a:	e003      	b.n	8003014 <tft_init+0x480>
	case 0x9331:
	case 0x9335:
		_lcd_capable = 0 | REV_SCREEN;
 800300c:	4b55      	ldr	r3, [pc, #340]	@ (8003164 <tft_init+0x5d0>)
 800300e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003012:	801a      	strh	r2, [r3, #0]
		common_93x5:
		dummy=1;
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
				//-------------- Panel Control -------------------//
				0x0090, 0x0010,
				0x0092, 0x0000,
				0x0007, 0x0133,     // 262K color and display ON
		};
		init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003018:	21cc      	movs	r1, #204	@ 0xcc
 800301a:	485c      	ldr	r0, [pc, #368]	@ (800318c <tft_init+0x5f8>)
 800301c:	f7fe faf9 	bl	8001612 <init_table16>
		break;
 8003020:	e0db      	b.n	80031da <tft_init+0x646>
		*p16 = 240;
		break;
#endif

	case 0x9327:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003022:	4b50      	ldr	r3, [pc, #320]	@ (8003164 <tft_init+0x5d0>)
 8003024:	f240 4203 	movw	r2, #1027	@ 0x403
 8003028:	801a      	strh	r2, [r3, #0]
				//            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
				0xCA, 1, 0x00,      //DGC LUT ???
				0xEA, 1, 0x80,      //3-Gamma Function Enable
				//                     0xB0, 1, 0x03,      //Enable Protect
		};
		table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 800302a:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <tft_init+0x5fc>)
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	231e      	movs	r3, #30
 8003030:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003032:	4b4f      	ldr	r3, [pc, #316]	@ (8003170 <tft_init+0x5dc>)
 8003034:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800303c:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 800303e:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <tft_init+0x5e0>)
 8003040:	613b      	str	r3, [r7, #16]
		*p16 = 240;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	22f0      	movs	r2, #240	@ 0xf0
 8003046:	801a      	strh	r2, [r3, #0]
		break;
 8003048:	e0c7      	b.n	80031da <tft_init+0x646>
	case 0x1602:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not tft_readGRAM
 800304a:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <tft_init+0x5d0>)
 800304c:	f240 4203 	movw	r2, #1027	@ 0x403
 8003050:	801a      	strh	r2, [r3, #0]
		static const uint8_t XX1602_regValues[]  = {
				0xB8, 1, 0x01,      //GS [00]
				0xC0, 1, 0x0E,      //??Power [0A]
		};
		table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8003052:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <tft_init+0x600>)
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	2306      	movs	r3, #6
 8003058:	837b      	strh	r3, [r7, #26]
		break;
 800305a:	e0be      	b.n	80031da <tft_init+0x646>

	case 0x2053:    //weird from BangGood
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 800305c:	4b41      	ldr	r3, [pc, #260]	@ (8003164 <tft_init+0x5d0>)
 800305e:	f241 4217 	movw	r2, #5143	@ 0x1417
 8003062:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003064:	e012      	b.n	800308c <tft_init+0x4f8>
	case 0xAC11:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8003066:	4b3f      	ldr	r3, [pc, #252]	@ (8003164 <tft_init+0x5d0>)
 8003068:	f241 4213 	movw	r2, #5139	@ 0x1413
 800306c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800306e:	e00d      	b.n	800308c <tft_init+0x4f8>
	case 0x9302:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003070:	4b3c      	ldr	r3, [pc, #240]	@ (8003164 <tft_init+0x5d0>)
 8003072:	f240 4203 	movw	r2, #1027	@ 0x403
 8003076:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003078:	e008      	b.n	800308c <tft_init+0x4f8>
	case 0x9338:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800307a:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <tft_init+0x5d0>)
 800307c:	f240 4213 	movw	r2, #1043	@ 0x413
 8003080:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003082:	e003      	b.n	800308c <tft_init+0x4f8>
	case 0x9329:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003084:	4b37      	ldr	r3, [pc, #220]	@ (8003164 <tft_init+0x5d0>)
 8003086:	f241 6203 	movw	r2, #5635	@ 0x1603
 800308a:	801a      	strh	r2, [r3, #0]
		common_9329:
		dummy=1;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
				//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
				//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
				//            0xB7, 1, 0x06,      //Entry Mode Set [06]
				0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
		};
		table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003090:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <tft_init+0x604>)
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	2303      	movs	r3, #3
 8003096:	837b      	strh	r3, [r7, #26]
		break;
 8003098:	e09f      	b.n	80031da <tft_init+0x646>

	case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800309a:	4b32      	ldr	r3, [pc, #200]	@ (8003164 <tft_init+0x5d0>)
 800309c:	f241 4213 	movw	r2, #5139	@ 0x1413
 80030a0:	801a      	strh	r2, [r3, #0]
		goto common_9341;
 80030a2:	bf00      	nop
	case 0x9341:
		common_9341:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80030a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <tft_init+0x5d0>)
 80030a6:	f240 4213 	movw	r2, #1043	@ 0x413
 80030aa:	801a      	strh	r2, [r3, #0]
			0xC7, 1, 0xC0,      //VCOM 2 [C0]
			0x36, 1, 0x88,      //Memory Access [00]
			0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
			0xB7, 1, 0x07,      //Entry Mode [00]
	};
	table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80030ac:	4b3b      	ldr	r3, [pc, #236]	@ (800319c <tft_init+0x608>)
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	2365      	movs	r3, #101	@ 0x65
 80030b2:	837b      	strh	r3, [r7, #26]
	break;
 80030b4:	e091      	b.n	80031da <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 320;
		break;
#endif
	case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80030b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <tft_init+0x5d0>)
 80030b8:	f240 4213 	movw	r2, #1043	@ 0x413
 80030bc:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80030be:	e003      	b.n	80030c8 <tft_init+0x534>
	case 0x9481:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80030c0:	4b28      	ldr	r3, [pc, #160]	@ (8003164 <tft_init+0x5d0>)
 80030c2:	f240 4207 	movw	r2, #1031	@ 0x407
 80030c6:	801a      	strh	r2, [r3, #0]
		common_9481:
		dummy=1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
				0x0C, 2, 0x00, 0x55, //RDCOLMOD
				0xB4, 1, 0x00,      //SETDISPLAY
				//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
				0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
		};
		table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80030cc:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <tft_init+0x60c>)
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	2345      	movs	r3, #69	@ 0x45
 80030d2:	837b      	strh	r3, [r7, #26]
		//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
		//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
		//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
		//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
		//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
		p16 = (int16_t *) & height;
 80030d4:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <tft_init+0x5dc>)
 80030d6:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80030de:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80030e0:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <tft_init+0x5e0>)
 80030e2:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80030ea:	801a      	strh	r2, [r3, #0]
		break;
 80030ec:	e075      	b.n	80031da <tft_init+0x646>
	case 0x9486:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80030ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <tft_init+0x5d0>)
 80030f0:	f240 4203 	movw	r2, #1027	@ 0x403
 80030f4:	801a      	strh	r2, [r3, #0]
				// 4.2 WTK 3.5 Inch Initial Code too white
				0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
				0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
		};
		table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80030f6:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <tft_init+0x610>)
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	233b      	movs	r3, #59	@ 0x3b
 80030fc:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <tft_init+0x5dc>)
 8003100:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003108:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <tft_init+0x5e0>)
 800310c:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003114:	801a      	strh	r2, [r3, #0]
		break;
 8003116:	e060      	b.n	80031da <tft_init+0x646>
	case 0x7796:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003118:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <tft_init+0x5d0>)
 800311a:	f240 4203 	movw	r2, #1027	@ 0x403
 800311e:	801a      	strh	r2, [r3, #0]
		goto common_9488;
 8003120:	e003      	b.n	800312a <tft_init+0x596>
	case 0x9487:                //with thanks to Charlyf
	case 0x9488:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <tft_init+0x5d0>)
 8003124:	f240 4213 	movw	r2, #1043	@ 0x413
 8003128:	801a      	strh	r2, [r3, #0]
		common_9488:
		dummy=1;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
				0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
				0xB7, 1, 0xC6,      //Entry Mode      [06]
				0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
				0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
		};
		table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <tft_init+0x614>)
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	232b      	movs	r3, #43	@ 0x2b
 8003134:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <tft_init+0x5dc>)
 8003138:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003140:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003142:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <tft_init+0x5e0>)
 8003144:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800314c:	801a      	strh	r2, [r3, #0]
		break;
 800314e:	e044      	b.n	80031da <tft_init+0x646>
	case 0xB505:                //R61505V
	case 0xC505:                //R61505W
		_lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003150:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <tft_init+0x5d0>)
 8003152:	f241 0208 	movw	r2, #4104	@ 0x1008
 8003156:	801a      	strh	r2, [r3, #0]
				0x0092, 0x0100,
				0x0093, 0x0701,
				TFTLCD_DELAY, 80,
				0x0007, 0x0100,     //BASEE=1--Display On
		};
		init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003158:	21b0      	movs	r1, #176	@ 0xb0
 800315a:	4814      	ldr	r0, [pc, #80]	@ (80031ac <tft_init+0x618>)
 800315c:	f7fe fa59 	bl	8001612 <init_table16>
		break;
 8003160:	e03b      	b.n	80031da <tft_init+0x646>
 8003162:	bf00      	nop
 8003164:	200000d8 	.word	0x200000d8
 8003168:	08007b20 	.word	0x08007b20
 800316c:	08007b2c 	.word	0x08007b2c
 8003170:	08000af9 	.word	0x08000af9
 8003174:	08000ae1 	.word	0x08000ae1
 8003178:	08007b30 	.word	0x08007b30
 800317c:	08007b74 	.word	0x08007b74
 8003180:	08007b88 	.word	0x08007b88
 8003184:	08007b8c 	.word	0x08007b8c
 8003188:	08007bac 	.word	0x08007bac
 800318c:	08007c84 	.word	0x08007c84
 8003190:	08007d50 	.word	0x08007d50
 8003194:	08007d70 	.word	0x08007d70
 8003198:	08007d78 	.word	0x08007d78
 800319c:	08007d7c 	.word	0x08007d7c
 80031a0:	08007de4 	.word	0x08007de4
 80031a4:	08007e2c 	.word	0x08007e2c
 80031a8:	08007e68 	.word	0x08007e68
 80031ac:	08007e94 	.word	0x08007e94

#if defined(SUPPORT_B509_7793)
	case 0x7793:
	case 0xB509:
		_lcd_capable = REV_SCREEN;
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <tft_init+0x6ec>)
 80031b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031b6:	801a      	strh	r2, [r3, #0]
				TFTLCD_DELAY, 50,

				0x0200, 0x0000,
				0x0201, 0x0000,
		};
		init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80031b8:	21c0      	movs	r1, #192	@ 0xc0
 80031ba:	4832      	ldr	r0, [pc, #200]	@ (8003284 <tft_init+0x6f0>)
 80031bc:	f7fe fa29 	bl	8001612 <init_table16>
		p16 = (int16_t *) & height;
 80031c0:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <tft_init+0x6f4>)
 80031c2:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80031ca:	801a      	strh	r2, [r3, #0]
		break;
 80031cc:	e005      	b.n	80031da <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 854;
		break;
#endif
	default:
		p16 = (int16_t *) & width;
 80031ce:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <tft_init+0x6f8>)
 80031d0:	613b      	str	r3, [r7, #16]
		*p16 = 0;       //error value for width
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2200      	movs	r2, #0
 80031d6:	801a      	strh	r2, [r3, #0]
		break;
 80031d8:	bf00      	nop
	}
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80031da:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <tft_init+0x6ec>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <tft_init+0x6fc>)
 80031f0:	801a      	strh	r2, [r3, #0]
	if (table8_ads != NULL) {
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <tft_init+0x680>
		static const uint8_t wake_on[]  = {
				0x11, 0,            //Sleep Out
				TFTLCD_DELAY8, 150,
				0x29, 0,            //Display On
		};
		init_table(&reset_off, sizeof(reset_off));
 80031f8:	2109      	movs	r1, #9
 80031fa:	4826      	ldr	r0, [pc, #152]	@ (8003294 <tft_init+0x700>)
 80031fc:	f7fe f9b0 	bl	8001560 <init_table>
		init_table(table8_ads, table_size);   //can change PIXFMT
 8003200:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003204:	4619      	mov	r1, r3
 8003206:	69f8      	ldr	r0, [r7, #28]
 8003208:	f7fe f9aa 	bl	8001560 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800320c:	2106      	movs	r1, #6
 800320e:	4822      	ldr	r0, [pc, #136]	@ (8003298 <tft_init+0x704>)
 8003210:	f7fe f9a6 	bl	8001560 <init_table>
	}
	tft_setRotation(0);             //PORTRAIT
 8003214:	2000      	movs	r0, #0
 8003216:	f000 f985 	bl	8003524 <tft_setRotation>
	tft_invertDisplay(false);
 800321a:	2000      	movs	r0, #0
 800321c:	f000 fe42 	bl	8003ea4 <tft_invertDisplay>
#if defined(SUPPORT_9488_555)
	if (_lcd_ID == 0x9488) {
 8003220:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <tft_init+0x708>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f249 4288 	movw	r2, #38024	@ 0x9488
 8003228:	4293      	cmp	r3, r2
 800322a:	d125      	bne.n	8003278 <tft_init+0x6e4>
		is555 = 0;
 800322c:	4b1c      	ldr	r3, [pc, #112]	@ (80032a0 <tft_init+0x70c>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
		tft_drawPixel(0, 0, 0xFFE0);
 8003232:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8003236:	2100      	movs	r1, #0
 8003238:	2000      	movs	r0, #0
 800323a:	f000 fc07 	bl	8003a4c <tft_drawPixel>
		if (tft_readPixel(0, 0) == 0xFF1F) {
 800323e:	2100      	movs	r1, #0
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fe41 	bl	8001ec8 <tft_readPixel>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 800324e:	429a      	cmp	r2, r3
 8003250:	d112      	bne.n	8003278 <tft_init+0x6e4>
			uint8_t pixfmt = 0x06;
 8003252:	2306      	movs	r3, #6
 8003254:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003256:	f107 030f 	add.w	r3, r7, #15
 800325a:	2201      	movs	r2, #1
 800325c:	4619      	mov	r1, r3
 800325e:	203a      	movs	r0, #58	@ 0x3a
 8003260:	f7fd fcc7 	bl	8000bf2 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003264:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <tft_init+0x6ec>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	b29a      	uxth	r2, r3
 800326e:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <tft_init+0x6ec>)
 8003270:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <tft_init+0x70c>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003278:	bf00      	nop
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200000d8 	.word	0x200000d8
 8003284:	08007f44 	.word	0x08007f44
 8003288:	08000af9 	.word	0x08000af9
 800328c:	08000ae1 	.word	0x08000ae1
 8003290:	200000dc 	.word	0x200000dc
 8003294:	08008004 	.word	0x08008004
 8003298:	08008010 	.word	0x08008010
 800329c:	200000da 	.word	0x200000da
 80032a0:	200000ce 	.word	0x200000ce

080032a4 <tft_readID>:

uint16_t tft_readID(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
	uint16_t ret, ret2;
	uint8_t msb;
	ret = readReg(0,0);           //forces a reset() if called before begin()
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fe fad3 	bl	8001858 <readReg>
 80032b2:	4603      	mov	r3, r0
 80032b4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	f245 4208 	movw	r2, #21512	@ 0x5408
 80032bc:	4293      	cmp	r3, r2
 80032be:	d102      	bne.n	80032c6 <tft_readID+0x22>
		return 0x5408;
 80032c0:	f245 4308 	movw	r3, #21512	@ 0x5408
 80032c4:	e128      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80032c6:	89fb      	ldrh	r3, [r7, #14]
 80032c8:	f245 4220 	movw	r2, #21536	@ 0x5420
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d102      	bne.n	80032d6 <tft_readID+0x32>
		return 0x5420;
 80032d0:	f245 4320 	movw	r3, #21536	@ 0x5420
 80032d4:	e120      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x8989)          //SSD1289 is always 8989
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	f648 1289 	movw	r2, #35209	@ 0x8989
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <tft_readID+0x42>
		return 0x1289;
 80032e0:	f241 2389 	movw	r3, #4745	@ 0x1289
 80032e4:	e118      	b.n	8003518 <tft_readID+0x274>
	ret = readReg(0x67,0);        //HX8347-A
 80032e6:	2100      	movs	r1, #0
 80032e8:	2067      	movs	r0, #103	@ 0x67
 80032ea:	f7fe fab5 	bl	8001858 <readReg>
 80032ee:	4603      	mov	r3, r0
 80032f0:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x4747)
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	f244 7247 	movw	r2, #18247	@ 0x4747
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <tft_readID+0x5e>
		return 0x8347;
 80032fc:	f248 3347 	movw	r3, #33607	@ 0x8347
 8003300:	e10a      	b.n	8003518 <tft_readID+0x274>
	//#if defined(SUPPORT_1963) && USING_16BIT_BUS
	ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8003302:	20a1      	movs	r0, #161	@ 0xa1
 8003304:	f7fe fb84 	bl	8001a10 <readReg32>
 8003308:	4603      	mov	r3, r0
 800330a:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x6101)
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	f246 1201 	movw	r2, #24833	@ 0x6101
 8003312:	4293      	cmp	r3, r2
 8003314:	d102      	bne.n	800331c <tft_readID+0x78>
		return 0x1963;
 8003316:	f641 1363 	movw	r3, #6499	@ 0x1963
 800331a:	e0fd      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003322:	4293      	cmp	r3, r2
 8003324:	d102      	bne.n	800332c <tft_readID+0x88>
		return 0x1526;          //subsequent begin() enables Command Access
 8003326:	f241 5326 	movw	r3, #5414	@ 0x1526
 800332a:	e0f5      	b.n	8003518 <tft_readID+0x274>
	//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
	//        return 0x1520;          //subsequent begin() enables Command Access
	//#endif
	ret = readReg40(0xBF);
 800332c:	20bf      	movs	r0, #191	@ 0xbf
 800332e:	f7fe fb8a 	bl	8001a46 <readReg40>
 8003332:	4603      	mov	r3, r0
 8003334:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	f248 3257 	movw	r2, #33623	@ 0x8357
 800333c:	4293      	cmp	r3, r2
 800333e:	d102      	bne.n	8003346 <tft_readID+0xa2>
		return 0x8357;
 8003340:	f248 3357 	movw	r3, #33623	@ 0x8357
 8003344:	e0e8      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003346:	89fb      	ldrh	r3, [r7, #14]
 8003348:	f249 4281 	movw	r2, #38017	@ 0x9481
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <tft_readID+0xb2>
		return 0x9481;
 8003350:	f249 4381 	movw	r3, #38017	@ 0x9481
 8003354:	e0e0      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003356:	89fb      	ldrh	r3, [r7, #14]
 8003358:	f241 5211 	movw	r2, #5393	@ 0x1511
 800335c:	4293      	cmp	r3, r2
 800335e:	d102      	bne.n	8003366 <tft_readID+0xc2>
		return 0x1511;
 8003360:	f241 5311 	movw	r3, #5393	@ 0x1511
 8003364:	e0d8      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003366:	89fb      	ldrh	r3, [r7, #14]
 8003368:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 800336c:	d102      	bne.n	8003374 <tft_readID+0xd0>
		return 0x1520;
 800336e:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8003372:	e0d1      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	f241 5226 	movw	r2, #5414	@ 0x1526
 800337a:	4293      	cmp	r3, r2
 800337c:	d102      	bne.n	8003384 <tft_readID+0xe0>
		return 0x1526;
 800337e:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003382:	e0c9      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	f241 5281 	movw	r2, #5505	@ 0x1581
 800338a:	4293      	cmp	r3, r2
 800338c:	d102      	bne.n	8003394 <tft_readID+0xf0>
		return 0x1581;
 800338e:	f241 5381 	movw	r3, #5505	@ 0x1581
 8003392:	e0c1      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003394:	89fb      	ldrh	r3, [r7, #14]
 8003396:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800339a:	d102      	bne.n	80033a2 <tft_readID+0xfe>
		return 0x6814;
 800339c:	f646 0314 	movw	r3, #26644	@ 0x6814
 80033a0:	e0ba      	b.n	8003518 <tft_readID+0x274>
	ret = readReg32(0xD4);
 80033a2:	20d4      	movs	r0, #212	@ 0xd4
 80033a4:	f7fe fb34 	bl	8001a10 <readReg32>
 80033a8:	4603      	mov	r3, r0
 80033aa:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	f245 3210 	movw	r2, #21264	@ 0x5310
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d102      	bne.n	80033bc <tft_readID+0x118>
		return 0x5310;
 80033b6:	f245 3310 	movw	r3, #21264	@ 0x5310
 80033ba:	e0ad      	b.n	8003518 <tft_readID+0x274>
	ret = readReg32(0xD7);
 80033bc:	20d7      	movs	r0, #215	@ 0xd7
 80033be:	f7fe fb27 	bl	8001a10 <readReg32>
 80033c2:	4603      	mov	r3, r0
 80033c4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	f248 0231 	movw	r2, #32817	@ 0x8031
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <tft_readID+0x132>
		return 0x8031;
 80033d0:	f248 0331 	movw	r3, #32817	@ 0x8031
 80033d4:	e0a0      	b.n	8003518 <tft_readID+0x274>
	ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80033d6:	20ef      	movs	r0, #239	@ 0xef
 80033d8:	f7fe fb35 	bl	8001a46 <readReg40>
 80033dc:	4603      	mov	r3, r0
 80033de:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9327)
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	f249 3227 	movw	r2, #37671	@ 0x9327
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d102      	bne.n	80033f0 <tft_readID+0x14c>
		return 0x9327;
 80033ea:	f249 3327 	movw	r3, #37671	@ 0x9327
 80033ee:	e093      	b.n	8003518 <tft_readID+0x274>
	ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80033f0:	20fe      	movs	r0, #254	@ 0xfe
 80033f2:	f7fe fb0d 	bl	8001a10 <readReg32>
 80033f6:	4603      	mov	r3, r0
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x2053)
 80033fc:	89fb      	ldrh	r3, [r7, #14]
 80033fe:	f242 0253 	movw	r2, #8275	@ 0x2053
 8003402:	4293      	cmp	r3, r2
 8003404:	d102      	bne.n	800340c <tft_readID+0x168>
		return 0x2053;
 8003406:	f242 0353 	movw	r3, #8275	@ 0x2053
 800340a:	e085      	b.n	8003518 <tft_readID+0x274>
	uint32_t ret32 = readReg32(0x04);
 800340c:	2004      	movs	r0, #4
 800340e:	f7fe faff 	bl	8001a10 <readReg32>
 8003412:	60b8      	str	r0, [r7, #8]
	msb = ret32 >> 16;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	71fb      	strb	r3, [r7, #7]
	ret = ret32;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	81fb      	strh	r3, [r7, #14]
	//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
	if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d122      	bne.n	800346a <tft_readID+0x1c6>
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342a:	d11e      	bne.n	800346a <tft_readID+0x1c6>
#if 1
		uint8_t cmds[] = {0xFF, 0x83, 0x57};
 800342c:	4a3c      	ldr	r2, [pc, #240]	@ (8003520 <tft_readID+0x27c>)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4611      	mov	r1, r2
 8003434:	8019      	strh	r1, [r3, #0]
 8003436:	3302      	adds	r3, #2
 8003438:	0c12      	lsrs	r2, r2, #16
 800343a:	701a      	strb	r2, [r3, #0]
		pushCommand(0xB9, cmds, 3);
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2203      	movs	r2, #3
 8003440:	4619      	mov	r1, r3
 8003442:	20b9      	movs	r0, #185	@ 0xb9
 8003444:	f7fd fbd5 	bl	8000bf2 <pushCommand>
		msb = readReg(0xD0,0);
 8003448:	2100      	movs	r1, #0
 800344a:	20d0      	movs	r0, #208	@ 0xd0
 800344c:	f7fe fa04 	bl	8001858 <readReg>
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
		if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	2b99      	cmp	r3, #153	@ 0x99
 8003458:	d101      	bne.n	800345e <tft_readID+0x1ba>
 800345a:	2399      	movs	r3, #153	@ 0x99
 800345c:	e05c      	b.n	8003518 <tft_readID+0x274>
		if (msb == 0x90)        //HX8357-C undocumented
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	2b90      	cmp	r3, #144	@ 0x90
 8003462:	d102      	bne.n	800346a <tft_readID+0x1c6>
#endif
			return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003464:	f249 0390 	movw	r3, #37008	@ 0x9090
 8003468:	e056      	b.n	8003518 <tft_readID+0x274>
	}
	//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
	//        return 0x1526;          //subsequent begin() enables Command Access
	if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <tft_readID+0x1d6>
		return 0x1526;          //subsequent begin() enables Command Access
 8003474:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003478:	e04e      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <tft_readID+0x1e6>
		return 0x7735;
 8003484:	f247 7335 	movw	r3, #30517	@ 0x7735
 8003488:	e046      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	f248 5252 	movw	r2, #34130	@ 0x8552
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <tft_readID+0x1f6>
		return 0x7789;
 8003494:	f247 7389 	movw	r3, #30601	@ 0x7789
 8003498:	e03e      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800349a:	89fb      	ldrh	r3, [r7, #14]
 800349c:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <tft_readID+0x206>
		return 0xAC11;
 80034a4:	f64a 4311 	movw	r3, #44049	@ 0xac11
 80034a8:	e036      	b.n	8003518 <tft_readID+0x274>
	ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80034aa:	20d3      	movs	r0, #211	@ 0xd3
 80034ac:	f7fe fab0 	bl	8001a10 <readReg32>
 80034b0:	60b8      	str	r0, [r7, #8]
	ret = ret32 >> 8;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9163) return ret;
 80034b8:	89fb      	ldrh	r3, [r7, #14]
 80034ba:	f249 1263 	movw	r2, #37219	@ 0x9163
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <tft_readID+0x222>
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	e028      	b.n	8003518 <tft_readID+0x274>
	ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80034c6:	20d3      	movs	r0, #211	@ 0xd3
 80034c8:	f7fe faa2 	bl	8001a10 <readReg32>
 80034cc:	4603      	mov	r3, r0
 80034ce:	81fb      	strh	r3, [r7, #14]
	msb = ret >> 8;
 80034d0:	89fb      	ldrh	r3, [r7, #14]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	71fb      	strb	r3, [r7, #7]
	if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b93      	cmp	r3, #147	@ 0x93
 80034dc:	d00b      	beq.n	80034f6 <tft_readID+0x252>
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b94      	cmp	r3, #148	@ 0x94
 80034e2:	d008      	beq.n	80034f6 <tft_readID+0x252>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2b98      	cmp	r3, #152	@ 0x98
 80034e8:	d005      	beq.n	80034f6 <tft_readID+0x252>
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2b77      	cmp	r3, #119	@ 0x77
 80034ee:	d002      	beq.n	80034f6 <tft_readID+0x252>
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2b16      	cmp	r3, #22
 80034f4:	d101      	bne.n	80034fa <tft_readID+0x256>
		return ret;             //0x9488, 9486, 9340, 9341, 7796
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	e00e      	b.n	8003518 <tft_readID+0x274>
	if (ret == 0x00D3 || ret == 0xD3D3)
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	2bd3      	cmp	r3, #211	@ 0xd3
 80034fe:	d004      	beq.n	800350a <tft_readID+0x266>
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <tft_readID+0x26a>
		return ret;             //16-bit write-only bus
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	e004      	b.n	8003518 <tft_readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
	 */
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800350e:	2100      	movs	r1, #0
 8003510:	2000      	movs	r0, #0
 8003512:	f7fe f9a1 	bl	8001858 <readReg>
 8003516:	4603      	mov	r3, r0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	08007130 	.word	0x08007130

08003524 <tft_setRotation>:

void tft_setRotation(uint8_t r)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800352e:	4b9c      	ldr	r3, [pc, #624]	@ (80037a0 <tft_setRotation+0x27c>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	827b      	strh	r3, [r7, #18]
	uint8_t val, d[3];
	rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b99      	ldr	r3, [pc, #612]	@ (80037a4 <tft_setRotation+0x280>)
 800353e:	701a      	strb	r2, [r3, #0]
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 8003540:	4b98      	ldr	r3, [pc, #608]	@ (80037a4 <tft_setRotation+0x280>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <tft_setRotation+0x2e>
 800354c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003550:	e000      	b.n	8003554 <tft_setRotation+0x30>
 8003552:	22f0      	movs	r2, #240	@ 0xf0
 8003554:	4b94      	ldr	r3, [pc, #592]	@ (80037a8 <tft_setRotation+0x284>)
 8003556:	801a      	strh	r2, [r3, #0]
	_height = (rotation & 1) ? WIDTH : HEIGHT;
 8003558:	4b92      	ldr	r3, [pc, #584]	@ (80037a4 <tft_setRotation+0x280>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <tft_setRotation+0x44>
 8003564:	22f0      	movs	r2, #240	@ 0xf0
 8003566:	e001      	b.n	800356c <tft_setRotation+0x48>
 8003568:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800356c:	4b8f      	ldr	r3, [pc, #572]	@ (80037ac <tft_setRotation+0x288>)
 800356e:	801a      	strh	r2, [r3, #0]
	switch (rotation) {
 8003570:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <tft_setRotation+0x280>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d817      	bhi.n	80035a8 <tft_setRotation+0x84>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <tft_setRotation+0x5c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003591 	.word	0x08003591
 8003584:	08003597 	.word	0x08003597
 8003588:	0800359d 	.word	0x0800359d
 800358c:	080035a3 	.word	0x080035a3
	case 0:                    //PORTRAIT:
		val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8003590:	2348      	movs	r3, #72	@ 0x48
 8003592:	72fb      	strb	r3, [r7, #11]
		break;
 8003594:	e008      	b.n	80035a8 <tft_setRotation+0x84>
	case 1:                    //LANDSCAPE: 90 degrees
		val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8003596:	2328      	movs	r3, #40	@ 0x28
 8003598:	72fb      	strb	r3, [r7, #11]
		break;
 800359a:	e005      	b.n	80035a8 <tft_setRotation+0x84>
	case 2:                    //PORTRAIT_REV: 180 degrees
		val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 800359c:	2398      	movs	r3, #152	@ 0x98
 800359e:	72fb      	strb	r3, [r7, #11]
		break;
 80035a0:	e002      	b.n	80035a8 <tft_setRotation+0x84>
	case 3:                    //LANDSCAPE_REV: 270 degrees
		val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80035a2:	23f8      	movs	r3, #248	@ 0xf8
 80035a4:	72fb      	strb	r3, [r7, #11]
		break;
 80035a6:	bf00      	nop
	}
	if (_lcd_capable & INVERT_GS)
 80035a8:	4b81      	ldr	r3, [pc, #516]	@ (80037b0 <tft_setRotation+0x28c>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <tft_setRotation+0x9c>
		val ^= 0x80;
 80035b4:	7afb      	ldrb	r3, [r7, #11]
 80035b6:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80035ba:	43db      	mvns	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_SS)
 80035c0:	4b7b      	ldr	r3, [pc, #492]	@ (80037b0 <tft_setRotation+0x28c>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <tft_setRotation+0xb2>
		val ^= 0x40;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_RGB)
 80035d6:	4b76      	ldr	r3, [pc, #472]	@ (80037b0 <tft_setRotation+0x28c>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <tft_setRotation+0xc8>
		val ^= 0x08;
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f083 0308 	eor.w	r3, r3, #8
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & MIPI_DCS_REV1) {
 80035ec:	4b70      	ldr	r3, [pc, #448]	@ (80037b0 <tft_setRotation+0x28c>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8119 	beq.w	800382c <tft_setRotation+0x308>
		if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80035fa:	4b6e      	ldr	r3, [pc, #440]	@ (80037b4 <tft_setRotation+0x290>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	f646 0214 	movw	r2, #26644	@ 0x6814
 8003602:	4293      	cmp	r3, r2
 8003604:	d128      	bne.n	8003658 <tft_setRotation+0x134>
			GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	b25b      	sxtb	r3, r3
 800360a:	105b      	asrs	r3, r3, #1
 800360c:	b25b      	sxtb	r3, r3
 800360e:	b29b      	uxth	r3, r3
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	823b      	strh	r3, [r7, #16]
			SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	105b      	asrs	r3, r3, #1
 800361a:	b29b      	uxth	r3, r3
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	81fb      	strh	r3, [r7, #14]
			val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8003622:	7afb      	ldrb	r3, [r7, #11]
 8003624:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003628:	b2db      	uxtb	r3, r3
 800362a:	72fb      	strb	r3, [r7, #11]
			d[0] = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	723b      	strb	r3, [r7, #8]
			d[1] = GS | SS_v | 0x02;      //MY, MX
 8003630:	8a3b      	ldrh	r3, [r7, #16]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	89fb      	ldrh	r3, [r7, #14]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	b2db      	uxtb	r3, r3
 8003642:	727b      	strb	r3, [r7, #9]
			d[2] = 0x3B;
 8003644:	233b      	movs	r3, #59	@ 0x3b
 8003646:	72bb      	strb	r3, [r7, #10]
			WriteCmdParamN(0xB6, 3, d);
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	461a      	mov	r2, r3
 800364e:	2103      	movs	r1, #3
 8003650:	20b6      	movs	r0, #182	@ 0xb6
 8003652:	f7fd fd93 	bl	800117c <WriteCmdParamN>
			goto common_MC;
 8003656:	e0c0      	b.n	80037da <tft_setRotation+0x2b6>
		}
		else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8003658:	4b56      	ldr	r3, [pc, #344]	@ (80037b4 <tft_setRotation+0x290>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <tft_setRotation+0x158>
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <tft_setRotation+0x290>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	f249 4281 	movw	r2, #38017	@ 0x9481
 800366c:	4293      	cmp	r3, r2
 800366e:	d005      	beq.n	800367c <tft_setRotation+0x158>
 8003670:	4b50      	ldr	r3, [pc, #320]	@ (80037b4 <tft_setRotation+0x290>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003678:	4293      	cmp	r3, r2
 800367a:	d139      	bne.n	80036f0 <tft_setRotation+0x1cc>
			if (val & 0x80)
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	b25b      	sxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	da04      	bge.n	800368e <tft_setRotation+0x16a>
				val |= 0x01;    //GS
 8003684:	7afb      	ldrb	r3, [r7, #11]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x40))
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <tft_setRotation+0x17e>
					val |= 0x02;    //SS
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1963) val &= ~0xC0;
 80036a2:	4b44      	ldr	r3, [pc, #272]	@ (80037b4 <tft_setRotation+0x290>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d104      	bne.n	80036b8 <tft_setRotation+0x194>
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x9481) val &= ~0xD0;
 80036b8:	4b3e      	ldr	r3, [pc, #248]	@ (80037b4 <tft_setRotation+0x290>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	f249 4281 	movw	r2, #38017	@ 0x9481
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d104      	bne.n	80036ce <tft_setRotation+0x1aa>
 80036c4:	7afb      	ldrb	r3, [r7, #11]
 80036c6:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1511) {
 80036ce:	4b39      	ldr	r3, [pc, #228]	@ (80037b4 <tft_setRotation+0x290>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f241 5211 	movw	r2, #5393	@ 0x1511
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d160      	bne.n	800379c <tft_setRotation+0x278>
					val &= ~0x10;   //remove ML
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	f023 0310 	bic.w	r3, r3, #16
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	72fb      	strb	r3, [r7, #11]
					val |= 0xC0;    //force penguin 180 rotation
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	72fb      	strb	r3, [r7, #11]
				}
				//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
				goto common_MC;
 80036ee:	e055      	b.n	800379c <tft_setRotation+0x278>
		}
		else if (is8347) {
 80036f0:	4b31      	ldr	r3, [pc, #196]	@ (80037b8 <tft_setRotation+0x294>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d06f      	beq.n	80037d8 <tft_setRotation+0x2b4>
			_MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80036f8:	4b30      	ldr	r3, [pc, #192]	@ (80037bc <tft_setRotation+0x298>)
 80036fa:	2202      	movs	r2, #2
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <tft_setRotation+0x29c>)
 8003700:	2206      	movs	r2, #6
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	4b2f      	ldr	r3, [pc, #188]	@ (80037c4 <tft_setRotation+0x2a0>)
 8003706:	2222      	movs	r2, #34	@ 0x22
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <tft_setRotation+0x2a4>)
 800370c:	2202      	movs	r2, #2
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	4b2e      	ldr	r3, [pc, #184]	@ (80037cc <tft_setRotation+0x2a8>)
 8003712:	2204      	movs	r2, #4
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <tft_setRotation+0x2ac>)
 8003718:	2206      	movs	r2, #6
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <tft_setRotation+0x2b0>)
 800371e:	2208      	movs	r2, #8
 8003720:	801a      	strh	r2, [r3, #0]
			if (_lcd_ID == 0x0065) {             //HX8352-B
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <tft_setRotation+0x290>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	2b65      	cmp	r3, #101	@ 0x65
 8003728:	d121      	bne.n	800376e <tft_setRotation+0x24a>
				val |= 0x01;    //GS=1
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <tft_setRotation+0x226>
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 8003744:	43db      	mvns	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	72fb      	strb	r3, [r7, #11]
				if (r & 1) _MC = 0x82, _MP = 0x80;
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d006      	beq.n	8003762 <tft_setRotation+0x23e>
 8003754:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <tft_setRotation+0x298>)
 8003756:	2282      	movs	r2, #130	@ 0x82
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <tft_setRotation+0x29c>)
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e005      	b.n	800376e <tft_setRotation+0x24a>
				else _MC = 0x80, _MP = 0x82;
 8003762:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <tft_setRotation+0x298>)
 8003764:	2280      	movs	r2, #128	@ 0x80
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <tft_setRotation+0x29c>)
 800376a:	2282      	movs	r2, #130	@ 0x82
 800376c:	801a      	strh	r2, [r3, #0]
			}
			if (_lcd_ID == 0x5252) {             //HX8352-A
 800376e:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <tft_setRotation+0x290>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f245 2252 	movw	r2, #21074	@ 0x5252
 8003776:	4293      	cmp	r3, r2
 8003778:	d145      	bne.n	8003806 <tft_setRotation+0x2e2>
				val |= 0x02;   //VERT_SCROLLON
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f043 0302 	orr.w	r3, r3, #2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03b      	beq.n	8003806 <tft_setRotation+0x2e2>
 800378e:	7afb      	ldrb	r3, [r7, #11]
 8003790:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 8003794:	43db      	mvns	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	72fb      	strb	r3, [r7, #11]
			}
			goto common_BGR;
 800379a:	e034      	b.n	8003806 <tft_setRotation+0x2e2>
				goto common_MC;
 800379c:	bf00      	nop
 800379e:	e01c      	b.n	80037da <tft_setRotation+0x2b6>
 80037a0:	200000dc 	.word	0x200000dc
 80037a4:	200000d4 	.word	0x200000d4
 80037a8:	20000004 	.word	0x20000004
 80037ac:	20000006 	.word	0x20000006
 80037b0:	200000d8 	.word	0x200000d8
 80037b4:	200000da 	.word	0x200000da
 80037b8:	200000cd 	.word	0x200000cd
 80037bc:	200000e0 	.word	0x200000e0
 80037c0:	200000e2 	.word	0x200000e2
 80037c4:	200000e4 	.word	0x200000e4
 80037c8:	200000e6 	.word	0x200000e6
 80037cc:	200000e8 	.word	0x200000e8
 80037d0:	200000ea 	.word	0x200000ea
 80037d4:	200000ec 	.word	0x200000ec
		}
		common_MC:
 80037d8:	bf00      	nop
		_MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80037da:	4b8a      	ldr	r3, [pc, #552]	@ (8003a04 <tft_setRotation+0x4e0>)
 80037dc:	222a      	movs	r2, #42	@ 0x2a
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	4b89      	ldr	r3, [pc, #548]	@ (8003a08 <tft_setRotation+0x4e4>)
 80037e2:	222b      	movs	r2, #43	@ 0x2b
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	4b89      	ldr	r3, [pc, #548]	@ (8003a0c <tft_setRotation+0x4e8>)
 80037e8:	222c      	movs	r2, #44	@ 0x2c
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	4b88      	ldr	r3, [pc, #544]	@ (8003a10 <tft_setRotation+0x4ec>)
 80037ee:	222a      	movs	r2, #42	@ 0x2a
 80037f0:	801a      	strh	r2, [r3, #0]
 80037f2:	4b88      	ldr	r3, [pc, #544]	@ (8003a14 <tft_setRotation+0x4f0>)
 80037f4:	222a      	movs	r2, #42	@ 0x2a
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	4b87      	ldr	r3, [pc, #540]	@ (8003a18 <tft_setRotation+0x4f4>)
 80037fa:	222b      	movs	r2, #43	@ 0x2b
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	4b87      	ldr	r3, [pc, #540]	@ (8003a1c <tft_setRotation+0x4f8>)
 8003800:	222b      	movs	r2, #43	@ 0x2b
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	e000      	b.n	8003808 <tft_setRotation+0x2e4>
			goto common_BGR;
 8003806:	bf00      	nop
		common_BGR:
		WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003808:	4b85      	ldr	r3, [pc, #532]	@ (8003a20 <tft_setRotation+0x4fc>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <tft_setRotation+0x2f0>
 8003810:	2316      	movs	r3, #22
 8003812:	e000      	b.n	8003816 <tft_setRotation+0x2f2>
 8003814:	2336      	movs	r3, #54	@ 0x36
 8003816:	f107 020b 	add.w	r2, r7, #11
 800381a:	2101      	movs	r1, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd fcad 	bl	800117c <WriteCmdParamN>
		_lcd_madctl = val;
 8003822:	7afb      	ldrb	r3, [r7, #11]
 8003824:	461a      	mov	r2, r3
 8003826:	4b7f      	ldr	r3, [pc, #508]	@ (8003a24 <tft_setRotation+0x500>)
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e0a5      	b.n	8003978 <tft_setRotation+0x454>
		//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
	}
	// cope with 9320 variants
	else {
		switch (_lcd_ID) {
 800382c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a28 <tft_setRotation+0x504>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <tft_setRotation+0x33c>
 8003838:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800383c:	4293      	cmp	r3, r2
 800383e:	dc4f      	bgt.n	80038e0 <tft_setRotation+0x3bc>
 8003840:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <tft_setRotation+0x33c>
 8003848:	f249 3226 	movw	r2, #37670	@ 0x9326
 800384c:	4293      	cmp	r3, r2
 800384e:	dc47      	bgt.n	80038e0 <tft_setRotation+0x3bc>
 8003850:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <tft_setRotation+0x33c>
 8003858:	f247 7293 	movw	r2, #30611	@ 0x7793
 800385c:	4293      	cmp	r3, r2
 800385e:	d13f      	bne.n	80038e0 <tft_setRotation+0x3bc>
#endif
		case 0x5420:
		case 0x7793:
		case 0x9326:
		case 0xB509:
			_MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8003860:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <tft_setRotation+0x4e0>)
 8003862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	4b67      	ldr	r3, [pc, #412]	@ (8003a08 <tft_setRotation+0x4e4>)
 800386a:	f240 2201 	movw	r2, #513	@ 0x201
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	4b66      	ldr	r3, [pc, #408]	@ (8003a0c <tft_setRotation+0x4e8>)
 8003872:	f240 2202 	movw	r2, #514	@ 0x202
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	4b65      	ldr	r3, [pc, #404]	@ (8003a10 <tft_setRotation+0x4ec>)
 800387a:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	4b64      	ldr	r3, [pc, #400]	@ (8003a14 <tft_setRotation+0x4f0>)
 8003882:	f240 2211 	movw	r2, #529	@ 0x211
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <tft_setRotation+0x4f4>)
 800388a:	f240 2212 	movw	r2, #530	@ 0x212
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	4b62      	ldr	r3, [pc, #392]	@ (8003a1c <tft_setRotation+0x4f8>)
 8003892:	f240 2213 	movw	r2, #531	@ 0x213
 8003896:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8003898:	7afb      	ldrb	r3, [r7, #11]
 800389a:	b25b      	sxtb	r3, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80038a6:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80038a8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80038ac:	82bb      	strh	r3, [r7, #20]
			if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80038ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003a28 <tft_setRotation+0x504>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f249 3226 	movw	r2, #37670	@ 0x9326
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d005      	beq.n	80038c6 <tft_setRotation+0x3a2>
 80038ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003a28 <tft_setRotation+0x504>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	f245 4220 	movw	r2, #21536	@ 0x5420
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d102      	bne.n	80038cc <tft_setRotation+0x3a8>
 80038c6:	8abb      	ldrh	r3, [r7, #20]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	82bb      	strh	r3, [r7, #20]
			tft_writeCmdData(0x400, GS | NL);
 80038cc:	8a3a      	ldrh	r2, [r7, #16]
 80038ce:	8abb      	ldrh	r3, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80038da:	f7fe fb0d 	bl	8001ef8 <tft_writeCmdData>
			goto common_SS;
 80038de:	e024      	b.n	800392a <tft_setRotation+0x406>
		default:
			_MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80038e0:	4b48      	ldr	r3, [pc, #288]	@ (8003a04 <tft_setRotation+0x4e0>)
 80038e2:	2220      	movs	r2, #32
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <tft_setRotation+0x4e4>)
 80038e8:	2221      	movs	r2, #33	@ 0x21
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <tft_setRotation+0x4e8>)
 80038ee:	2222      	movs	r2, #34	@ 0x22
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <tft_setRotation+0x4ec>)
 80038f4:	2250      	movs	r2, #80	@ 0x50
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <tft_setRotation+0x4f0>)
 80038fa:	2251      	movs	r2, #81	@ 0x51
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	4b46      	ldr	r3, [pc, #280]	@ (8003a18 <tft_setRotation+0x4f4>)
 8003900:	2252      	movs	r2, #82	@ 0x52
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <tft_setRotation+0x4f8>)
 8003906:	2253      	movs	r2, #83	@ 0x53
 8003908:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	b25b      	sxtb	r3, r3
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003914:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003918:	823b      	strh	r3, [r7, #16]
			tft_writeCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800391a:	8a3b      	ldrh	r3, [r7, #16]
 800391c:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8003920:	b29b      	uxth	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	2060      	movs	r0, #96	@ 0x60
 8003926:	f7fe fae7 	bl	8001ef8 <tft_writeCmdData>
			common_SS:
			SS_v = (val & 0x40) ? (1 << 8) : 0;
 800392a:	7afb      	ldrb	r3, [r7, #11]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	b29b      	uxth	r3, r3
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	81fb      	strh	r3, [r7, #14]
			tft_writeCmdData(0x01, SS_v);     // set Driver Output Control
 8003936:	89fb      	ldrh	r3, [r7, #14]
 8003938:	4619      	mov	r1, r3
 800393a:	2001      	movs	r0, #1
 800393c:	f7fe fadc 	bl	8001ef8 <tft_writeCmdData>
			common_ORG:
			ORG = (val & 0x20) ? (1 << 3) : 0;
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	109b      	asrs	r3, r3, #2
 8003944:	b29b      	uxth	r3, r3
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	82fb      	strh	r3, [r7, #22]
				if (rotation == 1 || rotation == 2) {
					val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
				}
			}
#endif
			if (val & 0x08)
 800394c:	7afb      	ldrb	r3, [r7, #11]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <tft_setRotation+0x43a>
				ORG |= 0x1000;  //BGR
 8003956:	8afb      	ldrh	r3, [r7, #22]
 8003958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800395c:	82fb      	strh	r3, [r7, #22]
			_lcd_madctl = ORG | 0x0030;
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <tft_setRotation+0x500>)
 8003968:	801a      	strh	r2, [r3, #0]
			tft_writeCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 800396a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a24 <tft_setRotation+0x500>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	2003      	movs	r0, #3
 8003972:	f7fe fac1 	bl	8001ef8 <tft_writeCmdData>
			break;
 8003976:	bf00      	nop
				tft_writeCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
			break;
#endif
		}
	}
	if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003978:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <tft_setRotation+0x508>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <tft_setRotation+0x4a8>
 8003984:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <tft_setRotation+0x50c>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d11d      	bne.n	80039cc <tft_setRotation+0x4a8>
		uint16_t x;
		x = _MC, _MC = _MP, _MP = x;
 8003990:	4b1c      	ldr	r3, [pc, #112]	@ (8003a04 <tft_setRotation+0x4e0>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	81bb      	strh	r3, [r7, #12]
 8003996:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <tft_setRotation+0x4e4>)
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <tft_setRotation+0x4e0>)
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a08 <tft_setRotation+0x4e4>)
 80039a0:	89bb      	ldrh	r3, [r7, #12]
 80039a2:	8013      	strh	r3, [r2, #0]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <tft_setRotation+0x4ec>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	81bb      	strh	r3, [r7, #12]
 80039aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <tft_setRotation+0x4f4>)
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <tft_setRotation+0x4ec>)
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	4a19      	ldr	r2, [pc, #100]	@ (8003a18 <tft_setRotation+0x4f4>)
 80039b4:	89bb      	ldrh	r3, [r7, #12]
 80039b6:	8013      	strh	r3, [r2, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80039b8:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <tft_setRotation+0x4f0>)
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	81bb      	strh	r3, [r7, #12]
 80039be:	4b17      	ldr	r3, [pc, #92]	@ (8003a1c <tft_setRotation+0x4f8>)
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <tft_setRotation+0x4f0>)
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <tft_setRotation+0x4f8>)
 80039c8:	89bb      	ldrh	r3, [r7, #12]
 80039ca:	8013      	strh	r3, [r2, #0]
	}
	setAddrWindow(0, 0, width() - 1, height() - 1);
 80039cc:	f7fd f888 	bl	8000ae0 <width>
 80039d0:	4603      	mov	r3, r0
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b21c      	sxth	r4, r3
 80039d8:	f7fd f88e 	bl	8000af8 <height>
 80039dc:	4603      	mov	r3, r0
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b21b      	sxth	r3, r3
 80039e4:	4622      	mov	r2, r4
 80039e6:	2100      	movs	r1, #0
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7fe f853 	bl	8001a94 <setAddrWindow>
	tft_vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80039ee:	2200      	movs	r2, #0
 80039f0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80039f4:	2000      	movs	r0, #0
 80039f6:	f000 f92f 	bl	8003c58 <tft_vertScroll>
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200000e0 	.word	0x200000e0
 8003a08:	200000e2 	.word	0x200000e2
 8003a0c:	200000e4 	.word	0x200000e4
 8003a10:	200000e6 	.word	0x200000e6
 8003a14:	200000e8 	.word	0x200000e8
 8003a18:	200000ea 	.word	0x200000ea
 8003a1c:	200000ec 	.word	0x200000ec
 8003a20:	200000cd 	.word	0x200000cd
 8003a24:	200000de 	.word	0x200000de
 8003a28:	200000da 	.word	0x200000da
 8003a2c:	200000d4 	.word	0x200000d4
 8003a30:	200000d8 	.word	0x200000d8

08003a34 <tft_getRotation>:

uint8_t tft_getRotation (void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
	return rotation;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <tft_getRotation+0x14>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200000d4 	.word	0x200000d4

08003a4c <tft_drawPixel>:

void tft_drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
 8003a56:	460b      	mov	r3, r1
 8003a58:	80bb      	strh	r3, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	807b      	strh	r3, [r7, #2]
	// MCUFRIEND just plots at edge if you try to write outside of the box:
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8003a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f2c0 80e7 	blt.w	8003c36 <tft_drawPixel+0x1ea>
 8003a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f2c0 80e2 	blt.w	8003c36 <tft_drawPixel+0x1ea>
 8003a72:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003a76:	f7fd f833 	bl	8000ae0 <width>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	429c      	cmp	r4, r3
 8003a7e:	f280 80da 	bge.w	8003c36 <tft_drawPixel+0x1ea>
 8003a82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003a86:	f7fd f837 	bl	8000af8 <height>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	429c      	cmp	r4, r3
 8003a8e:	f280 80d2 	bge.w	8003c36 <tft_drawPixel+0x1ea>
		return;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8003a92:	4b6b      	ldr	r3, [pc, #428]	@ (8003c40 <tft_drawPixel+0x1f4>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <tft_drawPixel+0x5a>
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd f837 	bl	8000b10 <color565_to_555>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	807b      	strh	r3, [r7, #2]
#endif
	setAddrWindow(x, y, x, y);
 8003aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003aaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ab2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ab6:	f7fd ffed 	bl	8001a94 <setAddrWindow>
	//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
	if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003aba:	4b62      	ldr	r3, [pc, #392]	@ (8003c44 <tft_drawPixel+0x1f8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80b1 	beq.w	8003c26 <tft_drawPixel+0x1da>
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4860      	ldr	r0, [pc, #384]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003ac8:	f7fc ffbc 	bl	8000a44 <PIN_LOW>
 8003acc:	2110      	movs	r1, #16
 8003ace:	485f      	ldr	r0, [pc, #380]	@ (8003c4c <tft_drawPixel+0x200>)
 8003ad0:	f7fc ffb8 	bl	8000a44 <PIN_LOW>
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c50 <tft_drawPixel+0x204>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	4b5c      	ldr	r3, [pc, #368]	@ (8003c50 <tft_drawPixel+0x204>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	73bb      	strb	r3, [r7, #14]
 8003ae4:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <tft_drawPixel+0x200>)
 8003ae6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003aea:	619a      	str	r2, [r3, #24]
 8003aec:	4b56      	ldr	r3, [pc, #344]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003aee:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003af2:	619a      	str	r2, [r3, #24]
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <tft_drawPixel+0x208>)
 8003af6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003afa:	619a      	str	r2, [r3, #24]
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b16:	431a      	orrs	r2, r3
 8003b18:	4b4c      	ldr	r3, [pc, #304]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b1a:	619a      	str	r2, [r3, #24]
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	105b      	asrs	r3, r3, #1
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	431a      	orrs	r2, r3
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	019b      	lsls	r3, r3, #6
 8003b48:	4a42      	ldr	r2, [pc, #264]	@ (8003c54 <tft_drawPixel+0x208>)
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	6193      	str	r3, [r2, #24]
 8003b50:	2102      	movs	r1, #2
 8003b52:	483e      	ldr	r0, [pc, #248]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b54:	f7fc ff76 	bl	8000a44 <PIN_LOW>
 8003b58:	2102      	movs	r1, #2
 8003b5a:	483c      	ldr	r0, [pc, #240]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b5c:	f7fc ff72 	bl	8000a44 <PIN_LOW>
 8003b60:	2102      	movs	r1, #2
 8003b62:	483a      	ldr	r0, [pc, #232]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b64:	f7fc ff6e 	bl	8000a44 <PIN_LOW>
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4838      	ldr	r0, [pc, #224]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b6c:	f7fc ff7a 	bl	8000a64 <PIN_HIGH>
 8003b70:	2102      	movs	r1, #2
 8003b72:	4836      	ldr	r0, [pc, #216]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b74:	f7fc ff76 	bl	8000a64 <PIN_HIGH>
 8003b78:	4b34      	ldr	r3, [pc, #208]	@ (8003c4c <tft_drawPixel+0x200>)
 8003b7a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003b82:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003b86:	619a      	str	r2, [r3, #24]
 8003b88:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <tft_drawPixel+0x208>)
 8003b8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b8e:	619a      	str	r2, [r3, #24]
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003b98:	7bbb      	ldrb	r3, [r7, #14]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	025b      	lsls	r3, r3, #9
 8003ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003baa:	431a      	orrs	r2, r3
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <tft_drawPixel+0x200>)
 8003bae:	619a      	str	r2, [r3, #24]
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	105b      	asrs	r3, r3, #1
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	7bbb      	ldrb	r3, [r7, #14]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	7bbb      	ldrb	r3, [r7, #14]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003bd6:	619a      	str	r2, [r3, #24]
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	019b      	lsls	r3, r3, #6
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <tft_drawPixel+0x208>)
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	2102      	movs	r1, #2
 8003be6:	4819      	ldr	r0, [pc, #100]	@ (8003c4c <tft_drawPixel+0x200>)
 8003be8:	f7fc ff2c 	bl	8000a44 <PIN_LOW>
 8003bec:	2102      	movs	r1, #2
 8003bee:	4817      	ldr	r0, [pc, #92]	@ (8003c4c <tft_drawPixel+0x200>)
 8003bf0:	f7fc ff28 	bl	8000a44 <PIN_LOW>
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	4815      	ldr	r0, [pc, #84]	@ (8003c4c <tft_drawPixel+0x200>)
 8003bf8:	f7fc ff24 	bl	8000a44 <PIN_LOW>
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4813      	ldr	r0, [pc, #76]	@ (8003c4c <tft_drawPixel+0x200>)
 8003c00:	f7fc ff30 	bl	8000a64 <PIN_HIGH>
 8003c04:	2102      	movs	r1, #2
 8003c06:	4811      	ldr	r0, [pc, #68]	@ (8003c4c <tft_drawPixel+0x200>)
 8003c08:	f7fc ff2c 	bl	8000a64 <PIN_HIGH>
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	480f      	ldr	r0, [pc, #60]	@ (8003c4c <tft_drawPixel+0x200>)
 8003c10:	f7fc ff28 	bl	8000a64 <PIN_HIGH>
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd f85a 	bl	8000cd0 <write24>
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	480a      	ldr	r0, [pc, #40]	@ (8003c48 <tft_drawPixel+0x1fc>)
 8003c20:	f7fc ff20 	bl	8000a64 <PIN_HIGH>
 8003c24:	e008      	b.n	8003c38 <tft_drawPixel+0x1ec>
		tft_writeCmdData(_MW, color);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <tft_drawPixel+0x204>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe f962 	bl	8001ef8 <tft_writeCmdData>
 8003c34:	e000      	b.n	8003c38 <tft_drawPixel+0x1ec>
		return;
 8003c36:	bf00      	nop
}
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd90      	pop	{r4, r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200000ce 	.word	0x200000ce
 8003c44:	200000cf 	.word	0x200000cf
 8003c48:	40020400 	.word	0x40020400
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	200000e4 	.word	0x200000e4
 8003c54:	40020800 	.word	0x40020800

08003c58 <tft_vertScroll>:

void tft_vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]
 8003c62:	460b      	mov	r3, r1
 8003c64:	80bb      	strh	r3, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003c6a:	4b89      	ldr	r3, [pc, #548]	@ (8003e90 <tft_vertScroll+0x238>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10b      	bne.n	8003c8e <tft_vertScroll+0x36>
		if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003c76:	4b87      	ldr	r3, [pc, #540]	@ (8003e94 <tft_vertScroll+0x23c>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <tft_vertScroll+0x2e>
 8003c7e:	4b85      	ldr	r3, [pc, #532]	@ (8003e94 <tft_vertScroll+0x23c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d103      	bne.n	8003c8e <tft_vertScroll+0x36>
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	3320      	adds	r3, #32
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	80fb      	strh	r3, [r7, #6]
	}
#endif
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	82fb      	strh	r3, [r7, #22]
	int16_t vsp;
	int16_t sea = top;
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8003e90 <tft_vertScroll+0x238>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d103      	bne.n	8003cb6 <tft_vertScroll+0x5e>
 8003cae:	8afb      	ldrh	r3, [r7, #22]
 8003cb0:	3320      	adds	r3, #32
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	82fb      	strh	r3, [r7, #22]
	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003cb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cbe:	425b      	negs	r3, r3
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dd05      	ble.n	8003cd0 <tft_vertScroll+0x78>
 8003cc4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	db01      	blt.n	8003cd4 <tft_vertScroll+0x7c>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	4413      	add	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	82bb      	strh	r3, [r7, #20]
	if (offset < 0)
 8003cde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da04      	bge.n	8003cf0 <tft_vertScroll+0x98>
		vsp += scrollines;          //keep in unsigned range
 8003ce6:	8aba      	ldrh	r2, [r7, #20]
 8003ce8:	88bb      	ldrh	r3, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	82bb      	strh	r3, [r7, #20]
	sea = top + scrollines - 1;
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	88bb      	ldrh	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	827b      	strh	r3, [r7, #18]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003cfe:	4b66      	ldr	r3, [pc, #408]	@ (8003e98 <tft_vertScroll+0x240>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d071      	beq.n	8003dee <tft_vertScroll+0x196>
		uint8_t d[6];           // for multi-byte parameters
		d[0] = top >> 8;        //TFA
 8003d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0e:	121b      	asrs	r3, r3, #8
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	733b      	strb	r3, [r7, #12]
		d[1] = top;
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	737b      	strb	r3, [r7, #13]
		d[2] = scrollines >> 8; //VSA
 8003d1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d20:	121b      	asrs	r3, r3, #8
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	73bb      	strb	r3, [r7, #14]
		d[3] = scrollines;
 8003d28:	88bb      	ldrh	r3, [r7, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	73fb      	strb	r3, [r7, #15]
		d[4] = bfa >> 8;        //BFA
 8003d2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d32:	121b      	asrs	r3, r3, #8
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	743b      	strb	r3, [r7, #16]
		d[5] = bfa;
 8003d3a:	8afb      	ldrh	r3, [r7, #22]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	747b      	strb	r3, [r7, #17]
		WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003d40:	4b56      	ldr	r3, [pc, #344]	@ (8003e9c <tft_vertScroll+0x244>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <tft_vertScroll+0xf4>
 8003d48:	230e      	movs	r3, #14
 8003d4a:	e000      	b.n	8003d4e <tft_vertScroll+0xf6>
 8003d4c:	2333      	movs	r3, #51	@ 0x33
 8003d4e:	f107 020c 	add.w	r2, r7, #12
 8003d52:	2106      	movs	r1, #6
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fa11 	bl	800117c <WriteCmdParamN>
		//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003d5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d5e:	121b      	asrs	r3, r3, #8
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	733b      	strb	r3, [r7, #12]
		d[1] = vsp;
 8003d66:	8abb      	ldrh	r3, [r7, #20]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	737b      	strb	r3, [r7, #13]
		WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <tft_vertScroll+0x244>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <tft_vertScroll+0x120>
 8003d74:	2314      	movs	r3, #20
 8003d76:	e000      	b.n	8003d7a <tft_vertScroll+0x122>
 8003d78:	2337      	movs	r3, #55	@ 0x37
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f9fb 	bl	800117c <WriteCmdParamN>
		if (is8347) {
 8003d86:	4b45      	ldr	r3, [pc, #276]	@ (8003e9c <tft_vertScroll+0x244>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01f      	beq.n	8003dce <tft_vertScroll+0x176>
			d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003d8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <tft_vertScroll+0x152>
 8003d96:	4b3e      	ldr	r3, [pc, #248]	@ (8003e90 <tft_vertScroll+0x238>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <tft_vertScroll+0x14e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e002      	b.n	8003dac <tft_vertScroll+0x154>
 8003da6:	2308      	movs	r3, #8
 8003da8:	e000      	b.n	8003dac <tft_vertScroll+0x154>
 8003daa:	2300      	movs	r3, #0
 8003dac:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003dae:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <tft_vertScroll+0x238>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <tft_vertScroll+0x166>
 8003dba:	2318      	movs	r3, #24
 8003dbc:	e000      	b.n	8003dc0 <tft_vertScroll+0x168>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f107 020c 	add.w	r2, r7, #12
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f9d8 	bl	800117c <WriteCmdParamN>
 8003dcc:	e05d      	b.n	8003e8a <tft_vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003dce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d159      	bne.n	8003e8a <tft_vertScroll+0x232>
 8003dd6:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <tft_vertScroll+0x240>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d053      	beq.n	8003e8a <tft_vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003de2:	2200      	movs	r2, #0
 8003de4:	2100      	movs	r1, #0
 8003de6:	2013      	movs	r0, #19
 8003de8:	f7fd f9c8 	bl	800117c <WriteCmdParamN>
 8003dec:	e04d      	b.n	8003e8a <tft_vertScroll+0x232>
		}
		return;
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 8003dee:	4b28      	ldr	r3, [pc, #160]	@ (8003e90 <tft_vertScroll+0x238>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d027      	beq.n	8003e4a <tft_vertScroll+0x1f2>
 8003dfa:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	dc34      	bgt.n	8003e6c <tft_vertScroll+0x214>
 8003e02:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01f      	beq.n	8003e4a <tft_vertScroll+0x1f2>
 8003e0a:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	dc2c      	bgt.n	8003e6c <tft_vertScroll+0x214>
 8003e12:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d017      	beq.n	8003e4a <tft_vertScroll+0x1f2>
 8003e1a:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	dc24      	bgt.n	8003e6c <tft_vertScroll+0x214>
 8003e22:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <tft_vertScroll+0x1f2>
 8003e2a:	f247 7283 	movw	r2, #30595	@ 0x7783
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d11c      	bne.n	8003e6c <tft_vertScroll+0x214>
	case 0x7783:
		tft_writeCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003e32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <tft_vertScroll+0x248>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	2061      	movs	r0, #97	@ 0x61
 8003e3a:	f7fe f85d 	bl	8001ef8 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 8003e3e:	8abb      	ldrh	r3, [r7, #20]
 8003e40:	4619      	mov	r1, r3
 8003e42:	206a      	movs	r0, #106	@ 0x6a
 8003e44:	f7fe f858 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003e48:	e01f      	b.n	8003e8a <tft_vertScroll+0x232>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <tft_vertScroll+0x248>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	4619      	mov	r1, r3
 8003e56:	f240 4001 	movw	r0, #1025	@ 0x401
 8003e5a:	f7fe f84d 	bl	8001ef8 <tft_writeCmdData>
		tft_writeCmdData(0x404, vsp);       //VL#
 8003e5e:	8abb      	ldrh	r3, [r7, #20]
 8003e60:	4619      	mov	r1, r3
 8003e62:	f240 4004 	movw	r0, #1028	@ 0x404
 8003e66:	f7fe f847 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003e6a:	e00e      	b.n	8003e8a <tft_vertScroll+0x232>
	default:
		// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
		tft_writeCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <tft_vertScroll+0x248>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	2061      	movs	r0, #97	@ 0x61
 8003e7a:	f7fe f83d 	bl	8001ef8 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 8003e7e:	8abb      	ldrh	r3, [r7, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	206a      	movs	r0, #106	@ 0x6a
 8003e84:	f7fe f838 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003e88:	bf00      	nop
	}
}
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200000da 	.word	0x200000da
 8003e94:	200000d4 	.word	0x200000d4
 8003e98:	200000d8 	.word	0x200000d8
 8003e9c:	200000cd 	.word	0x200000cd
 8003ea0:	200000dc 	.word	0x200000dc

08003ea4 <tft_invertDisplay>:

void tft_invertDisplay(uint8_t i)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003eae:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe0 <tft_invertDisplay+0x13c>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	b21a      	sxth	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	4053      	eors	r3, r2
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	4b45      	ldr	r3, [pc, #276]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003ece:	801a      	strh	r2, [r3, #0]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003ed0:	4b43      	ldr	r3, [pc, #268]	@ (8003fe0 <tft_invertDisplay+0x13c>)
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d035      	beq.n	8003f48 <tft_invertDisplay+0xa4>
		if (is8347) {
 8003edc:	4b42      	ldr	r3, [pc, #264]	@ (8003fe8 <tft_invertDisplay+0x144>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d024      	beq.n	8003f2e <tft_invertDisplay+0x8a>
			// HX8347D: 0x36 Panel Characteristic. REV_Panel
			// HX8347A: 0x36 is Display Control 10
			if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003ee4:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <tft_invertDisplay+0x148>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d005      	beq.n	8003efc <tft_invertDisplay+0x58>
 8003ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fec <tft_invertDisplay+0x148>)
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f245 2252 	movw	r2, #21074	@ 0x5252
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <tft_invertDisplay+0x6a>
				val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <tft_invertDisplay+0x64>
 8003f04:	2306      	movs	r3, #6
 8003f06:	e000      	b.n	8003f0a <tft_invertDisplay+0x66>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e007      	b.n	8003f1e <tft_invertDisplay+0x7a>
			else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8003f0e:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <tft_invertDisplay+0x76>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e000      	b.n	8003f1c <tft_invertDisplay+0x78>
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	73fb      	strb	r3, [r7, #15]
			// HX8347: 0x01 Display Mode has diff bit mapping for A, D
			WriteCmdParamN(0x01, 1, &val);
 8003f1e:	f107 030f 	add.w	r3, r7, #15
 8003f22:	461a      	mov	r2, r3
 8003f24:	2101      	movs	r1, #1
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7fd f928 	bl	800117c <WriteCmdParamN>
		} else
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
		return;
 8003f2c:	e055      	b.n	8003fda <tft_invertDisplay+0x136>
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <tft_invertDisplay+0x96>
 8003f36:	2321      	movs	r3, #33	@ 0x21
 8003f38:	e000      	b.n	8003f3c <tft_invertDisplay+0x98>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd f91b 	bl	800117c <WriteCmdParamN>
 8003f46:	e048      	b.n	8003fda <tft_invertDisplay+0x136>
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <tft_invertDisplay+0x148>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d030      	beq.n	8003fb6 <tft_invertDisplay+0x112>
 8003f54:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	dc37      	bgt.n	8003fcc <tft_invertDisplay+0x128>
 8003f5c:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d028      	beq.n	8003fb6 <tft_invertDisplay+0x112>
 8003f64:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	dc2f      	bgt.n	8003fcc <tft_invertDisplay+0x128>
 8003f6c:	f249 2225 	movw	r2, #37413	@ 0x9225
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <tft_invertDisplay+0xf8>
 8003f74:	f249 2225 	movw	r2, #37413	@ 0x9225
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	dc27      	bgt.n	8003fcc <tft_invertDisplay+0x128>
 8003f7c:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <tft_invertDisplay+0x112>
 8003f84:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	dc1f      	bgt.n	8003fcc <tft_invertDisplay+0x128>
 8003f8c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8003f90:	d004      	beq.n	8003f9c <tft_invertDisplay+0xf8>
 8003f92:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <tft_invertDisplay+0x112>
 8003f9a:	e017      	b.n	8003fcc <tft_invertDisplay+0x128>
#ifdef SUPPORT_0139
	case 0x0139:
#endif
	case 0x9225:                                        //REV is in reg(0x07) like Samsung
	case 0x0154:
		tft_writeCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	f043 0313 	orr.w	r3, r3, #19
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	2007      	movs	r0, #7
 8003fb0:	f7fd ffa2 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003fb4:	e011      	b.n	8003fda <tft_invertDisplay+0x136>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f240 4001 	movw	r0, #1025	@ 0x401
 8003fc6:	f7fd ff97 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003fca:	e006      	b.n	8003fda <tft_invertDisplay+0x136>
	default:
		tft_writeCmdData(0x61, _lcd_rev);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <tft_invertDisplay+0x140>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	2061      	movs	r0, #97	@ 0x61
 8003fd4:	f7fd ff90 	bl	8001ef8 <tft_writeCmdData>
		break;
 8003fd8:	bf00      	nop
	}
}
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200000d8 	.word	0x200000d8
 8003fe4:	200000dc 	.word	0x200000dc
 8003fe8:	200000cd 	.word	0x200000cd
 8003fec:	200000da 	.word	0x200000da

08003ff0 <tft_drawFastVLine>:

void tft_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	80fb      	strh	r3, [r7, #6]
 8004002:	4603      	mov	r3, r0
 8004004:	80bb      	strh	r3, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	807b      	strh	r3, [r7, #2]
 800400a:	4613      	mov	r3, r2
 800400c:	803b      	strh	r3, [r7, #0]
	tft_fillRect(x, y, 1, h, color);
 800400e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004012:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004016:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800401a:	883b      	ldrh	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	2201      	movs	r2, #1
 8004022:	f000 fa6f 	bl	8004504 <tft_fillRect>
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}

0800402e <tft_drawFastHLine>:

void tft_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800402e:	b590      	push	{r4, r7, lr}
 8004030:	b085      	sub	sp, #20
 8004032:	af02      	add	r7, sp, #8
 8004034:	4604      	mov	r4, r0
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	461a      	mov	r2, r3
 800403c:	4623      	mov	r3, r4
 800403e:	80fb      	strh	r3, [r7, #6]
 8004040:	4603      	mov	r3, r0
 8004042:	80bb      	strh	r3, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
 8004048:	4613      	mov	r3, r2
 800404a:	803b      	strh	r3, [r7, #0]
	tft_fillRect(x, y, w, 1, color);
 800404c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004050:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004054:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004058:	883b      	ldrh	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	f000 fa51 	bl	8004504 <tft_fillRect>
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}

0800406a <tft_drawLine>:

void tft_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800406a:	b590      	push	{r4, r7, lr}
 800406c:	b087      	sub	sp, #28
 800406e:	af02      	add	r7, sp, #8
 8004070:	4604      	mov	r4, r0
 8004072:	4608      	mov	r0, r1
 8004074:	4611      	mov	r1, r2
 8004076:	461a      	mov	r2, r3
 8004078:	4623      	mov	r3, r4
 800407a:	80fb      	strh	r3, [r7, #6]
 800407c:	4603      	mov	r3, r0
 800407e:	80bb      	strh	r3, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){
 8004088:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800408c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004090:	429a      	cmp	r2, r3
 8004092:	d11a      	bne.n	80040ca <tft_drawLine+0x60>
		if(y0 > y1) _swap_int16_t(y0, y1);
 8004094:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004098:	f9b7 3000 	ldrsh.w	r3, [r7]
 800409c:	429a      	cmp	r2, r3
 800409e:	dd05      	ble.n	80040ac <tft_drawLine+0x42>
 80040a0:	88bb      	ldrh	r3, [r7, #4]
 80040a2:	81bb      	strh	r3, [r7, #12]
 80040a4:	883b      	ldrh	r3, [r7, #0]
 80040a6:	80bb      	strh	r3, [r7, #4]
 80040a8:	89bb      	ldrh	r3, [r7, #12]
 80040aa:	803b      	strh	r3, [r7, #0]
		tft_drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80040ac:	883a      	ldrh	r2, [r7, #0]
 80040ae:	88bb      	ldrh	r3, [r7, #4]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	8c3b      	ldrh	r3, [r7, #32]
 80040bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040c4:	f7ff ff94 	bl	8003ff0 <tft_drawFastVLine>
		if(x0 > x1) _swap_int16_t(x0, x1);
		tft_drawFastHLine(x0, y0, x1 - x0 + 1, color);
	} else {
		writeLine(x0, y0, x1, y1, color);
	}
}
 80040c8:	e02d      	b.n	8004126 <tft_drawLine+0xbc>
	} else if(y0 == y1){
 80040ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80040ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <tft_drawLine+0xa2>
		if(x0 > x1) _swap_int16_t(x0, x1);
 80040d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040de:	429a      	cmp	r2, r3
 80040e0:	dd05      	ble.n	80040ee <tft_drawLine+0x84>
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	81fb      	strh	r3, [r7, #14]
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	80fb      	strh	r3, [r7, #6]
 80040ea:	89fb      	ldrh	r3, [r7, #14]
 80040ec:	807b      	strh	r3, [r7, #2]
		tft_drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b21a      	sxth	r2, r3
 80040fc:	8c3b      	ldrh	r3, [r7, #32]
 80040fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004102:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004106:	f7ff ff92 	bl	800402e <tft_drawFastHLine>
}
 800410a:	e00c      	b.n	8004126 <tft_drawLine+0xbc>
		writeLine(x0, y0, x1, y1, color);
 800410c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004110:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004114:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004118:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800411c:	8c3b      	ldrh	r3, [r7, #32]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4623      	mov	r3, r4
 8004122:	f7fd fdf0 	bl	8001d06 <writeLine>
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}

0800412e <tft_drawCircle>:

void tft_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800412e:	b590      	push	{r4, r7, lr}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	4604      	mov	r4, r0
 8004136:	4608      	mov	r0, r1
 8004138:	4611      	mov	r1, r2
 800413a:	461a      	mov	r2, r3
 800413c:	4623      	mov	r3, r4
 800413e:	80fb      	strh	r3, [r7, #6]
 8004140:	4603      	mov	r3, r0
 8004142:	80bb      	strh	r3, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	f1c3 0301 	rsb	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	461a      	mov	r2, r3
 800415e:	03d2      	lsls	r2, r2, #15
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	81fb      	strh	r3, [r7, #14]

	writePixel(x0  , y0+r, color);
 8004170:	88ba      	ldrh	r2, [r7, #4]
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	4413      	add	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	b219      	sxth	r1, r3
 800417a:	883a      	ldrh	r2, [r7, #0]
 800417c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fd fdab 	bl	8001cdc <writePixel>
	writePixel(x0  , y0-r, color);
 8004186:	88ba      	ldrh	r2, [r7, #4]
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	b219      	sxth	r1, r3
 8004190:	883a      	ldrh	r2, [r7, #0]
 8004192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fda0 	bl	8001cdc <writePixel>
	writePixel(x0+r, y0  , color);
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	887b      	ldrh	r3, [r7, #2]
 80041a0:	4413      	add	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	b21b      	sxth	r3, r3
 80041a6:	883a      	ldrh	r2, [r7, #0]
 80041a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd fd95 	bl	8001cdc <writePixel>
	writePixel(x0-r, y0  , color);
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	883a      	ldrh	r2, [r7, #0]
 80041be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fd8a 	bl	8001cdc <writePixel>

	while (x<y) {
 80041c8:	e091      	b.n	80042ee <tft_drawCircle+0x1c0>
		if (f >= 0) {
 80041ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db0e      	blt.n	80041f0 <tft_drawCircle+0xc2>
			y--;
 80041d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80041de:	8a7b      	ldrh	r3, [r7, #18]
 80041e0:	3302      	adds	r3, #2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80041e6:	8afa      	ldrh	r2, [r7, #22]
 80041e8:	8a7b      	ldrh	r3, [r7, #18]
 80041ea:	4413      	add	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80041f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80041fc:	8abb      	ldrh	r3, [r7, #20]
 80041fe:	3302      	adds	r3, #2
 8004200:	b29b      	uxth	r3, r3
 8004202:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004204:	8afa      	ldrh	r2, [r7, #22]
 8004206:	8abb      	ldrh	r3, [r7, #20]
 8004208:	4413      	add	r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	82fb      	strh	r3, [r7, #22]

		writePixel(x0 + x, y0 + y, color);
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	8a3b      	ldrh	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	b218      	sxth	r0, r3
 8004218:	88ba      	ldrh	r2, [r7, #4]
 800421a:	89fb      	ldrh	r3, [r7, #14]
 800421c:	4413      	add	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	b21b      	sxth	r3, r3
 8004222:	883a      	ldrh	r2, [r7, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	f7fd fd59 	bl	8001cdc <writePixel>
		writePixel(x0 - x, y0 + y, color);
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	8a3b      	ldrh	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	b29b      	uxth	r3, r3
 8004232:	b218      	sxth	r0, r3
 8004234:	88ba      	ldrh	r2, [r7, #4]
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	4413      	add	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	b21b      	sxth	r3, r3
 800423e:	883a      	ldrh	r2, [r7, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	f7fd fd4b 	bl	8001cdc <writePixel>
		writePixel(x0 + x, y0 - y, color);
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	8a3b      	ldrh	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	b218      	sxth	r0, r3
 8004250:	88ba      	ldrh	r2, [r7, #4]
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	b21b      	sxth	r3, r3
 800425a:	883a      	ldrh	r2, [r7, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f7fd fd3d 	bl	8001cdc <writePixel>
		writePixel(x0 - x, y0 - y, color);
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	8a3b      	ldrh	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	b218      	sxth	r0, r3
 800426c:	88ba      	ldrh	r2, [r7, #4]
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	b21b      	sxth	r3, r3
 8004276:	883a      	ldrh	r2, [r7, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	f7fd fd2f 	bl	8001cdc <writePixel>
		writePixel(x0 + y, y0 + x, color);
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	4413      	add	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	b218      	sxth	r0, r3
 8004288:	88ba      	ldrh	r2, [r7, #4]
 800428a:	8a3b      	ldrh	r3, [r7, #16]
 800428c:	4413      	add	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	b21b      	sxth	r3, r3
 8004292:	883a      	ldrh	r2, [r7, #0]
 8004294:	4619      	mov	r1, r3
 8004296:	f7fd fd21 	bl	8001cdc <writePixel>
		writePixel(x0 - y, y0 + x, color);
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b218      	sxth	r0, r3
 80042a4:	88ba      	ldrh	r2, [r7, #4]
 80042a6:	8a3b      	ldrh	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	883a      	ldrh	r2, [r7, #0]
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fd fd13 	bl	8001cdc <writePixel>
		writePixel(x0 + y, y0 - x, color);
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	89fb      	ldrh	r3, [r7, #14]
 80042ba:	4413      	add	r3, r2
 80042bc:	b29b      	uxth	r3, r3
 80042be:	b218      	sxth	r0, r3
 80042c0:	88ba      	ldrh	r2, [r7, #4]
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	883a      	ldrh	r2, [r7, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fd fd05 	bl	8001cdc <writePixel>
		writePixel(x0 - y, y0 - x, color);
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b218      	sxth	r0, r3
 80042dc:	88ba      	ldrh	r2, [r7, #4]
 80042de:	8a3b      	ldrh	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	883a      	ldrh	r2, [r7, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f7fd fcf7 	bl	8001cdc <writePixel>
	while (x<y) {
 80042ee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80042f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f6ff af67 	blt.w	80041ca <tft_drawCircle+0x9c>
	}
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}

08004306 <tft_fillCircle>:
		}
	}
}

void tft_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004306:	b590      	push	{r4, r7, lr}
 8004308:	b085      	sub	sp, #20
 800430a:	af02      	add	r7, sp, #8
 800430c:	4604      	mov	r4, r0
 800430e:	4608      	mov	r0, r1
 8004310:	4611      	mov	r1, r2
 8004312:	461a      	mov	r2, r3
 8004314:	4623      	mov	r3, r4
 8004316:	80fb      	strh	r3, [r7, #6]
 8004318:	4603      	mov	r3, r0
 800431a:	80bb      	strh	r3, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	803b      	strh	r3, [r7, #0]
	tft_drawFastVLine(x0, y0-r, 2*r+1, color);
 8004324:	88ba      	ldrh	r2, [r7, #4]
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	b219      	sxth	r1, r3
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	b21a      	sxth	r2, r3
 800433a:	883b      	ldrh	r3, [r7, #0]
 800433c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004340:	f7ff fe56 	bl	8003ff0 <tft_drawFastVLine>
	tft_fillCircleHelper(x0, y0, r, 3, 0, color);
 8004344:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004348:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800434c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004350:	883b      	ldrh	r3, [r7, #0]
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2300      	movs	r3, #0
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2303      	movs	r3, #3
 800435a:	f000 f804 	bl	8004366 <tft_fillCircleHelper>
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <tft_fillCircleHelper>:

void tft_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8004366:	b590      	push	{r4, r7, lr}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	4604      	mov	r4, r0
 800436e:	4608      	mov	r0, r1
 8004370:	4611      	mov	r1, r2
 8004372:	461a      	mov	r2, r3
 8004374:	4623      	mov	r3, r4
 8004376:	80fb      	strh	r3, [r7, #6]
 8004378:	4603      	mov	r3, r0
 800437a:	80bb      	strh	r3, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]

	int16_t f     = 1 - r;
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	f1c3 0301 	rsb	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	461a      	mov	r2, r3
 8004396:	03d2      	lsls	r2, r2, #15
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	827b      	strh	r3, [r7, #18]
	int16_t x     = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	823b      	strh	r3, [r7, #16]
	int16_t y     = r;
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	81fb      	strh	r3, [r7, #14]
	int16_t px    = x;
 80043a8:	8a3b      	ldrh	r3, [r7, #16]
 80043aa:	81bb      	strh	r3, [r7, #12]
	int16_t py    = y;
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
 80043b0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	853b      	strh	r3, [r7, #40]	@ 0x28

	while(x < y) {
 80043bc:	e095      	b.n	80044ea <tft_fillCircleHelper+0x184>
		if (f >= 0) {
 80043be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db0e      	blt.n	80043e4 <tft_fillCircleHelper+0x7e>
			y--;
 80043c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80043d2:	8a7b      	ldrh	r3, [r7, #18]
 80043d4:	3302      	adds	r3, #2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	827b      	strh	r3, [r7, #18]
			f     += ddF_y;
 80043da:	8afa      	ldrh	r2, [r7, #22]
 80043dc:	8a7b      	ldrh	r3, [r7, #18]
 80043de:	4413      	add	r3, r2
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80043e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80043f0:	8abb      	ldrh	r3, [r7, #20]
 80043f2:	3302      	adds	r3, #2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	82bb      	strh	r3, [r7, #20]
		f     += ddF_x;
 80043f8:	8afa      	ldrh	r2, [r7, #22]
 80043fa:	8abb      	ldrh	r3, [r7, #20]
 80043fc:	4413      	add	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if(x < (y + 1)) {
 8004402:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	db31      	blt.n	8004472 <tft_fillCircleHelper+0x10c>
			if(corners & 1) tft_drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800440e:	787b      	ldrb	r3, [r7, #1]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <tft_fillCircleHelper+0xda>
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	8a3b      	ldrh	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	b218      	sxth	r0, r3
 8004422:	88ba      	ldrh	r2, [r7, #4]
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b29b      	uxth	r3, r3
 800442a:	b219      	sxth	r1, r3
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004434:	4413      	add	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	b21a      	sxth	r2, r3
 800443a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800443c:	f7ff fdd8 	bl	8003ff0 <tft_drawFastVLine>
			if(corners & 2) tft_drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004440:	787b      	ldrb	r3, [r7, #1]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d013      	beq.n	8004472 <tft_fillCircleHelper+0x10c>
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	8a3b      	ldrh	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	b218      	sxth	r0, r3
 8004454:	88ba      	ldrh	r2, [r7, #4]
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	b29b      	uxth	r3, r3
 800445c:	b219      	sxth	r1, r3
 800445e:	89fb      	ldrh	r3, [r7, #14]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004466:	4413      	add	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	b21a      	sxth	r2, r3
 800446c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800446e:	f7ff fdbf 	bl	8003ff0 <tft_drawFastVLine>
		}
		if(y != py) {
 8004472:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004476:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800447a:	429a      	cmp	r2, r3
 800447c:	d033      	beq.n	80044e6 <tft_fillCircleHelper+0x180>
			if(corners & 1) tft_drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800447e:	787b      	ldrb	r3, [r7, #1]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <tft_fillCircleHelper+0x14a>
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	4413      	add	r3, r2
 800448e:	b29b      	uxth	r3, r3
 8004490:	b218      	sxth	r0, r3
 8004492:	88ba      	ldrh	r2, [r7, #4]
 8004494:	89bb      	ldrh	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	b219      	sxth	r1, r3
 800449c:	89bb      	ldrh	r3, [r7, #12]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044a4:	4413      	add	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b21a      	sxth	r2, r3
 80044aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044ac:	f7ff fda0 	bl	8003ff0 <tft_drawFastVLine>
			if(corners & 2) tft_drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d013      	beq.n	80044e2 <tft_fillCircleHelper+0x17c>
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b218      	sxth	r0, r3
 80044c4:	88ba      	ldrh	r2, [r7, #4]
 80044c6:	89bb      	ldrh	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b219      	sxth	r1, r3
 80044ce:	89bb      	ldrh	r3, [r7, #12]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044d6:	4413      	add	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	b21a      	sxth	r2, r3
 80044dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044de:	f7ff fd87 	bl	8003ff0 <tft_drawFastVLine>
			py = y;
 80044e2:	89fb      	ldrh	r3, [r7, #14]
 80044e4:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 80044e6:	8a3b      	ldrh	r3, [r7, #16]
 80044e8:	81bb      	strh	r3, [r7, #12]
	while(x < y) {
 80044ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	f6ff af63 	blt.w	80043be <tft_fillCircleHelper+0x58>
	}
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}
	...

08004504 <tft_fillRect>:
	tft_drawFastVLine(x, y, h, color);
	tft_drawFastVLine(x+w-1, y, h, color);
}

void tft_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4623      	mov	r3, r4
 8004514:	80fb      	strh	r3, [r7, #6]
 8004516:	4603      	mov	r3, r0
 8004518:	80bb      	strh	r3, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	807b      	strh	r3, [r7, #2]
 800451e:	4613      	mov	r3, r2
 8004520:	803b      	strh	r3, [r7, #0]
	int16_t end;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8004522:	4b95      	ldr	r3, [pc, #596]	@ (8004778 <tft_fillRect+0x274>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <tft_fillRect+0x32>
 800452a:	8c3b      	ldrh	r3, [r7, #32]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc faef 	bl	8000b10 <color565_to_555>
 8004532:	4603      	mov	r3, r0
 8004534:	843b      	strh	r3, [r7, #32]
#endif
	if (w < 0) {
 8004536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800453a:	2b00      	cmp	r3, #0
 800453c:	da08      	bge.n	8004550 <tft_fillRect+0x4c>
		w = -w;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	425b      	negs	r3, r3
 8004542:	b29b      	uxth	r3, r3
 8004544:	807b      	strh	r3, [r7, #2]
		x -= w;
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	887b      	ldrh	r3, [r7, #2]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	80fb      	strh	r3, [r7, #6]
	}                           //+ve w
	end = x + w;
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	4413      	add	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 800455a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da01      	bge.n	8004566 <tft_fillRect+0x62>
		x = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	80fb      	strh	r3, [r7, #6]
	if (end > width())
 8004566:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800456a:	f7fc fab9 	bl	8000ae0 <width>
 800456e:	4603      	mov	r3, r0
 8004570:	429c      	cmp	r4, r3
 8004572:	dd03      	ble.n	800457c <tft_fillRect+0x78>
		end = width();
 8004574:	f7fc fab4 	bl	8000ae0 <width>
 8004578:	4603      	mov	r3, r0
 800457a:	81fb      	strh	r3, [r7, #14]
	w = end - x;
 800457c:	89fa      	ldrh	r2, [r7, #14]
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	807b      	strh	r3, [r7, #2]
	if (h < 0) {
 8004586:	f9b7 3000 	ldrsh.w	r3, [r7]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da08      	bge.n	80045a0 <tft_fillRect+0x9c>
		h = -h;
 800458e:	883b      	ldrh	r3, [r7, #0]
 8004590:	425b      	negs	r3, r3
 8004592:	b29b      	uxth	r3, r3
 8004594:	803b      	strh	r3, [r7, #0]
		y -= h;
 8004596:	88ba      	ldrh	r2, [r7, #4]
 8004598:	883b      	ldrh	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	80bb      	strh	r3, [r7, #4]
	}                           //+ve h
	end = y + h;
 80045a0:	88ba      	ldrh	r2, [r7, #4]
 80045a2:	883b      	ldrh	r3, [r7, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	81fb      	strh	r3, [r7, #14]
	if (y < 0)
 80045aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da01      	bge.n	80045b6 <tft_fillRect+0xb2>
		y = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	80bb      	strh	r3, [r7, #4]
	if (end > height())
 80045b6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80045ba:	f7fc fa9d 	bl	8000af8 <height>
 80045be:	4603      	mov	r3, r0
 80045c0:	429c      	cmp	r4, r3
 80045c2:	dd03      	ble.n	80045cc <tft_fillRect+0xc8>
		end = height();
 80045c4:	f7fc fa98 	bl	8000af8 <height>
 80045c8:	4603      	mov	r3, r0
 80045ca:	81fb      	strh	r3, [r7, #14]
	h = end - y;
 80045cc:	89fa      	ldrh	r2, [r7, #14]
 80045ce:	88bb      	ldrh	r3, [r7, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	4413      	add	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	b21c      	sxth	r4, r3
 80045e4:	88ba      	ldrh	r2, [r7, #4]
 80045e6:	883b      	ldrh	r3, [r7, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80045fa:	4622      	mov	r2, r4
 80045fc:	f7fd fa4a 	bl	8001a94 <setAddrWindow>
	CS_ACTIVE;
 8004600:	2101      	movs	r1, #1
 8004602:	485e      	ldr	r0, [pc, #376]	@ (800477c <tft_fillRect+0x278>)
 8004604:	f7fc fa1e 	bl	8000a44 <PIN_LOW>
	WriteCmd(_MW);
 8004608:	2110      	movs	r1, #16
 800460a:	485d      	ldr	r0, [pc, #372]	@ (8004780 <tft_fillRect+0x27c>)
 800460c:	f7fc fa1a 	bl	8000a44 <PIN_LOW>
 8004610:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <tft_fillRect+0x280>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	b29b      	uxth	r3, r3
 8004618:	737b      	strb	r3, [r7, #13]
 800461a:	4b5a      	ldr	r3, [pc, #360]	@ (8004784 <tft_fillRect+0x280>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	733b      	strb	r3, [r7, #12]
 8004620:	4b57      	ldr	r3, [pc, #348]	@ (8004780 <tft_fillRect+0x27c>)
 8004622:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004626:	619a      	str	r2, [r3, #24]
 8004628:	4b54      	ldr	r3, [pc, #336]	@ (800477c <tft_fillRect+0x278>)
 800462a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800462e:	619a      	str	r2, [r3, #24]
 8004630:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <tft_fillRect+0x284>)
 8004632:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004636:	619a      	str	r2, [r3, #24]
 8004638:	7b7b      	ldrb	r3, [r7, #13]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004640:	7b7b      	ldrb	r3, [r7, #13]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004648:	431a      	orrs	r2, r3
 800464a:	7b7b      	ldrb	r3, [r7, #13]
 800464c:	025b      	lsls	r3, r3, #9
 800464e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004652:	431a      	orrs	r2, r3
 8004654:	4b4a      	ldr	r3, [pc, #296]	@ (8004780 <tft_fillRect+0x27c>)
 8004656:	619a      	str	r2, [r3, #24]
 8004658:	7b7b      	ldrb	r3, [r7, #13]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004660:	7b7b      	ldrb	r3, [r7, #13]
 8004662:	105b      	asrs	r3, r3, #1
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	431a      	orrs	r2, r3
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	431a      	orrs	r2, r3
 8004674:	7b7b      	ldrb	r3, [r7, #13]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	431a      	orrs	r2, r3
 800467c:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <tft_fillRect+0x278>)
 800467e:	619a      	str	r2, [r3, #24]
 8004680:	7b7b      	ldrb	r3, [r7, #13]
 8004682:	019b      	lsls	r3, r3, #6
 8004684:	4a40      	ldr	r2, [pc, #256]	@ (8004788 <tft_fillRect+0x284>)
 8004686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468a:	6193      	str	r3, [r2, #24]
 800468c:	2102      	movs	r1, #2
 800468e:	483c      	ldr	r0, [pc, #240]	@ (8004780 <tft_fillRect+0x27c>)
 8004690:	f7fc f9d8 	bl	8000a44 <PIN_LOW>
 8004694:	2102      	movs	r1, #2
 8004696:	483a      	ldr	r0, [pc, #232]	@ (8004780 <tft_fillRect+0x27c>)
 8004698:	f7fc f9d4 	bl	8000a44 <PIN_LOW>
 800469c:	2102      	movs	r1, #2
 800469e:	4838      	ldr	r0, [pc, #224]	@ (8004780 <tft_fillRect+0x27c>)
 80046a0:	f7fc f9d0 	bl	8000a44 <PIN_LOW>
 80046a4:	2102      	movs	r1, #2
 80046a6:	4836      	ldr	r0, [pc, #216]	@ (8004780 <tft_fillRect+0x27c>)
 80046a8:	f7fc f9dc 	bl	8000a64 <PIN_HIGH>
 80046ac:	2102      	movs	r1, #2
 80046ae:	4834      	ldr	r0, [pc, #208]	@ (8004780 <tft_fillRect+0x27c>)
 80046b0:	f7fc f9d8 	bl	8000a64 <PIN_HIGH>
 80046b4:	4b32      	ldr	r3, [pc, #200]	@ (8004780 <tft_fillRect+0x27c>)
 80046b6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80046ba:	619a      	str	r2, [r3, #24]
 80046bc:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <tft_fillRect+0x278>)
 80046be:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80046c2:	619a      	str	r2, [r3, #24]
 80046c4:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <tft_fillRect+0x284>)
 80046c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046ca:	619a      	str	r2, [r3, #24]
 80046cc:	7b3b      	ldrb	r3, [r7, #12]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80046d4:	7b3b      	ldrb	r3, [r7, #12]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	431a      	orrs	r2, r3
 80046de:	7b3b      	ldrb	r3, [r7, #12]
 80046e0:	025b      	lsls	r3, r3, #9
 80046e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e6:	431a      	orrs	r2, r3
 80046e8:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <tft_fillRect+0x27c>)
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	7b3b      	ldrb	r3, [r7, #12]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80046f4:	7b3b      	ldrb	r3, [r7, #12]
 80046f6:	105b      	asrs	r3, r3, #1
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	7b3b      	ldrb	r3, [r7, #12]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	431a      	orrs	r2, r3
 8004708:	7b3b      	ldrb	r3, [r7, #12]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	431a      	orrs	r2, r3
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <tft_fillRect+0x278>)
 8004712:	619a      	str	r2, [r3, #24]
 8004714:	7b3b      	ldrb	r3, [r7, #12]
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <tft_fillRect+0x284>)
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	6193      	str	r3, [r2, #24]
 8004720:	2102      	movs	r1, #2
 8004722:	4817      	ldr	r0, [pc, #92]	@ (8004780 <tft_fillRect+0x27c>)
 8004724:	f7fc f98e 	bl	8000a44 <PIN_LOW>
 8004728:	2102      	movs	r1, #2
 800472a:	4815      	ldr	r0, [pc, #84]	@ (8004780 <tft_fillRect+0x27c>)
 800472c:	f7fc f98a 	bl	8000a44 <PIN_LOW>
 8004730:	2102      	movs	r1, #2
 8004732:	4813      	ldr	r0, [pc, #76]	@ (8004780 <tft_fillRect+0x27c>)
 8004734:	f7fc f986 	bl	8000a44 <PIN_LOW>
 8004738:	2102      	movs	r1, #2
 800473a:	4811      	ldr	r0, [pc, #68]	@ (8004780 <tft_fillRect+0x27c>)
 800473c:	f7fc f992 	bl	8000a64 <PIN_HIGH>
 8004740:	2102      	movs	r1, #2
 8004742:	480f      	ldr	r0, [pc, #60]	@ (8004780 <tft_fillRect+0x27c>)
 8004744:	f7fc f98e 	bl	8000a64 <PIN_HIGH>
 8004748:	2110      	movs	r1, #16
 800474a:	480d      	ldr	r0, [pc, #52]	@ (8004780 <tft_fillRect+0x27c>)
 800474c:	f7fc f98a 	bl	8000a64 <PIN_HIGH>
	if (h > w) {
 8004750:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004758:	429a      	cmp	r2, r3
 800475a:	dd05      	ble.n	8004768 <tft_fillRect+0x264>
		end = h;
 800475c:	883b      	ldrh	r3, [r7, #0]
 800475e:	81fb      	strh	r3, [r7, #14]
		h = w;
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	803b      	strh	r3, [r7, #0]
		w = end;
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	807b      	strh	r3, [r7, #2]
	}
	uint8_t hi = color >> 8, lo = color & 0xFF;
 8004768:	8c3b      	ldrh	r3, [r7, #32]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29b      	uxth	r3, r3
 800476e:	72fb      	strb	r3, [r7, #11]
 8004770:	8c3b      	ldrh	r3, [r7, #32]
 8004772:	72bb      	strb	r3, [r7, #10]
	while (h-- > 0) {
 8004774:	e0a9      	b.n	80048ca <tft_fillRect+0x3c6>
 8004776:	bf00      	nop
 8004778:	200000ce 	.word	0x200000ce
 800477c:	40020400 	.word	0x40020400
 8004780:	40020000 	.word	0x40020000
 8004784:	200000e4 	.word	0x200000e4
 8004788:	40020800 	.word	0x40020800
		end = w;
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	81fb      	strh	r3, [r7, #14]
		//                 write8(b);
		//             } while (--end != 0);
		//        } else
		//#endif
		do {
			write8(hi);
 8004790:	4b68      	ldr	r3, [pc, #416]	@ (8004934 <tft_fillRect+0x430>)
 8004792:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004796:	619a      	str	r2, [r3, #24]
 8004798:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <tft_fillRect+0x434>)
 800479a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800479e:	619a      	str	r2, [r3, #24]
 80047a0:	4b66      	ldr	r3, [pc, #408]	@ (800493c <tft_fillRect+0x438>)
 80047a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047a6:	619a      	str	r2, [r3, #24]
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	431a      	orrs	r2, r3
 80047ba:	7afb      	ldrb	r3, [r7, #11]
 80047bc:	025b      	lsls	r3, r3, #9
 80047be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047c2:	431a      	orrs	r2, r3
 80047c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004934 <tft_fillRect+0x430>)
 80047c6:	619a      	str	r2, [r3, #24]
 80047c8:	7afb      	ldrb	r3, [r7, #11]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80047d0:	7afb      	ldrb	r3, [r7, #11]
 80047d2:	105b      	asrs	r3, r3, #1
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	431a      	orrs	r2, r3
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	431a      	orrs	r2, r3
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	431a      	orrs	r2, r3
 80047ec:	4b52      	ldr	r3, [pc, #328]	@ (8004938 <tft_fillRect+0x434>)
 80047ee:	619a      	str	r2, [r3, #24]
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	019b      	lsls	r3, r3, #6
 80047f4:	4a51      	ldr	r2, [pc, #324]	@ (800493c <tft_fillRect+0x438>)
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	6193      	str	r3, [r2, #24]
 80047fc:	2102      	movs	r1, #2
 80047fe:	484d      	ldr	r0, [pc, #308]	@ (8004934 <tft_fillRect+0x430>)
 8004800:	f7fc f920 	bl	8000a44 <PIN_LOW>
 8004804:	2102      	movs	r1, #2
 8004806:	484b      	ldr	r0, [pc, #300]	@ (8004934 <tft_fillRect+0x430>)
 8004808:	f7fc f91c 	bl	8000a44 <PIN_LOW>
 800480c:	2102      	movs	r1, #2
 800480e:	4849      	ldr	r0, [pc, #292]	@ (8004934 <tft_fillRect+0x430>)
 8004810:	f7fc f918 	bl	8000a44 <PIN_LOW>
 8004814:	2102      	movs	r1, #2
 8004816:	4847      	ldr	r0, [pc, #284]	@ (8004934 <tft_fillRect+0x430>)
 8004818:	f7fc f924 	bl	8000a64 <PIN_HIGH>
 800481c:	2102      	movs	r1, #2
 800481e:	4845      	ldr	r0, [pc, #276]	@ (8004934 <tft_fillRect+0x430>)
 8004820:	f7fc f920 	bl	8000a64 <PIN_HIGH>
			write8(lo);
 8004824:	4b43      	ldr	r3, [pc, #268]	@ (8004934 <tft_fillRect+0x430>)
 8004826:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800482a:	619a      	str	r2, [r3, #24]
 800482c:	4b42      	ldr	r3, [pc, #264]	@ (8004938 <tft_fillRect+0x434>)
 800482e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004832:	619a      	str	r2, [r3, #24]
 8004834:	4b41      	ldr	r3, [pc, #260]	@ (800493c <tft_fillRect+0x438>)
 8004836:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	7abb      	ldrb	r3, [r7, #10]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004844:	7abb      	ldrb	r3, [r7, #10]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	431a      	orrs	r2, r3
 800484e:	7abb      	ldrb	r3, [r7, #10]
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004856:	431a      	orrs	r2, r3
 8004858:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <tft_fillRect+0x430>)
 800485a:	619a      	str	r2, [r3, #24]
 800485c:	7abb      	ldrb	r3, [r7, #10]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004864:	7abb      	ldrb	r3, [r7, #10]
 8004866:	105b      	asrs	r3, r3, #1
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	7abb      	ldrb	r3, [r7, #10]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	431a      	orrs	r2, r3
 8004878:	7abb      	ldrb	r3, [r7, #10]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	431a      	orrs	r2, r3
 8004880:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <tft_fillRect+0x434>)
 8004882:	619a      	str	r2, [r3, #24]
 8004884:	7abb      	ldrb	r3, [r7, #10]
 8004886:	019b      	lsls	r3, r3, #6
 8004888:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <tft_fillRect+0x438>)
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	6193      	str	r3, [r2, #24]
 8004890:	2102      	movs	r1, #2
 8004892:	4828      	ldr	r0, [pc, #160]	@ (8004934 <tft_fillRect+0x430>)
 8004894:	f7fc f8d6 	bl	8000a44 <PIN_LOW>
 8004898:	2102      	movs	r1, #2
 800489a:	4826      	ldr	r0, [pc, #152]	@ (8004934 <tft_fillRect+0x430>)
 800489c:	f7fc f8d2 	bl	8000a44 <PIN_LOW>
 80048a0:	2102      	movs	r1, #2
 80048a2:	4824      	ldr	r0, [pc, #144]	@ (8004934 <tft_fillRect+0x430>)
 80048a4:	f7fc f8ce 	bl	8000a44 <PIN_LOW>
 80048a8:	2102      	movs	r1, #2
 80048aa:	4822      	ldr	r0, [pc, #136]	@ (8004934 <tft_fillRect+0x430>)
 80048ac:	f7fc f8da 	bl	8000a64 <PIN_HIGH>
 80048b0:	2102      	movs	r1, #2
 80048b2:	4820      	ldr	r0, [pc, #128]	@ (8004934 <tft_fillRect+0x430>)
 80048b4:	f7fc f8d6 	bl	8000a64 <PIN_HIGH>
		} while (--end != 0);
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	81fb      	strh	r3, [r7, #14]
 80048c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f af63 	bne.w	8004790 <tft_fillRect+0x28c>
	while (h-- > 0) {
 80048ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	3a01      	subs	r2, #1
 80048d2:	b292      	uxth	r2, r2
 80048d4:	803a      	strh	r2, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f73f af58 	bgt.w	800478c <tft_fillRect+0x288>
#endif
	}
	CS_IDLE;
 80048dc:	2101      	movs	r1, #1
 80048de:	4816      	ldr	r0, [pc, #88]	@ (8004938 <tft_fillRect+0x434>)
 80048e0:	f7fc f8c0 	bl	8000a64 <PIN_HIGH>
	if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80048e4:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <tft_fillRect+0x43c>)
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <tft_fillRect+0x404>
 80048f0:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <tft_fillRect+0x440>)
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	f241 5226 	movw	r2, #5414	@ 0x1526
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d116      	bne.n	800492a <tft_fillRect+0x426>
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <tft_fillRect+0x444>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <tft_fillRect+0x426>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8004908:	f7fc f8ea 	bl	8000ae0 <width>
 800490c:	4603      	mov	r3, r0
 800490e:	3b01      	subs	r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	b21c      	sxth	r4, r3
 8004914:	f7fc f8f0 	bl	8000af8 <height>
 8004918:	4603      	mov	r3, r0
 800491a:	3b01      	subs	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	b21b      	sxth	r3, r3
 8004920:	4622      	mov	r2, r4
 8004922:	2100      	movs	r1, #0
 8004924:	2000      	movs	r0, #0
 8004926:	f7fd f8b5 	bl	8001a94 <setAddrWindow>
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	200000d8 	.word	0x200000d8
 8004944:	200000da 	.word	0x200000da
 8004948:	200000d4 	.word	0x200000d4

0800494c <tft_fillScreen>:
		tft_drawFastHLine(a, y, b-a+1, color);
	}
}

void tft_fillScreen(uint16_t color)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af02      	add	r7, sp, #8
 8004952:	4603      	mov	r3, r0
 8004954:	80fb      	strh	r3, [r7, #6]
	tft_fillRect(0, 0, _width, _height, color);
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <tft_fillScreen+0x2c>)
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b21a      	sxth	r2, r3
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <tft_fillScreen+0x30>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b219      	sxth	r1, r3
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	460b      	mov	r3, r1
 8004968:	2100      	movs	r1, #0
 800496a:	2000      	movs	r0, #0
 800496c:	f7ff fdca 	bl	8004504 <tft_fillRect>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000004 	.word	0x20000004
 800497c:	20000006 	.word	0x20000006

08004980 <tft_testfillScreen>:
/* --------------------------------------------------------------------------*/

/* Funções de teste ---------------------------------------------------------*/
/* --------------------------------------------------------------------------*/
void tft_testfillScreen()
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	tft_fillScreen(BLACK);
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff ffe1 	bl	800494c <tft_fillScreen>
	tft_fillScreen(RED);
 800498a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800498e:	f7ff ffdd 	bl	800494c <tft_fillScreen>
	tft_fillScreen(GREEN);
 8004992:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004996:	f7ff ffd9 	bl	800494c <tft_fillScreen>
	tft_fillScreen(BLUE);
 800499a:	201f      	movs	r0, #31
 800499c:	f7ff ffd6 	bl	800494c <tft_fillScreen>
	tft_fillScreen(BLACK);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7ff ffd3 	bl	800494c <tft_fillScreen>
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}

080049aa <tft_testLines>:

void tft_testLines(uint16_t color)
{
 80049aa:	b590      	push	{r4, r7, lr}
 80049ac:	b08b      	sub	sp, #44	@ 0x2c
 80049ae:	af02      	add	r7, sp, #8
 80049b0:	4603      	mov	r3, r0
 80049b2:	80fb      	strh	r3, [r7, #6]
	int           x1, y1, x2, y2,
	w = width(),
 80049b4:	f7fc f894 	bl	8000ae0 <width>
 80049b8:	4603      	mov	r3, r0
 80049ba:	617b      	str	r3, [r7, #20]
	h = height();
 80049bc:	f7fc f89c 	bl	8000af8 <height>
 80049c0:	4603      	mov	r3, r0
 80049c2:	613b      	str	r3, [r7, #16]

	tft_fillScreen(BLACK);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7ff ffc1 	bl	800494c <tft_fillScreen>

	x1 = y1 = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	60bb      	str	r3, [r7, #8]
	y2    = h - 1;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	61bb      	str	r3, [r7, #24]
	for (x2 = 0; x2 < w; x2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e00f      	b.n	80049fe <tft_testLines+0x54>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	b218      	sxth	r0, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	b219      	sxth	r1, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	b21c      	sxth	r4, r3
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	4623      	mov	r3, r4
 80049f4:	f7ff fb39 	bl	800406a <tft_drawLine>
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3306      	adds	r3, #6
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	dbeb      	blt.n	80049de <tft_testLines+0x34>
	x2    = w - 1;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e00f      	b.n	8004a32 <tft_testLines+0x88>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	b218      	sxth	r0, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	b219      	sxth	r1, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	b21a      	sxth	r2, r3
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	b21c      	sxth	r4, r3
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7ff fb1f 	bl	800406a <tft_drawLine>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	3306      	adds	r3, #6
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	dbeb      	blt.n	8004a12 <tft_testLines+0x68>

	tft_fillScreen(BLACK);
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7ff ff86 	bl	800494c <tft_fillScreen>

	x1    = w - 1;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]
	y1    = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
	y2    = h - 1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	61bb      	str	r3, [r7, #24]
	for (x2 = 0; x2 < w; x2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e00f      	b.n	8004a76 <tft_testLines+0xcc>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	b218      	sxth	r0, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	b219      	sxth	r1, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	b21a      	sxth	r2, r3
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	b21c      	sxth	r4, r3
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	f7ff fafd 	bl	800406a <tft_drawLine>
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3306      	adds	r3, #6
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	dbeb      	blt.n	8004a56 <tft_testLines+0xac>
	x2    = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e00f      	b.n	8004aa8 <tft_testLines+0xfe>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	b218      	sxth	r0, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	b219      	sxth	r1, r3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	b21c      	sxth	r4, r3
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	f7ff fae4 	bl	800406a <tft_drawLine>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3306      	adds	r3, #6
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	dbeb      	blt.n	8004a88 <tft_testLines+0xde>

	tft_fillScreen(BLACK);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7ff ff4b 	bl	800494c <tft_fillScreen>

	x1    = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
	y1    = h - 1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
	y2    = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
	for (x2 = 0; x2 < w; x2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e00f      	b.n	8004aea <tft_testLines+0x140>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	b218      	sxth	r0, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	b219      	sxth	r1, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	b21a      	sxth	r2, r3
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	b21c      	sxth	r4, r3
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4623      	mov	r3, r4
 8004ae0:	f7ff fac3 	bl	800406a <tft_drawLine>
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3306      	adds	r3, #6
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	dbeb      	blt.n	8004aca <tft_testLines+0x120>
	x2    = w - 1;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e00f      	b.n	8004b1e <tft_testLines+0x174>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	b218      	sxth	r0, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	b219      	sxth	r1, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	b21a      	sxth	r2, r3
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	b21c      	sxth	r4, r3
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4623      	mov	r3, r4
 8004b14:	f7ff faa9 	bl	800406a <tft_drawLine>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	3306      	adds	r3, #6
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	dbeb      	blt.n	8004afe <tft_testLines+0x154>

	tft_fillScreen(BLACK);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7ff ff10 	bl	800494c <tft_fillScreen>

	x1    = w - 1;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
	y1    = h - 1;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
	y2    = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
	for (x2 = 0; x2 < w; x2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e00f      	b.n	8004b62 <tft_testLines+0x1b8>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	b218      	sxth	r0, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	b219      	sxth	r1, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	b21a      	sxth	r2, r3
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	b21c      	sxth	r4, r3
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	4623      	mov	r3, r4
 8004b58:	f7ff fa87 	bl	800406a <tft_drawLine>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	3306      	adds	r3, #6
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	dbeb      	blt.n	8004b42 <tft_testLines+0x198>
	x2    = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6) tft_drawLine(x1, y1, x2, y2, color);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e00f      	b.n	8004b94 <tft_testLines+0x1ea>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	b218      	sxth	r0, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	b219      	sxth	r1, r3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	b21a      	sxth	r2, r3
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b21c      	sxth	r4, r3
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4623      	mov	r3, r4
 8004b8a:	f7ff fa6e 	bl	800406a <tft_drawLine>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	3306      	adds	r3, #6
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	dbeb      	blt.n	8004b74 <tft_testLines+0x1ca>

}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}

08004ba6 <tft_testFastLines>:

void tft_testFastLines(uint16_t color1, uint16_t color2)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	460a      	mov	r2, r1
 8004bb0:	80fb      	strh	r3, [r7, #6]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80bb      	strh	r3, [r7, #4]
	int           x, y, w = width(), h = height();
 8004bb6:	f7fb ff93 	bl	8000ae0 <width>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	f7fb ff9b 	bl	8000af8 <height>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	60bb      	str	r3, [r7, #8]

	tft_fillScreen(BLACK);
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f7ff fec0 	bl	800494c <tft_fillScreen>
	for (y = 0; y < h; y += 5) tft_drawFastHLine(0, y, w, color1);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e00a      	b.n	8004be8 <tft_testFastLines+0x42>
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	b219      	sxth	r1, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7ff fa26 	bl	800402e <tft_drawFastHLine>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3305      	adds	r3, #5
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dbf0      	blt.n	8004bd2 <tft_testFastLines+0x2c>
	for (x = 0; x < w; x += 5) tft_drawFastVLine(x, 0, h, color2);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e00a      	b.n	8004c0c <tft_testFastLines+0x66>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	b218      	sxth	r0, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	b21a      	sxth	r2, r3
 8004bfe:	88bb      	ldrh	r3, [r7, #4]
 8004c00:	2100      	movs	r1, #0
 8004c02:	f7ff f9f5 	bl	8003ff0 <tft_drawFastVLine>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	3305      	adds	r3, #5
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dbf0      	blt.n	8004bf6 <tft_testFastLines+0x50>
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <tft_testFilledCircles>:
		tft_drawRect(cx - i2, cy - i2, i, i, color2);
	}
}

void tft_testFilledCircles(uint8_t radius, uint16_t color)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	460a      	mov	r2, r1
 8004c28:	71fb      	strb	r3, [r7, #7]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80bb      	strh	r3, [r7, #4]
	int x, y, w = width(), h = height(), r2 = radius * 2;
 8004c2e:	f7fb ff57 	bl	8000ae0 <width>
 8004c32:	4603      	mov	r3, r0
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	f7fb ff5f 	bl	8000af8 <height>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]

	tft_fillScreen(BLACK);
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7ff fe81 	bl	800494c <tft_fillScreen>
	for (x = radius; x < w; x += r2) {
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e017      	b.n	8004c80 <tft_testFilledCircles+0x62>
		for (y = radius; y < h; y += r2) {
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e00c      	b.n	8004c70 <tft_testFilledCircles+0x52>
			tft_fillCircle(x, y, radius, color);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	b218      	sxth	r0, r3
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	b219      	sxth	r1, r3
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	b21a      	sxth	r2, r3
 8004c62:	88bb      	ldrh	r3, [r7, #4]
 8004c64:	f7ff fb4f 	bl	8004306 <tft_fillCircle>
		for (y = radius; y < h; y += r2) {
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	dbee      	blt.n	8004c56 <tft_testFilledCircles+0x38>
	for (x = radius; x < w; x += r2) {
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	dbe3      	blt.n	8004c50 <tft_testFilledCircles+0x32>
		}
	}

}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <tft_testCircles>:

void tft_testCircles(uint8_t radius, uint16_t color)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	71fb      	strb	r3, [r7, #7]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80bb      	strh	r3, [r7, #4]
	int           x, y, r2 = radius * 2,
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
			w = width()  + radius,
 8004ca8:	f7fb ff1a 	bl	8000ae0 <width>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
			h = height() + radius;
 8004cb6:	f7fb ff1f 	bl	8000af8 <height>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

	// Screen is not cleared for this one -- this is
	// intentional and does not affect the reported time.
	for (x = 0; x < w; x += r2) {
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e017      	b.n	8004cfa <tft_testCircles+0x68>
		for (y = 0; y < h; y += r2) {
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e00c      	b.n	8004cea <tft_testCircles+0x58>
			tft_drawCircle(x, y, radius, color);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	b218      	sxth	r0, r3
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	b219      	sxth	r1, r3
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	b21a      	sxth	r2, r3
 8004cdc:	88bb      	ldrh	r3, [r7, #4]
 8004cde:	f7ff fa26 	bl	800412e <tft_drawCircle>
		for (y = 0; y < h; y += r2) {
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	dbee      	blt.n	8004cd0 <tft_testCircles+0x3e>
	for (x = 0; x < w; x += r2) {
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dbe3      	blt.n	8004cca <tft_testCircles+0x38>
		}
	}

}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <tft_drawChar>:

/* Fim funções de teste -----------------------------------------------------*/
/* --------------------------------------------------------------------------*/

void tft_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b08b      	sub	sp, #44	@ 0x2c
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	80fb      	strh	r3, [r7, #6]
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80bb      	strh	r3, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
 8004d26:	4613      	mov	r3, r2
 8004d28:	803b      	strh	r3, [r7, #0]

		// Character is assumed previously filtered by write() to eliminate
		// newlines, returns, non-printable characters, etc.  Calling
		// tft_drawChar() directly with 'bad' characters of font may cause mayhem!

		c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8004d2a:	4b57      	ldr	r3, [pc, #348]	@ (8004e88 <tft_drawChar+0x17c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	70fb      	strb	r3, [r7, #3]
		GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	00da      	lsls	r2, r3, #3
 8004d3c:	4b52      	ldr	r3, [pc, #328]	@ (8004e88 <tft_drawChar+0x17c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3304      	adds	r3, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
		uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8004d48:	4b4f      	ldr	r3, [pc, #316]	@ (8004e88 <tft_drawChar+0x17c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

		uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	83fb      	strh	r3, [r7, #30]
		uint8_t  w  = pgm_read_byte(&glyph->width),
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	72fb      	strb	r3, [r7, #11]
				h  = pgm_read_byte(&glyph->height);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3303      	adds	r3, #3
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	72bb      	strb	r3, [r7, #10]
		int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3305      	adds	r3, #5
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	727b      	strb	r3, [r7, #9]
				yo = pgm_read_byte(&glyph->yOffset);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3306      	adds	r3, #6
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	723b      	strb	r3, [r7, #8]
		uint8_t  xx, yy, bits = 0, bit = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	76fb      	strb	r3, [r7, #27]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	76bb      	strb	r3, [r7, #26]
		int16_t  xo16 = 0, yo16 = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	833b      	strh	r3, [r7, #24]
 8004d82:	2300      	movs	r3, #0
 8004d84:	82fb      	strh	r3, [r7, #22]

		if(size > 1) {
 8004d86:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d905      	bls.n	8004d9a <tft_drawChar+0x8e>
			xo16 = xo;
 8004d8e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004d92:	833b      	strh	r3, [r7, #24]
			yo16 = yo;
 8004d94:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004d98:	82fb      	strh	r3, [r7, #22]
		}

		for(yy=0; yy<h; yy++) {
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	773b      	strb	r3, [r7, #28]
 8004d9e:	e06a      	b.n	8004e76 <tft_drawChar+0x16a>
			for(xx=0; xx<w; xx++) {
 8004da0:	2300      	movs	r3, #0
 8004da2:	777b      	strb	r3, [r7, #29]
 8004da4:	e060      	b.n	8004e68 <tft_drawChar+0x15c>
				if(!(bit++ & 7)) {
 8004da6:	7ebb      	ldrb	r3, [r7, #26]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	76ba      	strb	r2, [r7, #26]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <tft_drawChar+0xb8>
					bits = pgm_read_byte(&bitmap[bo++]);
 8004db4:	8bfb      	ldrh	r3, [r7, #30]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	83fa      	strh	r2, [r7, #30]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	76fb      	strb	r3, [r7, #27]
				}
				if(bits & 0x80) {
 8004dc4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da47      	bge.n	8004e5c <tft_drawChar+0x150>
					if(size == 1) {
 8004dcc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d11a      	bne.n	8004e0a <tft_drawChar+0xfe>
						writePixel(x+xo+xx, y+yo+yy, color);
 8004dd4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4413      	add	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	7f7b      	ldrb	r3, [r7, #29]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b218      	sxth	r0, r3
 8004dea:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	88bb      	ldrh	r3, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	7f3b      	ldrb	r3, [r7, #28]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b21b      	sxth	r3, r3
 8004e00:	883a      	ldrh	r2, [r7, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7fc ff6a 	bl	8001cdc <writePixel>
 8004e08:	e028      	b.n	8004e5c <tft_drawChar+0x150>
					} else {
						tft_fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004e0a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004e0e:	7f7b      	ldrb	r3, [r7, #29]
 8004e10:	4413      	add	r3, r2
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	fb12 f303 	smulbb	r3, r2, r3
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	4413      	add	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b218      	sxth	r0, r3
 8004e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004e2c:	7f3b      	ldrb	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	fb12 f303 	smulbb	r3, r2, r3
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	88bb      	ldrh	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b219      	sxth	r1, r3
 8004e46:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004e4a:	b21a      	sxth	r2, r3
 8004e4c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004e50:	b21c      	sxth	r4, r3
 8004e52:	883b      	ldrh	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4623      	mov	r3, r4
 8004e58:	f7ff fb54 	bl	8004504 <tft_fillRect>
								size, size, color);
					}
				}
				bits <<= 1;
 8004e5c:	7efb      	ldrb	r3, [r7, #27]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	76fb      	strb	r3, [r7, #27]
			for(xx=0; xx<w; xx++) {
 8004e62:	7f7b      	ldrb	r3, [r7, #29]
 8004e64:	3301      	adds	r3, #1
 8004e66:	777b      	strb	r3, [r7, #29]
 8004e68:	7f7a      	ldrb	r2, [r7, #29]
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d39a      	bcc.n	8004da6 <tft_drawChar+0x9a>
		for(yy=0; yy<h; yy++) {
 8004e70:	7f3b      	ldrb	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	773b      	strb	r3, [r7, #28]
 8004e76:	7f3a      	ldrb	r2, [r7, #28]
 8004e78:	7abb      	ldrb	r3, [r7, #10]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d390      	bcc.n	8004da0 <tft_drawChar+0x94>
			}
		}

	} // End classic vs custom font
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3724      	adds	r7, #36	@ 0x24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}
 8004e88:	20000034 	.word	0x20000034

08004e8c <tft_write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
 */
/**************************************************************************/
size_t tft_write(uint8_t c)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
	{

		if(c == '\n') {
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2b0a      	cmp	r3, #10
 8004e9a:	d113      	bne.n	8004ec4 <tft_write+0x38>
			cursor_x  = 0;
 8004e9c:	4b49      	ldr	r3, [pc, #292]	@ (8004fc4 <tft_write+0x138>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	801a      	strh	r2, [r3, #0]
			cursor_y += (int16_t)textsize *
 8004ea2:	4b49      	ldr	r3, [pc, #292]	@ (8004fc8 <tft_write+0x13c>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
					(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004ea8:	4b48      	ldr	r3, [pc, #288]	@ (8004fcc <tft_write+0x140>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330a      	adds	r3, #10
 8004eae:	781b      	ldrb	r3, [r3, #0]
			cursor_y += (int16_t)textsize *
 8004eb0:	fb12 f303 	smulbb	r3, r2, r3
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	4b46      	ldr	r3, [pc, #280]	@ (8004fd0 <tft_write+0x144>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	4b44      	ldr	r3, [pc, #272]	@ (8004fd0 <tft_write+0x144>)
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e079      	b.n	8004fb8 <tft_write+0x12c>
		} else if(c != '\r') {
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b0d      	cmp	r3, #13
 8004ec8:	d076      	beq.n	8004fb8 <tft_write+0x12c>
			uint8_t first = pgm_read_byte(&gfxFont->first);
 8004eca:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <tft_write+0x140>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	75fb      	strb	r3, [r7, #23]
			if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004ed4:	79fa      	ldrb	r2, [r7, #7]
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d36d      	bcc.n	8004fb8 <tft_write+0x12c>
 8004edc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fcc <tft_write+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3309      	adds	r3, #9
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	79fa      	ldrb	r2, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d866      	bhi.n	8004fb8 <tft_write+0x12c>
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
						&gfxFont->glyph))[c - first]);
 8004eea:	79fa      	ldrb	r2, [r7, #7]
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	00da      	lsls	r2, r3, #3
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004ef2:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <tft_write+0x140>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3304      	adds	r3, #4
						&gfxFont->glyph))[c - first]);
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4413      	add	r3, r2
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004efc:	613b      	str	r3, [r7, #16]
				uint8_t   w     = pgm_read_byte(&glyph->width),
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3302      	adds	r3, #2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	73fb      	strb	r3, [r7, #15]
						h     = pgm_read_byte(&glyph->height);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	73bb      	strb	r3, [r7, #14]
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d042      	beq.n	8004f9a <tft_write+0x10e>
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d03f      	beq.n	8004f9a <tft_write+0x10e>
						int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3305      	adds	r3, #5
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	81bb      	strh	r3, [r7, #12]
						if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004f24:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <tft_write+0x148>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d023      	beq.n	8004f74 <tft_write+0xe8>
 8004f2c:	4b25      	ldr	r3, [pc, #148]	@ (8004fc4 <tft_write+0x138>)
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	4b25      	ldr	r3, [pc, #148]	@ (8004fc8 <tft_write+0x13c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	4413      	add	r3, r2
 8004f40:	fb00 f303 	mul.w	r3, r0, r3
 8004f44:	440b      	add	r3, r1
 8004f46:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <tft_write+0x14c>)
 8004f48:	8812      	ldrh	r2, [r2, #0]
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	dd12      	ble.n	8004f74 <tft_write+0xe8>
							cursor_x  = 0;
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <tft_write+0x138>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	801a      	strh	r2, [r3, #0]
							cursor_y += (int16_t)textsize *
 8004f54:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <tft_write+0x13c>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
									(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fcc <tft_write+0x140>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330a      	adds	r3, #10
 8004f60:	781b      	ldrb	r3, [r3, #0]
							cursor_y += (int16_t)textsize *
 8004f62:	fb12 f303 	smulbb	r3, r2, r3
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b19      	ldr	r3, [pc, #100]	@ (8004fd0 <tft_write+0x144>)
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <tft_write+0x144>)
 8004f72:	801a      	strh	r2, [r3, #0]
						}
						tft_drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8004f74:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <tft_write+0x138>)
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b218      	sxth	r0, r3
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <tft_write+0x144>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b219      	sxth	r1, r3
 8004f80:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <tft_write+0x150>)
 8004f82:	881d      	ldrh	r5, [r3, #0]
 8004f84:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <tft_write+0x154>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc8 <tft_write+0x13c>)
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	79fc      	ldrb	r4, [r7, #7]
 8004f8e:	9201      	str	r2, [sp, #4]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	462b      	mov	r3, r5
 8004f94:	4622      	mov	r2, r4
 8004f96:	f7ff feb9 	bl	8004d0c <tft_drawChar>
				}
				cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <tft_write+0x13c>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	fb12 f303 	smulbb	r3, r2, r3
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <tft_write+0x138>)
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <tft_write+0x138>)
 8004fb6:	801a      	strh	r2, [r3, #0]
			}
		}

	}
	return 1;
 8004fb8:	2301      	movs	r3, #1
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200000d2 	.word	0x200000d2
 8004fc8:	20000008 	.word	0x20000008
 8004fcc:	20000034 	.word	0x20000034
 8004fd0:	200000d0 	.word	0x200000d0
 8004fd4:	2000000e 	.word	0x2000000e
 8004fd8:	20000004 	.word	0x20000004
 8004fdc:	2000000a 	.word	0x2000000a
 8004fe0:	2000000c 	.word	0x2000000c

08004fe4 <tft_setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
 */
/**************************************************************************/
void tft_setFont(const GFXfont *f) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	if(f) {            // Font struct pointer passed in?
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <tft_setFont+0x24>
		if(!gfxFont) { // And no current font struct?
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <tft_setFont+0x4c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d110      	bne.n	800501c <tft_setFont+0x38>
			// Switching from classic to new font behavior.
			// Move cursor pos down 6 pixels so it's on baseline.
			cursor_y += 6;
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <tft_setFont+0x50>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	3306      	adds	r3, #6
 8005000:	b29a      	uxth	r2, r3
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <tft_setFont+0x50>)
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e009      	b.n	800501c <tft_setFont+0x38>
		}
	} else if(gfxFont) { // NULL passed.  Current font struct defined?
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <tft_setFont+0x4c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <tft_setFont+0x38>
		// Switching from new to classic font behavior.
		// Move cursor pos up 6 pixels so it's at top-left of char.
		cursor_y -= 6;
 8005010:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <tft_setFont+0x50>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	3b06      	subs	r3, #6
 8005016:	b29a      	uxth	r2, r3
 8005018:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <tft_setFont+0x50>)
 800501a:	801a      	strh	r2, [r3, #0]
	}
	gfxFont = (GFXfont *)f;
 800501c:	4a04      	ldr	r2, [pc, #16]	@ (8005030 <tft_setFont+0x4c>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000034 	.word	0x20000034
 8005034:	200000d0 	.word	0x200000d0

08005038 <tft_printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
 */
/**************************************************************************/
void tft_printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	460b      	mov	r3, r1
 8005046:	817b      	strh	r3, [r7, #10]
 8005048:	4613      	mov	r3, r2
 800504a:	727b      	strb	r3, [r7, #9]
	tft_setFont(f);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffc9 	bl	8004fe4 <tft_setFont>
	textcolor = txtcolor;
 8005052:	4a11      	ldr	r2, [pc, #68]	@ (8005098 <tft_printnewtstr+0x60>)
 8005054:	897b      	ldrh	r3, [r7, #10]
 8005056:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8005058:	7a7b      	ldrb	r3, [r7, #9]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <tft_printnewtstr+0x2a>
 800505e:	7a7b      	ldrb	r3, [r7, #9]
 8005060:	e000      	b.n	8005064 <tft_printnewtstr+0x2c>
 8005062:	2301      	movs	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	@ (800509c <tft_printnewtstr+0x64>)
 8005066:	7013      	strb	r3, [r2, #0]
	tft_setCursor(0, row);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	b21b      	sxth	r3, r3
 800506c:	4619      	mov	r1, r3
 800506e:	2000      	movs	r0, #0
 8005070:	f000 f816 	bl	80050a0 <tft_setCursor>
	//while (*str) write (*str++);
	while (*str) tft_write(*str++);
 8005074:	e006      	b.n	8005084 <tft_printnewtstr+0x4c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	61ba      	str	r2, [r7, #24]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff04 	bl	8004e8c <tft_write>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f4      	bne.n	8005076 <tft_printnewtstr+0x3e>
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000000a 	.word	0x2000000a
 800509c:	20000008 	.word	0x20000008

080050a0 <tft_setCursor>:
{
	textsize = size;
}

void tft_setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	460a      	mov	r2, r1
 80050aa:	80fb      	strh	r3, [r7, #6]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80bb      	strh	r3, [r7, #4]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <tft_setCursor+0x28>)
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	88ba      	ldrh	r2, [r7, #4]
 80050b8:	4b04      	ldr	r3, [pc, #16]	@ (80050cc <tft_setCursor+0x2c>)
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	200000d2 	.word	0x200000d2
 80050cc:	200000d0 	.word	0x200000d0

080050d0 <tft_scrollup>:

void tft_scrollup (uint16_t speed)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
	uint16_t maxscroll;
	if (tft_getRotation() & 1) maxscroll = width();
 80050da:	f7fe fcab 	bl	8003a34 <tft_getRotation>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <tft_scrollup+0x22>
 80050e8:	f7fb fcfa 	bl	8000ae0 <width>
 80050ec:	4603      	mov	r3, r0
 80050ee:	81fb      	strh	r3, [r7, #14]
 80050f0:	e003      	b.n	80050fa <tft_scrollup+0x2a>
	else maxscroll = height();
 80050f2:	f7fb fd01 	bl	8000af8 <height>
 80050f6:	4603      	mov	r3, r0
 80050f8:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 1; i <= maxscroll; i++)
 80050fa:	2301      	movs	r3, #1
 80050fc:	81bb      	strh	r3, [r7, #12]
 80050fe:	e01b      	b.n	8005138 <tft_scrollup+0x68>
	{
		tft_vertScroll(0, maxscroll, i);
 8005100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005104:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005108:	4619      	mov	r1, r3
 800510a:	2000      	movs	r0, #0
 800510c:	f7fe fda4 	bl	8003c58 <tft_vertScroll>
		if (speed < 655) delay(speed*100);
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	f240 228e 	movw	r2, #654	@ 0x28e
 8005116:	4293      	cmp	r3, r2
 8005118:	d807      	bhi.n	800512a <tft_scrollup+0x5a>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2264      	movs	r2, #100	@ 0x64
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	4618      	mov	r0, r3
 8005124:	f7fc fe92 	bl	8001e4c <delay>
 8005128:	e003      	b.n	8005132 <tft_scrollup+0x62>
		else HAL_Delay(speed);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f91b 	bl	8005368 <HAL_Delay>
	for (uint16_t i = 1; i <= maxscroll; i++)
 8005132:	89bb      	ldrh	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	81bb      	strh	r3, [r7, #12]
 8005138:	89ba      	ldrh	r2, [r7, #12]
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	429a      	cmp	r2, r3
 800513e:	d9df      	bls.n	8005100 <tft_scrollup+0x30>
	}
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <tft_gpio_init>:
	setAddrWindow(x, y, x1, y1);
}

/****************** Inicialização de GPIOs *************************/
void tft_gpio_init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b32      	ldr	r3, [pc, #200]	@ (8005220 <tft_gpio_init+0xd4>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515a:	4a31      	ldr	r2, [pc, #196]	@ (8005220 <tft_gpio_init+0xd4>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6313      	str	r3, [r2, #48]	@ 0x30
 8005162:	4b2f      	ldr	r3, [pc, #188]	@ (8005220 <tft_gpio_init+0xd4>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <tft_gpio_init+0xd4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <tft_gpio_init+0xd4>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	6313      	str	r3, [r2, #48]	@ 0x30
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <tft_gpio_init+0xd4>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	4b24      	ldr	r3, [pc, #144]	@ (8005220 <tft_gpio_init+0xd4>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	4a23      	ldr	r2, [pc, #140]	@ (8005220 <tft_gpio_init+0xd4>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	6313      	str	r3, [r2, #48]	@ 0x30
 800519a:	4b21      	ldr	r3, [pc, #132]	@ (8005220 <tft_gpio_init+0xd4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80051a6:	2101      	movs	r1, #1
 80051a8:	481e      	ldr	r0, [pc, #120]	@ (8005224 <tft_gpio_init+0xd8>)
 80051aa:	f7fb fc81 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 80051ae:	2102      	movs	r1, #2
 80051b0:	481c      	ldr	r0, [pc, #112]	@ (8005224 <tft_gpio_init+0xd8>)
 80051b2:	f7fb fc7d 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 80051b6:	2110      	movs	r1, #16
 80051b8:	481a      	ldr	r0, [pc, #104]	@ (8005224 <tft_gpio_init+0xd8>)
 80051ba:	f7fb fc79 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 80051be:	2101      	movs	r1, #1
 80051c0:	4819      	ldr	r0, [pc, #100]	@ (8005228 <tft_gpio_init+0xdc>)
 80051c2:	f7fb fc75 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 80051c6:	2102      	movs	r1, #2
 80051c8:	4818      	ldr	r0, [pc, #96]	@ (800522c <tft_gpio_init+0xe0>)
 80051ca:	f7fb fc71 	bl	8000ab0 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 80051ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051d2:	4814      	ldr	r0, [pc, #80]	@ (8005224 <tft_gpio_init+0xd8>)
 80051d4:	f7fb fc6c 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80051d8:	2180      	movs	r1, #128	@ 0x80
 80051da:	4814      	ldr	r0, [pc, #80]	@ (800522c <tft_gpio_init+0xe0>)
 80051dc:	f7fb fc68 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80051e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051e4:	480f      	ldr	r0, [pc, #60]	@ (8005224 <tft_gpio_init+0xd8>)
 80051e6:	f7fb fc63 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80051ea:	2108      	movs	r1, #8
 80051ec:	480e      	ldr	r0, [pc, #56]	@ (8005228 <tft_gpio_init+0xdc>)
 80051ee:	f7fb fc5f 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80051f2:	2120      	movs	r1, #32
 80051f4:	480c      	ldr	r0, [pc, #48]	@ (8005228 <tft_gpio_init+0xdc>)
 80051f6:	f7fb fc5b 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80051fa:	2110      	movs	r1, #16
 80051fc:	480a      	ldr	r0, [pc, #40]	@ (8005228 <tft_gpio_init+0xdc>)
 80051fe:	f7fb fc57 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8005202:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005206:	4808      	ldr	r0, [pc, #32]	@ (8005228 <tft_gpio_init+0xdc>)
 8005208:	f7fb fc52 	bl	8000ab0 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800520c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005210:	4804      	ldr	r0, [pc, #16]	@ (8005224 <tft_gpio_init+0xd8>)
 8005212:	f7fb fc4d 	bl	8000ab0 <PIN_OUTPUT>
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
 8005224:	40020000 	.word	0x40020000
 8005228:	40020400 	.word	0x40020400
 800522c:	40020800 	.word	0x40020800

08005230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005268 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005234:	f7fb fbf4 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005238:	480c      	ldr	r0, [pc, #48]	@ (800526c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800523a:	490d      	ldr	r1, [pc, #52]	@ (8005270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800523c:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800523e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005240:	e002      	b.n	8005248 <LoopCopyDataInit>

08005242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005246:	3304      	adds	r3, #4

08005248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800524a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800524c:	d3f9      	bcc.n	8005242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800524e:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005250:	4c0a      	ldr	r4, [pc, #40]	@ (800527c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005254:	e001      	b.n	800525a <LoopFillZerobss>

08005256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005258:	3204      	adds	r2, #4

0800525a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800525a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800525c:	d3fb      	bcc.n	8005256 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800525e:	f001 ff31 	bl	80070c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005262:	f7fb f947 	bl	80004f4 <main>
  bx  lr    
 8005266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800526c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005270:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005274:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8005278:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800527c:	200000f4 	.word	0x200000f4

08005280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005280:	e7fe      	b.n	8005280 <ADC_IRQHandler>
	...

08005284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005288:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_Init+0x40>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005294:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0a      	ldr	r2, [pc, #40]	@ (80052c4 <HAL_Init+0x40>)
 800529a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800529e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a0:	4b08      	ldr	r3, [pc, #32]	@ (80052c4 <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a07      	ldr	r2, [pc, #28]	@ (80052c4 <HAL_Init+0x40>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ac:	2003      	movs	r0, #3
 80052ae:	f000 f931 	bl	8005514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b2:	2000      	movs	r0, #0
 80052b4:	f000 f808 	bl	80052c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b8:	f7fb faf0 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00

080052c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_InitTick+0x54>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <HAL_InitTick+0x58>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052de:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f93b 	bl	8005562 <HAL_SYSTICK_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00e      	b.n	8005314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d80a      	bhi.n	8005312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052fc:	2200      	movs	r2, #0
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	f000 f911 	bl	800552a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005308:	4a06      	ldr	r2, [pc, #24]	@ (8005324 <HAL_InitTick+0x5c>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000000 	.word	0x20000000
 8005320:	20000014 	.word	0x20000014
 8005324:	20000010 	.word	0x20000010

08005328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_IncTick+0x20>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_IncTick+0x24>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a04      	ldr	r2, [pc, #16]	@ (800534c <HAL_IncTick+0x24>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000014 	.word	0x20000014
 800534c:	200000f0 	.word	0x200000f0

08005350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return uwTick;
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_GetTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200000f0 	.word	0x200000f0

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d005      	beq.n	800538e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <HAL_Delay+0x44>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538e:	bf00      	nop
 8005390:	f7ff ffde 	bl	8005350 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d8f7      	bhi.n	8005390 <HAL_Delay+0x28>
  {
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000014 	.word	0x20000014

080053b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	@ (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db0a      	blt.n	800543e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	490c      	ldr	r1, [pc, #48]	@ (8005460 <__NVIC_SetPriority+0x4c>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	440b      	add	r3, r1
 8005438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800543c:	e00a      	b.n	8005454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4908      	ldr	r1, [pc, #32]	@ (8005464 <__NVIC_SetPriority+0x50>)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	3b04      	subs	r3, #4
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	440b      	add	r3, r1
 8005452:	761a      	strb	r2, [r3, #24]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000e100 	.word	0xe000e100
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	@ 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f1c3 0307 	rsb	r3, r3, #7
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf28      	it	cs
 8005486:	2304      	movcs	r3, #4
 8005488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3304      	adds	r3, #4
 800548e:	2b06      	cmp	r3, #6
 8005490:	d902      	bls.n	8005498 <NVIC_EncodePriority+0x30>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3b03      	subs	r3, #3
 8005496:	e000      	b.n	800549a <NVIC_EncodePriority+0x32>
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	f04f 32ff 	mov.w	r2, #4294967295
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	401a      	ands	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b0:	f04f 31ff 	mov.w	r1, #4294967295
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43d9      	mvns	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	4313      	orrs	r3, r2
         );
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	@ 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e0:	d301      	bcc.n	80054e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054e2:	2301      	movs	r3, #1
 80054e4:	e00f      	b.n	8005506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005510 <SysTick_Config+0x40>)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ee:	210f      	movs	r1, #15
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	f7ff ff8e 	bl	8005414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <SysTick_Config+0x40>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054fe:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <SysTick_Config+0x40>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010

08005514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff47 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	4603      	mov	r3, r0
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800553c:	f7ff ff5c 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 8005540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f7ff ff8e 	bl	8005468 <NVIC_EncodePriority>
 800554c:	4602      	mov	r2, r0
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff5d 	bl	8005414 <__NVIC_SetPriority>
}
 800555a:	bf00      	nop
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffb0 	bl	80054d0 <SysTick_Config>
 8005570:	4603      	mov	r3, r0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	@ 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e165      	b.n	8005864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005598:	2201      	movs	r2, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	f040 8154 	bne.w	800585e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d005      	beq.n	80055ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d130      	bne.n	8005630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005604:	2201      	movs	r2, #1
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 0201 	and.w	r2, r3, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b03      	cmp	r3, #3
 800563a:	d017      	beq.n	800566c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d123      	bne.n	80056c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	08da      	lsrs	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3208      	adds	r2, #8
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	220f      	movs	r2, #15
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	08da      	lsrs	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3208      	adds	r2, #8
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80ae 	beq.w	800585e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	4b5d      	ldr	r3, [pc, #372]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	4a5c      	ldr	r2, [pc, #368]	@ (800587c <HAL_GPIO_Init+0x300>)
 800570c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005710:	6453      	str	r3, [r2, #68]	@ 0x44
 8005712:	4b5a      	ldr	r3, [pc, #360]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571e:	4a58      	ldr	r2, [pc, #352]	@ (8005880 <HAL_GPIO_Init+0x304>)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3302      	adds	r3, #2
 8005726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	220f      	movs	r2, #15
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a4f      	ldr	r2, [pc, #316]	@ (8005884 <HAL_GPIO_Init+0x308>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d025      	beq.n	8005796 <HAL_GPIO_Init+0x21a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a4e      	ldr	r2, [pc, #312]	@ (8005888 <HAL_GPIO_Init+0x30c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <HAL_GPIO_Init+0x216>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a4d      	ldr	r2, [pc, #308]	@ (800588c <HAL_GPIO_Init+0x310>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d019      	beq.n	800578e <HAL_GPIO_Init+0x212>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a4c      	ldr	r2, [pc, #304]	@ (8005890 <HAL_GPIO_Init+0x314>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_GPIO_Init+0x20e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4b      	ldr	r2, [pc, #300]	@ (8005894 <HAL_GPIO_Init+0x318>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_GPIO_Init+0x20a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <HAL_GPIO_Init+0x31c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x206>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a49      	ldr	r2, [pc, #292]	@ (800589c <HAL_GPIO_Init+0x320>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_GPIO_Init+0x202>
 800577a:	2306      	movs	r3, #6
 800577c:	e00c      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 800577e:	2307      	movs	r3, #7
 8005780:	e00a      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 8005782:	2305      	movs	r3, #5
 8005784:	e008      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 8005786:	2304      	movs	r3, #4
 8005788:	e006      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 800578a:	2303      	movs	r3, #3
 800578c:	e004      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 800578e:	2302      	movs	r3, #2
 8005790:	e002      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_GPIO_Init+0x21c>
 8005796:	2300      	movs	r3, #0
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	f002 0203 	and.w	r2, r2, #3
 800579e:	0092      	lsls	r2, r2, #2
 80057a0:	4093      	lsls	r3, r2
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a8:	4935      	ldr	r1, [pc, #212]	@ (8005880 <HAL_GPIO_Init+0x304>)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	3302      	adds	r3, #2
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057b6:	4b3a      	ldr	r3, [pc, #232]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057da:	4a31      	ldr	r2, [pc, #196]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057e0:	4b2f      	ldr	r3, [pc, #188]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005804:	4a26      	ldr	r2, [pc, #152]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800580a:	4b25      	ldr	r3, [pc, #148]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800582e:	4a1c      	ldr	r2, [pc, #112]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005834:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005858:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <HAL_GPIO_Init+0x324>)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	f67f ae96 	bls.w	8005598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3724      	adds	r7, #36	@ 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800
 8005880:	40013800 	.word	0x40013800
 8005884:	40020000 	.word	0x40020000
 8005888:	40020400 	.word	0x40020400
 800588c:	40020800 	.word	0x40020800
 8005890:	40020c00 	.word	0x40020c00
 8005894:	40021000 	.word	0x40021000
 8005898:	40021400 	.word	0x40021400
 800589c:	40021800 	.word	0x40021800
 80058a0:	40013c00 	.word	0x40013c00

080058a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b4:	787b      	ldrb	r3, [r7, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058c0:	e003      	b.n	80058ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	619a      	str	r2, [r3, #24]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0cc      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b68      	ldr	r3, [pc, #416]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d90c      	bls.n	8005914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b65      	ldr	r3, [pc, #404]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b63      	ldr	r3, [pc, #396]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b8      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800592c:	4b59      	ldr	r3, [pc, #356]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a58      	ldr	r2, [pc, #352]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005944:	4b53      	ldr	r3, [pc, #332]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a52      	ldr	r2, [pc, #328]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800594e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b50      	ldr	r3, [pc, #320]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	494d      	ldr	r1, [pc, #308]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d044      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	4b47      	ldr	r3, [pc, #284]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d119      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d003      	beq.n	8005996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005992:	2b03      	cmp	r3, #3
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005996:	4b3f      	ldr	r3, [pc, #252]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e06f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e067      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b6:	4b37      	ldr	r3, [pc, #220]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 0203 	bic.w	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4934      	ldr	r1, [pc, #208]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c8:	f7ff fcc2 	bl	8005350 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7ff fcbe 	bl	8005350 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e04f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 020c 	and.w	r2, r3, #12
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1eb      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f8:	4b25      	ldr	r3, [pc, #148]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d20c      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e032      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4916      	ldr	r1, [pc, #88]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4a:	4b12      	ldr	r3, [pc, #72]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490e      	ldr	r1, [pc, #56]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a5e:	f000 f855 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	@ (8005a98 <HAL_RCC_ClockConfig+0x1c0>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	@ (8005a9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fc22 	bl	80052c8 <HAL_InitTick>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40023c00 	.word	0x40023c00
 8005a94:	40023800 	.word	0x40023800
 8005a98:	08007afc 	.word	0x08007afc
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	20000010 	.word	0x20000010

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac0:	f7ff fff0 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	08007b0c 	.word	0x08007b0c

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ae8:	f7ff ffdc 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0b5b      	lsrs	r3, r3, #13
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	08007b0c 	.word	0x08007b0c

08005b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b10:	b0ae      	sub	sp, #184	@ 0xb8
 8005b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b32:	4bcb      	ldr	r3, [pc, #812]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b0c      	cmp	r3, #12
 8005b3c:	f200 8206 	bhi.w	8005f4c <HAL_RCC_GetSysClockFreq+0x440>
 8005b40:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005f4d 	.word	0x08005f4d
 8005b50:	08005f4d 	.word	0x08005f4d
 8005b54:	08005f4d 	.word	0x08005f4d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005f4d 	.word	0x08005f4d
 8005b60:	08005f4d 	.word	0x08005f4d
 8005b64:	08005f4d 	.word	0x08005f4d
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005f4d 	.word	0x08005f4d
 8005b70:	08005f4d 	.word	0x08005f4d
 8005b74:	08005f4d 	.word	0x08005f4d
 8005b78:	08005d7d 	.word	0x08005d7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b82:	e1e7      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b84:	4bb8      	ldr	r3, [pc, #736]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b8a:	e1e3      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b8c:	4bb4      	ldr	r3, [pc, #720]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b98:	4bb1      	ldr	r3, [pc, #708]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d071      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba4:	4bae      	ldr	r3, [pc, #696]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	099b      	lsrs	r3, r3, #6
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bb0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bca:	4622      	mov	r2, r4
 8005bcc:	462b      	mov	r3, r5
 8005bce:	f04f 0000 	mov.w	r0, #0
 8005bd2:	f04f 0100 	mov.w	r1, #0
 8005bd6:	0159      	lsls	r1, r3, #5
 8005bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bdc:	0150      	lsls	r0, r2, #5
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4621      	mov	r1, r4
 8005be4:	1a51      	subs	r1, r2, r1
 8005be6:	6439      	str	r1, [r7, #64]	@ 0x40
 8005be8:	4629      	mov	r1, r5
 8005bea:	eb63 0301 	sbc.w	r3, r3, r1
 8005bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	018b      	lsls	r3, r1, #6
 8005c00:	4641      	mov	r1, r8
 8005c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c06:	4641      	mov	r1, r8
 8005c08:	018a      	lsls	r2, r1, #6
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	1a51      	subs	r1, r2, r1
 8005c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c10:	4649      	mov	r1, r9
 8005c12:	eb63 0301 	sbc.w	r3, r3, r1
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005c24:	4649      	mov	r1, r9
 8005c26:	00cb      	lsls	r3, r1, #3
 8005c28:	4641      	mov	r1, r8
 8005c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2e:	4641      	mov	r1, r8
 8005c30:	00ca      	lsls	r2, r1, #3
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	4622      	mov	r2, r4
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3e:	462b      	mov	r3, r5
 8005c40:	460a      	mov	r2, r1
 8005c42:	eb42 0303 	adc.w	r3, r2, r3
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c54:	4629      	mov	r1, r5
 8005c56:	024b      	lsls	r3, r1, #9
 8005c58:	4621      	mov	r1, r4
 8005c5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c5e:	4621      	mov	r1, r4
 8005c60:	024a      	lsls	r2, r1, #9
 8005c62:	4610      	mov	r0, r2
 8005c64:	4619      	mov	r1, r3
 8005c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005c78:	f7fa fac4 	bl	8000204 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4613      	mov	r3, r2
 8005c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c86:	e067      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c88:	4b75      	ldr	r3, [pc, #468]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ca6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005caa:	4622      	mov	r2, r4
 8005cac:	462b      	mov	r3, r5
 8005cae:	f04f 0000 	mov.w	r0, #0
 8005cb2:	f04f 0100 	mov.w	r1, #0
 8005cb6:	0159      	lsls	r1, r3, #5
 8005cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cbc:	0150      	lsls	r0, r2, #5
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	1a51      	subs	r1, r2, r1
 8005cc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005cc8:	4629      	mov	r1, r5
 8005cca:	eb63 0301 	sbc.w	r3, r3, r1
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005cdc:	4649      	mov	r1, r9
 8005cde:	018b      	lsls	r3, r1, #6
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	018a      	lsls	r2, r1, #6
 8005cea:	4641      	mov	r1, r8
 8005cec:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d0a:	4692      	mov	sl, r2
 8005d0c:	469b      	mov	fp, r3
 8005d0e:	4623      	mov	r3, r4
 8005d10:	eb1a 0303 	adds.w	r3, sl, r3
 8005d14:	623b      	str	r3, [r7, #32]
 8005d16:	462b      	mov	r3, r5
 8005d18:	eb4b 0303 	adc.w	r3, fp, r3
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	028b      	lsls	r3, r1, #10
 8005d2e:	4621      	mov	r1, r4
 8005d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d34:	4621      	mov	r1, r4
 8005d36:	028a      	lsls	r2, r1, #10
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d40:	2200      	movs	r2, #0
 8005d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d44:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005d4a:	f7fa fa5b 	bl	8000204 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4613      	mov	r3, r2
 8005d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d58:	4b41      	ldr	r3, [pc, #260]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	3301      	adds	r3, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d7a:	e0eb      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d7c:	4b38      	ldr	r3, [pc, #224]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d88:	4b35      	ldr	r3, [pc, #212]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d06b      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d94:	4b32      	ldr	r3, [pc, #200]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	099b      	lsrs	r3, r3, #6
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005da8:	2300      	movs	r3, #0
 8005daa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	f04f 0000 	mov.w	r0, #0
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	0159      	lsls	r1, r3, #5
 8005dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dc2:	0150      	lsls	r0, r2, #5
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4621      	mov	r1, r4
 8005dca:	1a51      	subs	r1, r2, r1
 8005dcc:	61b9      	str	r1, [r7, #24]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005de2:	4659      	mov	r1, fp
 8005de4:	018b      	lsls	r3, r1, #6
 8005de6:	4651      	mov	r1, sl
 8005de8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dec:	4651      	mov	r1, sl
 8005dee:	018a      	lsls	r2, r1, #6
 8005df0:	4651      	mov	r1, sl
 8005df2:	ebb2 0801 	subs.w	r8, r2, r1
 8005df6:	4659      	mov	r1, fp
 8005df8:	eb63 0901 	sbc.w	r9, r3, r1
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e10:	4690      	mov	r8, r2
 8005e12:	4699      	mov	r9, r3
 8005e14:	4623      	mov	r3, r4
 8005e16:	eb18 0303 	adds.w	r3, r8, r3
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	eb49 0303 	adc.w	r3, r9, r3
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e30:	4629      	mov	r1, r5
 8005e32:	024b      	lsls	r3, r1, #9
 8005e34:	4621      	mov	r1, r4
 8005e36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	024a      	lsls	r2, r1, #9
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e46:	2200      	movs	r2, #0
 8005e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e4a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005e4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e50:	f7fa f9d8 	bl	8000204 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4613      	mov	r3, r2
 8005e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e5e:	e065      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x420>
 8005e60:	40023800 	.word	0x40023800
 8005e64:	00f42400 	.word	0x00f42400
 8005e68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	099b      	lsrs	r3, r3, #6
 8005e72:	2200      	movs	r2, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	4611      	mov	r1, r2
 8005e78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e7e:	2300      	movs	r3, #0
 8005e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005e86:	4642      	mov	r2, r8
 8005e88:	464b      	mov	r3, r9
 8005e8a:	f04f 0000 	mov.w	r0, #0
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	0159      	lsls	r1, r3, #5
 8005e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e98:	0150      	lsls	r0, r2, #5
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4641      	mov	r1, r8
 8005ea0:	1a51      	subs	r1, r2, r1
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005eb8:	4659      	mov	r1, fp
 8005eba:	018b      	lsls	r3, r1, #6
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	018a      	lsls	r2, r1, #6
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	1a54      	subs	r4, r2, r1
 8005eca:	4659      	mov	r1, fp
 8005ecc:	eb63 0501 	sbc.w	r5, r3, r1
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	00eb      	lsls	r3, r5, #3
 8005eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ede:	00e2      	lsls	r2, r4, #3
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	4643      	mov	r3, r8
 8005ee6:	18e3      	adds	r3, r4, r3
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	464b      	mov	r3, r9
 8005eec:	eb45 0303 	adc.w	r3, r5, r3
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005efe:	4629      	mov	r1, r5
 8005f00:	028b      	lsls	r3, r1, #10
 8005f02:	4621      	mov	r1, r4
 8005f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f08:	4621      	mov	r1, r4
 8005f0a:	028a      	lsls	r2, r1, #10
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f14:	2200      	movs	r2, #0
 8005f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f18:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f1e:	f7fa f971 	bl	8000204 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4613      	mov	r3, r2
 8005f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	0f1b      	lsrs	r3, r3, #28
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f4a:	e003      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	37b8      	adds	r7, #184	@ 0xb8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00f42400 	.word	0x00f42400

08005f6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e28d      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8083 	beq.w	8006092 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f8c:	4b94      	ldr	r3, [pc, #592]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d019      	beq.n	8005fcc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f98:	4b91      	ldr	r3, [pc, #580]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fb0:	d00c      	beq.n	8005fcc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d112      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fbe:	4b88      	ldr	r3, [pc, #544]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	4b84      	ldr	r3, [pc, #528]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05b      	beq.n	8006090 <HAL_RCC_OscConfig+0x124>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d157      	bne.n	8006090 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e25a      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fec:	d106      	bne.n	8005ffc <HAL_RCC_OscConfig+0x90>
 8005fee:	4b7c      	ldr	r3, [pc, #496]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a7b      	ldr	r2, [pc, #492]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e01d      	b.n	8006038 <HAL_RCC_OscConfig+0xcc>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0xb4>
 8006006:	4b76      	ldr	r3, [pc, #472]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a75      	ldr	r2, [pc, #468]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b73      	ldr	r3, [pc, #460]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a72      	ldr	r2, [pc, #456]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e00b      	b.n	8006038 <HAL_RCC_OscConfig+0xcc>
 8006020:	4b6f      	ldr	r3, [pc, #444]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6e      	ldr	r2, [pc, #440]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	4b6c      	ldr	r3, [pc, #432]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a6b      	ldr	r2, [pc, #428]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7ff f986 	bl	8005350 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006048:	f7ff f982 	bl	8005350 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	@ 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e21f      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b61      	ldr	r3, [pc, #388]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0xdc>
 8006066:	e014      	b.n	8006092 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7ff f972 	bl	8005350 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006070:	f7ff f96e 	bl	8005350 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	@ 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e20b      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006082:	4b57      	ldr	r3, [pc, #348]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x104>
 800608e:	e000      	b.n	8006092 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d06f      	beq.n	800617e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800609e:	4b50      	ldr	r3, [pc, #320]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060aa:	4b4d      	ldr	r3, [pc, #308]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d105      	bne.n	80060c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060b6:	4b4a      	ldr	r3, [pc, #296]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c2:	4b47      	ldr	r3, [pc, #284]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d11c      	bne.n	8006108 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ce:	4b44      	ldr	r3, [pc, #272]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	4b41      	ldr	r3, [pc, #260]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_RCC_OscConfig+0x186>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1d3      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f2:	4b3b      	ldr	r3, [pc, #236]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4937      	ldr	r1, [pc, #220]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	e03a      	b.n	800617e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006110:	4b34      	ldr	r3, [pc, #208]	@ (80061e4 <HAL_RCC_OscConfig+0x278>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7ff f91b 	bl	8005350 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611e:	f7ff f917 	bl	8005350 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e1b4      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4925      	ldr	r1, [pc, #148]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <HAL_RCC_OscConfig+0x278>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7ff f8fa 	bl	8005350 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006160:	f7ff f8f6 	bl	8005350 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e193      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d036      	beq.n	80061f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006198:	f7ff f8da 	bl	8005350 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a0:	f7ff f8d6 	bl	8005350 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e173      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_RCC_OscConfig+0x274>)
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x234>
 80061be:	e01b      	b.n	80061f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c0:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c6:	f7ff f8c3 	bl	8005350 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	e00e      	b.n	80061ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ce:	f7ff f8bf 	bl	8005350 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d907      	bls.n	80061ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e15c      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
 80061e0:	40023800 	.word	0x40023800
 80061e4:	42470000 	.word	0x42470000
 80061e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80061ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ea      	bne.n	80061ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8097 	beq.w	8006334 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620a:	4b83      	ldr	r3, [pc, #524]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	4b7f      	ldr	r3, [pc, #508]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	4a7e      	ldr	r2, [pc, #504]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006224:	6413      	str	r3, [r2, #64]	@ 0x40
 8006226:	4b7c      	ldr	r3, [pc, #496]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006236:	4b79      	ldr	r3, [pc, #484]	@ (800641c <HAL_RCC_OscConfig+0x4b0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d118      	bne.n	8006274 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006242:	4b76      	ldr	r3, [pc, #472]	@ (800641c <HAL_RCC_OscConfig+0x4b0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a75      	ldr	r2, [pc, #468]	@ (800641c <HAL_RCC_OscConfig+0x4b0>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800624e:	f7ff f87f 	bl	8005350 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006256:	f7ff f87b 	bl	8005350 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e118      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006268:	4b6c      	ldr	r3, [pc, #432]	@ (800641c <HAL_RCC_OscConfig+0x4b0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x31e>
 800627c:	4b66      	ldr	r3, [pc, #408]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006280:	4a65      	ldr	r2, [pc, #404]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	@ 0x70
 8006288:	e01c      	b.n	80062c4 <HAL_RCC_OscConfig+0x358>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x340>
 8006292:	4b61      	ldr	r3, [pc, #388]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	4a60      	ldr	r2, [pc, #384]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	6713      	str	r3, [r2, #112]	@ 0x70
 800629e:	4b5e      	ldr	r3, [pc, #376]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	4a5d      	ldr	r2, [pc, #372]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0x358>
 80062ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b0:	4a59      	ldr	r2, [pc, #356]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b8:	4b57      	ldr	r3, [pc, #348]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062bc:	4a56      	ldr	r2, [pc, #344]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7ff f840 	bl	8005350 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7ff f83c 	bl	8005350 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0d7      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ee      	beq.n	80062d4 <HAL_RCC_OscConfig+0x368>
 80062f6:	e014      	b.n	8006322 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7ff f82a 	bl	8005350 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7ff f826 	bl	8005350 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0c1      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006316:	4b40      	ldr	r3, [pc, #256]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ee      	bne.n	8006300 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d105      	bne.n	8006334 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006328:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	4a3a      	ldr	r2, [pc, #232]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 800632e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006332:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80ad 	beq.w	8006498 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800633e:	4b36      	ldr	r3, [pc, #216]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b08      	cmp	r3, #8
 8006348:	d060      	beq.n	800640c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d145      	bne.n	80063de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006352:	4b33      	ldr	r3, [pc, #204]	@ (8006420 <HAL_RCC_OscConfig+0x4b4>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fe fffa 	bl	8005350 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006360:	f7fe fff6 	bl	8005350 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e093      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006372:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	3b01      	subs	r3, #1
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	061b      	lsls	r3, r3, #24
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	071b      	lsls	r3, r3, #28
 80063aa:	491b      	ldr	r1, [pc, #108]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006420 <HAL_RCC_OscConfig+0x4b4>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fe ffcb 	bl	8005350 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063be:	f7fe ffc7 	bl	8005350 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e064      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d0:	4b11      	ldr	r3, [pc, #68]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x452>
 80063dc:	e05c      	b.n	8006498 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063de:	4b10      	ldr	r3, [pc, #64]	@ (8006420 <HAL_RCC_OscConfig+0x4b4>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fe ffb4 	bl	8005350 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fe ffb0 	bl	8005350 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e04d      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <HAL_RCC_OscConfig+0x4ac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x480>
 800640a:	e045      	b.n	8006498 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e040      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
 8006418:	40023800 	.word	0x40023800
 800641c:	40007000 	.word	0x40007000
 8006420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006424:	4b1f      	ldr	r3, [pc, #124]	@ (80064a4 <HAL_RCC_OscConfig+0x538>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d030      	beq.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d129      	bne.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d122      	bne.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800645a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800645c:	4293      	cmp	r3, r2
 800645e:	d119      	bne.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d10f      	bne.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d107      	bne.n	8006494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40023800 	.word	0x40023800

080064a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e041      	b.n	800653e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa fa0c 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 f95e 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d001      	beq.n	8006560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e046      	b.n	80065ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a23      	ldr	r2, [pc, #140]	@ (80065fc <HAL_TIM_Base_Start+0xb4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d022      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d01d      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	@ (8006600 <HAL_TIM_Base_Start+0xb8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	@ (8006604 <HAL_TIM_Base_Start+0xbc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	@ (8006608 <HAL_TIM_Base_Start+0xc0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_TIM_Base_Start+0xc4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	@ (8006610 <HAL_TIM_Base_Start+0xc8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_Base_Start+0x70>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_TIM_Base_Start+0xcc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d111      	bne.n	80065dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d010      	beq.n	80065ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	e007      	b.n	80065ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40000c00 	.word	0x40000c00
 800660c:	40010400 	.word	0x40010400
 8006610:	40014000 	.word	0x40014000
 8006614:	40001800 	.word	0x40001800

08006618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e0b4      	b.n	800679e <HAL_TIM_ConfigClockSource+0x186>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xd4>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x172>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b70      	cmp	r3, #112	@ 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xa6>
 8006688:	2b70      	cmp	r3, #112	@ 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b60      	cmp	r3, #96	@ 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x11a>
 8006690:	2b60      	cmp	r3, #96	@ 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b50      	cmp	r3, #80	@ 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xfa>
 8006698:	2b50      	cmp	r3, #80	@ 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x13a>
 80066a0:	2b40      	cmp	r3, #64	@ 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b30      	cmp	r3, #48	@ 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	2b30      	cmp	r3, #48	@ 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	f000 f991 	bl	80069f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	f000 f97a 	bl	80069f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	461a      	mov	r2, r3
 8006720:	f000 f8ee 	bl	8006900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	@ 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f947 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	461a      	mov	r2, r3
 8006740:	f000 f90d 	bl	800695e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	@ 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f937 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	461a      	mov	r2, r3
 8006760:	f000 f8ce 	bl	8006900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	@ 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f927 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 f91e 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a46      	ldr	r2, [pc, #280]	@ (80068d4 <TIM_Base_SetConfig+0x12c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c6:	d00f      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a43      	ldr	r2, [pc, #268]	@ (80068d8 <TIM_Base_SetConfig+0x130>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a42      	ldr	r2, [pc, #264]	@ (80068dc <TIM_Base_SetConfig+0x134>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a41      	ldr	r2, [pc, #260]	@ (80068e0 <TIM_Base_SetConfig+0x138>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a40      	ldr	r2, [pc, #256]	@ (80068e4 <TIM_Base_SetConfig+0x13c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a35      	ldr	r2, [pc, #212]	@ (80068d4 <TIM_Base_SetConfig+0x12c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d02b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006808:	d027      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a32      	ldr	r2, [pc, #200]	@ (80068d8 <TIM_Base_SetConfig+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d023      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a31      	ldr	r2, [pc, #196]	@ (80068dc <TIM_Base_SetConfig+0x134>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01f      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a30      	ldr	r2, [pc, #192]	@ (80068e0 <TIM_Base_SetConfig+0x138>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2f      	ldr	r2, [pc, #188]	@ (80068e4 <TIM_Base_SetConfig+0x13c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d017      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2e      	ldr	r2, [pc, #184]	@ (80068e8 <TIM_Base_SetConfig+0x140>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2d      	ldr	r2, [pc, #180]	@ (80068ec <TIM_Base_SetConfig+0x144>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00f      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <TIM_Base_SetConfig+0x148>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00b      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2b      	ldr	r2, [pc, #172]	@ (80068f4 <TIM_Base_SetConfig+0x14c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d007      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2a      	ldr	r2, [pc, #168]	@ (80068f8 <TIM_Base_SetConfig+0x150>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a29      	ldr	r2, [pc, #164]	@ (80068fc <TIM_Base_SetConfig+0x154>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a10      	ldr	r2, [pc, #64]	@ (80068d4 <TIM_Base_SetConfig+0x12c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a12      	ldr	r2, [pc, #72]	@ (80068e4 <TIM_Base_SetConfig+0x13c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f023 0201 	bic.w	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	611a      	str	r2, [r3, #16]
  }
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40010400 	.word	0x40010400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800
 80068f4:	40001800 	.word	0x40001800
 80068f8:	40001c00 	.word	0x40001c00
 80068fc:	40002000 	.word	0x40002000

08006900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 030a 	bic.w	r3, r3, #10
 800693c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0210 	bic.w	r2, r3, #16
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800699a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	f043 0307 	orr.w	r3, r3, #7
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	609a      	str	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e05a      	b.n	8006b02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a98:	d01d      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10c      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40010400 	.word	0x40010400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40001800 	.word	0x40001800

08006b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e042      	b.n	8006bc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7f9 feec 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2224      	movs	r2, #36	@ 0x24
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f82b 	bl	8006bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd0:	b0c0      	sub	sp, #256	@ 0x100
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be8:	68d9      	ldr	r1, [r3, #12]
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	ea40 0301 	orr.w	r3, r0, r1
 8006bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c24:	f021 010c 	bic.w	r1, r1, #12
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c32:	430b      	orrs	r3, r1
 8006c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c46:	6999      	ldr	r1, [r3, #24]
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	ea40 0301 	orr.w	r3, r0, r1
 8006c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006e98 <UART_SetConfig+0x2cc>)
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d005      	beq.n	8006c6c <UART_SetConfig+0xa0>
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b8d      	ldr	r3, [pc, #564]	@ (8006e9c <UART_SetConfig+0x2d0>)
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d104      	bne.n	8006c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c6c:	f7fe ff3a 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8006c70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c74:	e003      	b.n	8006c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7fe ff21 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8006c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c88:	f040 810c 	bne.w	8006ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	1891      	adds	r1, r2, r2
 8006ca4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ca6:	415b      	adcs	r3, r3
 8006ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cae:	4621      	mov	r1, r4
 8006cb0:	eb12 0801 	adds.w	r8, r2, r1
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	eb43 0901 	adc.w	r9, r3, r1
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cce:	4690      	mov	r8, r2
 8006cd0:	4699      	mov	r9, r3
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	eb18 0303 	adds.w	r3, r8, r3
 8006cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cdc:	462b      	mov	r3, r5
 8006cde:	eb49 0303 	adc.w	r3, r9, r3
 8006ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	18db      	adds	r3, r3, r3
 8006cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d00:	4613      	mov	r3, r2
 8006d02:	eb42 0303 	adc.w	r3, r2, r3
 8006d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d10:	f7f9 fa78 	bl	8000204 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4b61      	ldr	r3, [pc, #388]	@ (8006ea0 <UART_SetConfig+0x2d4>)
 8006d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	011c      	lsls	r4, r3, #4
 8006d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	1891      	adds	r1, r2, r2
 8006d3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d3c:	415b      	adcs	r3, r3
 8006d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d44:	4641      	mov	r1, r8
 8006d46:	eb12 0a01 	adds.w	sl, r2, r1
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d64:	4692      	mov	sl, r2
 8006d66:	469b      	mov	fp, r3
 8006d68:	4643      	mov	r3, r8
 8006d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d72:	464b      	mov	r3, r9
 8006d74:	eb4b 0303 	adc.w	r3, fp, r3
 8006d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d90:	460b      	mov	r3, r1
 8006d92:	18db      	adds	r3, r3, r3
 8006d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d96:	4613      	mov	r3, r2
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006da6:	f7f9 fa2d 	bl	8000204 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea0 <UART_SetConfig+0x2d4>)
 8006db2:	fba3 2301 	umull	r2, r3, r3, r1
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2264      	movs	r2, #100	@ 0x64
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	1acb      	subs	r3, r1, r3
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dc6:	4b36      	ldr	r3, [pc, #216]	@ (8006ea0 <UART_SetConfig+0x2d4>)
 8006dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dd4:	441c      	add	r4, r3
 8006dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006de0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006df0:	415b      	adcs	r3, r3
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006df8:	4641      	mov	r1, r8
 8006dfa:	1851      	adds	r1, r2, r1
 8006dfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dfe:	4649      	mov	r1, r9
 8006e00:	414b      	adcs	r3, r1
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e10:	4659      	mov	r1, fp
 8006e12:	00cb      	lsls	r3, r1, #3
 8006e14:	4651      	mov	r1, sl
 8006e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	00ca      	lsls	r2, r1, #3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	4642      	mov	r2, r8
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	460a      	mov	r2, r1
 8006e30:	eb42 0303 	adc.w	r3, r2, r3
 8006e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	18db      	adds	r3, r3, r3
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e52:	4613      	mov	r3, r2
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e62:	f7f9 f9cf 	bl	8000204 <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <UART_SetConfig+0x2d4>)
 8006e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	2164      	movs	r1, #100	@ 0x64
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	3332      	adds	r3, #50	@ 0x32
 8006e7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ea0 <UART_SetConfig+0x2d4>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f003 0207 	and.w	r2, r3, #7
 8006e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4422      	add	r2, r4
 8006e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e94:	e106      	b.n	80070a4 <UART_SetConfig+0x4d8>
 8006e96:	bf00      	nop
 8006e98:	40011000 	.word	0x40011000
 8006e9c:	40011400 	.word	0x40011400
 8006ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	464b      	mov	r3, r9
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	6239      	str	r1, [r7, #32]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	1854      	adds	r4, r2, r1
 8006eca:	4649      	mov	r1, r9
 8006ecc:	eb43 0501 	adc.w	r5, r3, r1
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	00eb      	lsls	r3, r5, #3
 8006eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ede:	00e2      	lsls	r2, r4, #3
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	18e3      	adds	r3, r4, r3
 8006ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006eec:	464b      	mov	r3, r9
 8006eee:	eb45 0303 	adc.w	r3, r5, r3
 8006ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f12:	4629      	mov	r1, r5
 8006f14:	008b      	lsls	r3, r1, #2
 8006f16:	4621      	mov	r1, r4
 8006f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	008a      	lsls	r2, r1, #2
 8006f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f24:	f7f9 f96e 	bl	8000204 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4b60      	ldr	r3, [pc, #384]	@ (80070b0 <UART_SetConfig+0x4e4>)
 8006f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	011c      	lsls	r4, r3, #4
 8006f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	1891      	adds	r1, r2, r2
 8006f4e:	61b9      	str	r1, [r7, #24]
 8006f50:	415b      	adcs	r3, r3
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f58:	4641      	mov	r1, r8
 8006f5a:	1851      	adds	r1, r2, r1
 8006f5c:	6139      	str	r1, [r7, #16]
 8006f5e:	4649      	mov	r1, r9
 8006f60:	414b      	adcs	r3, r1
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f70:	4659      	mov	r1, fp
 8006f72:	00cb      	lsls	r3, r1, #3
 8006f74:	4651      	mov	r1, sl
 8006f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	00ca      	lsls	r2, r1, #3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	4642      	mov	r2, r8
 8006f86:	189b      	adds	r3, r3, r2
 8006f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	460a      	mov	r2, r1
 8006f90:	eb42 0303 	adc.w	r3, r2, r3
 8006f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	008b      	lsls	r3, r1, #2
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fba:	4641      	mov	r1, r8
 8006fbc:	008a      	lsls	r2, r1, #2
 8006fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fc2:	f7f9 f91f 	bl	8000204 <__aeabi_uldivmod>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4b38      	ldr	r3, [pc, #224]	@ (80070b0 <UART_SetConfig+0x4e4>)
 8006fce:	fba3 2301 	umull	r2, r3, r3, r1
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	2264      	movs	r2, #100	@ 0x64
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	1acb      	subs	r3, r1, r3
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	3332      	adds	r3, #50	@ 0x32
 8006fe0:	4a33      	ldr	r2, [pc, #204]	@ (80070b0 <UART_SetConfig+0x4e4>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fec:	441c      	add	r4, r3
 8006fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ff6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	1891      	adds	r1, r2, r2
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	415b      	adcs	r3, r3
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800700c:	4641      	mov	r1, r8
 800700e:	1851      	adds	r1, r2, r1
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	4649      	mov	r1, r9
 8007014:	414b      	adcs	r3, r1
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007024:	4659      	mov	r1, fp
 8007026:	00cb      	lsls	r3, r1, #3
 8007028:	4651      	mov	r1, sl
 800702a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800702e:	4651      	mov	r1, sl
 8007030:	00ca      	lsls	r2, r1, #3
 8007032:	4610      	mov	r0, r2
 8007034:	4619      	mov	r1, r3
 8007036:	4603      	mov	r3, r0
 8007038:	4642      	mov	r2, r8
 800703a:	189b      	adds	r3, r3, r2
 800703c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800703e:	464b      	mov	r3, r9
 8007040:	460a      	mov	r2, r1
 8007042:	eb42 0303 	adc.w	r3, r2, r3
 8007046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	663b      	str	r3, [r7, #96]	@ 0x60
 8007052:	667a      	str	r2, [r7, #100]	@ 0x64
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007060:	4649      	mov	r1, r9
 8007062:	008b      	lsls	r3, r1, #2
 8007064:	4641      	mov	r1, r8
 8007066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800706a:	4641      	mov	r1, r8
 800706c:	008a      	lsls	r2, r1, #2
 800706e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007072:	f7f9 f8c7 	bl	8000204 <__aeabi_uldivmod>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <UART_SetConfig+0x4e4>)
 800707c:	fba3 1302 	umull	r1, r3, r3, r2
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	2164      	movs	r1, #100	@ 0x64
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	3332      	adds	r3, #50	@ 0x32
 800708e:	4a08      	ldr	r2, [pc, #32]	@ (80070b0 <UART_SetConfig+0x4e4>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4422      	add	r2, r4
 80070a2:	609a      	str	r2, [r3, #8]
}
 80070a4:	bf00      	nop
 80070a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070aa:	46bd      	mov	sp, r7
 80070ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b0:	51eb851f 	.word	0x51eb851f

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <__libc_init_array>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	4d0d      	ldr	r5, [pc, #52]	@ (80070fc <__libc_init_array+0x38>)
 80070c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007100 <__libc_init_array+0x3c>)
 80070ca:	1b64      	subs	r4, r4, r5
 80070cc:	10a4      	asrs	r4, r4, #2
 80070ce:	2600      	movs	r6, #0
 80070d0:	42a6      	cmp	r6, r4
 80070d2:	d109      	bne.n	80070e8 <__libc_init_array+0x24>
 80070d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007104 <__libc_init_array+0x40>)
 80070d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007108 <__libc_init_array+0x44>)
 80070d8:	f000 f818 	bl	800710c <_init>
 80070dc:	1b64      	subs	r4, r4, r5
 80070de:	10a4      	asrs	r4, r4, #2
 80070e0:	2600      	movs	r6, #0
 80070e2:	42a6      	cmp	r6, r4
 80070e4:	d105      	bne.n	80070f2 <__libc_init_array+0x2e>
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ec:	4798      	blx	r3
 80070ee:	3601      	adds	r6, #1
 80070f0:	e7ee      	b.n	80070d0 <__libc_init_array+0xc>
 80070f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f6:	4798      	blx	r3
 80070f8:	3601      	adds	r6, #1
 80070fa:	e7f2      	b.n	80070e2 <__libc_init_array+0x1e>
 80070fc:	08008020 	.word	0x08008020
 8007100:	08008020 	.word	0x08008020
 8007104:	08008020 	.word	0x08008020
 8007108:	08008024 	.word	0x08008024

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
