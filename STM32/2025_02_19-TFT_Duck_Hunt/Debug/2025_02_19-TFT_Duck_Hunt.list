
2025_02_19-TFT_Duck_Hunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004b534  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805359c  0805359c  00055068  2**0
                  CONTENTS
  4 .ARM          00000008  0805359c  0805359c  0005459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080535a4  080535a4  00055068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080535a4  080535a4  000545a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080535a8  080535a8  000545a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080535ac  00055000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08053614  00055068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08053614  00055340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00055068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011547  00000000  00000000  00055098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002309  00000000  00000000  000665df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000688e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000232ed  00000000  00000000  00069940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134da  00000000  00000000  0008cc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dea2e  00000000  00000000  000a0107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0017eb35  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000cb9  00000000  00000000  0017eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048b0  00000000  00000000  0017f834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001840e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008050 	.word	0x08008050

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08008050 	.word	0x08008050

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f004 fffb 	bl	80054f4 <HAL_Init>
 80004fe:	2301      	movs	r3, #1
 8000500:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f383 8811 	msr	BASEPRI, r3
}
 8000508:	bf00      	nop
  // __set_PRIMASK (0);	// Nível Primask para Interrupção
  // __set_FAULTMASK (0);	// Nível Faultmask para Interrupção
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fb93 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fd1d 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 fcf1 	bl	8000ef8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000516:	f000 fc9f 	bl	8000e58 <MX_TIM1_Init>
  MX_ADC1_Init();
 800051a:	f000 fbf9 	bl	8000d10 <MX_ADC1_Init>
  MX_ADC2_Init();
 800051e:	f000 fc49 	bl	8000db4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //Sequência de inicialização do LCD
  tft_gpio_init(); //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 8000522:	f004 fdbb 	bl	800509c <tft_gpio_init>
  HAL_TIM_Base_Start(&htim1); //Inicializa o Timer1 (base de tempo de us do LCD)
 8000526:	482d      	ldr	r0, [pc, #180]	@ (80005dc <main+0xe8>)
 8000528:	f006 fd9a 	bl	8007060 <HAL_TIM_Base_Start>
  ID = tft_readID(); //Lê o ID do LCD (poderia ser chamada pela inicialização do LCD)
 800052c:	f003 fb36 	bl	8003b9c <tft_readID>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <main+0xec>)
 8000536:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000538:	2064      	movs	r0, #100	@ 0x64
 800053a:	f005 f84d 	bl	80055d8 <HAL_Delay>
  tft_init (ID); //Inicializa o LCD de acordo com seu ID
 800053e:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <main+0xec>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ffa2 	bl	800348c <tft_init>
  tft_setRotation(3); //Ajusta a orientação da tela
 8000548:	2003      	movs	r0, #3
 800054a:	f003 fc67 	bl	8003e1c <tft_setRotation>
  tft_fillScreen(BLACK); //Preenche a tela em uma só cor
 800054e:	2000      	movs	r0, #0
 8000550:	f004 fcce 	bl	8004ef0 <tft_fillScreen>

  // Imprime no TFT o fundo da Imagem
  tft_drawRGBBitmap(1, 240, Duck, 320, 240);
 8000554:	23f0      	movs	r3, #240	@ 0xf0
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800055c:	4a21      	ldr	r2, [pc, #132]	@ (80005e4 <main+0xf0>)
 800055e:	21f0      	movs	r1, #240	@ 0xf0
 8000560:	2001      	movs	r0, #1
 8000562:	f004 fe0d 	bl	8005180 <tft_drawRGBBitmap>

  //Teste de Crição da Matriz do Objeto
  HAL_Delay(1000);	// Aguarda 1 segundo
 8000566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056a:	f005 f835 	bl	80055d8 <HAL_Delay>

  n_Object = 0;
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <main+0xf4>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
  /* Análise e geração de matriz dinâmica para objeto*/
  for (i = 0; i < 76800; i++) // Percorre o tamanho da imagem
 8000574:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <main+0xf8>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e012      	b.n	80005a2 <main+0xae>
  {
	  if(Target[i] != 0xFFFF)	// Procura elementos diferentes de Branco
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <main+0xf8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	@ (80005f0 <main+0xfc>)
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800058a:	4293      	cmp	r3, r2
 800058c:	d004      	beq.n	8000598 <main+0xa4>
	  {
		  n_Object++;	// Incrementa tamanho do
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <main+0xf4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	4a14      	ldr	r2, [pc, #80]	@ (80005e8 <main+0xf4>)
 8000596:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 76800; i++) // Percorre o tamanho da imagem
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <main+0xf8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <main+0xf8>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <main+0xf8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80005aa:	dbe7      	blt.n	800057c <main+0x88>
  // Informa o tamanho da matriz e quantidade de bytes ocupados pela serial de debug
//  sprintf(&Transmissao,"A Matriz Object Possui: %u Elemetros com %u bytes.\r\n", n_Object, (n_Object*32));
//  HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);

  // Cria Matriz dinâmico para guardar Pixels e Endereços da Imagem Flutuante
  Element *arr_Object = (Element *)malloc(n_Object * sizeof(Element));
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <main+0xf4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 fc52 	bl	8007e5c <malloc>
 80005b8:	4603      	mov	r3, r0
 80005ba:	60bb      	str	r3, [r7, #8]
  Element *arr_Recovery = (Element *)malloc(n_Object * sizeof(Element));
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <main+0xf4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f007 fc4a 	bl	8007e5c <malloc>
 80005c8:	4603      	mov	r3, r0
 80005ca:	607b      	str	r3, [r7, #4]
  n_Object = 0;
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <main+0xf4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 76800; i++) // Percorre o tamanho da imagem
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <main+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e0f3      	b.n	80007c2 <main+0x2ce>
 80005da:	bf00      	nop
 80005dc:	20000118 	.word	0x20000118
 80005e0:	20000084 	.word	0x20000084
 80005e4:	08008080 	.word	0x08008080
 80005e8:	200001b4 	.word	0x200001b4
 80005ec:	200001a8 	.word	0x200001a8
 80005f0:	0802d880 	.word	0x0802d880
  {
	  if(Target[i] != 0xFFFF)	// Procura elementos diferentes de Branco
 80005f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000874 <main+0x380>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a9f      	ldr	r2, [pc, #636]	@ (8000878 <main+0x384>)
 80005fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000602:	4293      	cmp	r3, r2
 8000604:	f000 80d8 	beq.w	80007b8 <main+0x2c4>
	  {
		  arr_Object[n_Object].address = (i+1);	// Insere o endereço do vetor do pixel linha n_Object da Matriz
 8000608:	4b9a      	ldr	r3, [pc, #616]	@ (8000874 <main+0x380>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b9b      	ldr	r3, [pc, #620]	@ (800087c <main+0x388>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	440b      	add	r3, r1
 8000616:	3201      	adds	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
		  arr_Recovery[n_Object].address = (i+1);	// Guarda o endereço do vetor do pixel linha n_Object da Matriz
 800061a:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <main+0x380>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b97      	ldr	r3, [pc, #604]	@ (800087c <main+0x388>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	440b      	add	r3, r1
 8000628:	3201      	adds	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
		  arr_Object[n_Object].address_x = ((i+1)-((i/320)*320));	// Insere o endereço y do pixel linha n_Object da Matriz
 800062c:	4b91      	ldr	r3, [pc, #580]	@ (8000874 <main+0x380>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1c59      	adds	r1, r3, #1
 8000632:	4b90      	ldr	r3, [pc, #576]	@ (8000874 <main+0x380>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a92      	ldr	r2, [pc, #584]	@ (8000880 <main+0x38c>)
 8000638:	fb82 0203 	smull	r0, r2, r2, r3
 800063c:	11d2      	asrs	r2, r2, #7
 800063e:	17db      	asrs	r3, r3, #31
 8000640:	1a9a      	subs	r2, r3, r2
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	019b      	lsls	r3, r3, #6
 800064a:	4618      	mov	r0, r3
 800064c:	4b8b      	ldr	r3, [pc, #556]	@ (800087c <main+0x388>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	180a      	adds	r2, r1, r0
 8000658:	605a      	str	r2, [r3, #4]
		  arr_Recovery[n_Object].address_x = ((i+1)-((i/320)*320));	// Guarda o endereço do vetor do pixel linha n_Object da Matriz
 800065a:	4b86      	ldr	r3, [pc, #536]	@ (8000874 <main+0x380>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c59      	adds	r1, r3, #1
 8000660:	4b84      	ldr	r3, [pc, #528]	@ (8000874 <main+0x380>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a86      	ldr	r2, [pc, #536]	@ (8000880 <main+0x38c>)
 8000666:	fb82 0203 	smull	r0, r2, r2, r3
 800066a:	11d2      	asrs	r2, r2, #7
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1a9a      	subs	r2, r3, r2
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	019b      	lsls	r3, r3, #6
 8000678:	4618      	mov	r0, r3
 800067a:	4b80      	ldr	r3, [pc, #512]	@ (800087c <main+0x388>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	180a      	adds	r2, r1, r0
 8000686:	605a      	str	r2, [r3, #4]
		  // Guarda Valores de endereço x máximo e mínimo
		  if(x_pixel_max <= arr_Object[n_Object].address_x)
 8000688:	4b7c      	ldr	r3, [pc, #496]	@ (800087c <main+0x388>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b7b      	ldr	r3, [pc, #492]	@ (8000884 <main+0x390>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	db07      	blt.n	80006ac <main+0x1b8>
		  {
			  x_pixel_max = arr_Object[n_Object].address_x;
 800069c:	4b77      	ldr	r3, [pc, #476]	@ (800087c <main+0x388>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a76      	ldr	r2, [pc, #472]	@ (8000884 <main+0x390>)
 80006aa:	6013      	str	r3, [r2, #0]
		  }
		  if(x_pixel_min >= arr_Object[n_Object].address_x)
 80006ac:	4b73      	ldr	r3, [pc, #460]	@ (800087c <main+0x388>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	4b73      	ldr	r3, [pc, #460]	@ (8000888 <main+0x394>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dc07      	bgt.n	80006d0 <main+0x1dc>
		  {
			  x_pixel_min = arr_Object[n_Object].address_x;
 80006c0:	4b6e      	ldr	r3, [pc, #440]	@ (800087c <main+0x388>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4a6e      	ldr	r2, [pc, #440]	@ (8000888 <main+0x394>)
 80006ce:	6013      	str	r3, [r2, #0]
		  }
		  arr_Object[n_Object].address_y = ((i+1)/320);	// Insere o endereço y do pixel linha n_Object da Matriz
 80006d0:	4b68      	ldr	r3, [pc, #416]	@ (8000874 <main+0x380>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a69      	ldr	r2, [pc, #420]	@ (800087c <main+0x388>)
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	68b9      	ldr	r1, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4967      	ldr	r1, [pc, #412]	@ (8000880 <main+0x38c>)
 80006e2:	fb81 0103 	smull	r0, r1, r1, r3
 80006e6:	11c9      	asrs	r1, r1, #7
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1acb      	subs	r3, r1, r3
 80006ec:	6093      	str	r3, [r2, #8]
		  arr_Recovery[n_Object].address_y = ((i+1)/320);	// Insere o endereço y do pixel linha n_Object da Matriz
 80006ee:	4b61      	ldr	r3, [pc, #388]	@ (8000874 <main+0x380>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a61      	ldr	r2, [pc, #388]	@ (800087c <main+0x388>)
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	440a      	add	r2, r1
 80006fe:	4960      	ldr	r1, [pc, #384]	@ (8000880 <main+0x38c>)
 8000700:	fb81 0103 	smull	r0, r1, r1, r3
 8000704:	11c9      	asrs	r1, r1, #7
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1acb      	subs	r3, r1, r3
 800070a:	6093      	str	r3, [r2, #8]
		  // Guarda Valores de endereço y máximo e mínimo
		  if(y_pixel_max <= arr_Object[n_Object].address_y)
 800070c:	4b5b      	ldr	r3, [pc, #364]	@ (800087c <main+0x388>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	4b5c      	ldr	r3, [pc, #368]	@ (800088c <main+0x398>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	db07      	blt.n	8000730 <main+0x23c>
		  {
			  y_pixel_max = arr_Object[n_Object].address_y;
 8000720:	4b56      	ldr	r3, [pc, #344]	@ (800087c <main+0x388>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4413      	add	r3, r2
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	4a57      	ldr	r2, [pc, #348]	@ (800088c <main+0x398>)
 800072e:	6013      	str	r3, [r2, #0]
		  }
		  if(y_pixel_min >= arr_Object[n_Object].address_y)
 8000730:	4b52      	ldr	r3, [pc, #328]	@ (800087c <main+0x388>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	4413      	add	r3, r2
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <main+0x39c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	dc07      	bgt.n	8000754 <main+0x260>
		  {
			  y_pixel_min = arr_Object[n_Object].address_y;
 8000744:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <main+0x388>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	4413      	add	r3, r2
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <main+0x39c>)
 8000752:	6013      	str	r3, [r2, #0]
		  }
		  arr_Object[n_Object].data = Target[i]; // Insere o valor do pixel linha n_Object da Matriz
 8000754:	4b47      	ldr	r3, [pc, #284]	@ (8000874 <main+0x380>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b48      	ldr	r3, [pc, #288]	@ (800087c <main+0x388>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	011b      	lsls	r3, r3, #4
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	440b      	add	r3, r1
 8000762:	4945      	ldr	r1, [pc, #276]	@ (8000878 <main+0x384>)
 8000764:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000768:	819a      	strh	r2, [r3, #12]
		  arr_Recovery[n_Object].data = Duck[i]; // Guarda o valor do pixel linha n_Object da Matriz
 800076a:	4b42      	ldr	r3, [pc, #264]	@ (8000874 <main+0x380>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b43      	ldr	r3, [pc, #268]	@ (800087c <main+0x388>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	440b      	add	r3, r1
 8000778:	4946      	ldr	r1, [pc, #280]	@ (8000894 <main+0x3a0>)
 800077a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800077e:	819a      	strh	r2, [r3, #12]
		  // imprime objeto no TFT
		  tft_drawPixel(arr_Object[n_Object].address_x, arr_Object[n_Object].address_y, arr_Object[n_Object].data);
 8000780:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <main+0x388>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	4413      	add	r3, r2
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	b218      	sxth	r0, r3
 800078e:	4b3b      	ldr	r3, [pc, #236]	@ (800087c <main+0x388>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	4413      	add	r3, r2
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	b219      	sxth	r1, r3
 800079c:	4b37      	ldr	r3, [pc, #220]	@ (800087c <main+0x388>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	4413      	add	r3, r2
 80007a6:	899b      	ldrh	r3, [r3, #12]
 80007a8:	461a      	mov	r2, r3
 80007aa:	f003 fdbf 	bl	800432c <tft_drawPixel>
//		  arr_Object[n_Object].address_x, arr_Object[n_Object].address_y, arr_Object[n_Object].address, arr_Object[n_Object].data);
//		  HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);
//		  sprintf(&Transmissao,"Fundo: x %u | y %u | vetor %X | valor %X.\r\n",
//		  arr_Recovery[n_Object].address_x, arr_Recovery[n_Object].address_y, arr_Recovery[n_Object].address, arr_Recovery[n_Object].data);
//		  HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);
		  n_Object++;	// Incrementa tamanho do tamanho da matriz
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <main+0x388>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a31      	ldr	r2, [pc, #196]	@ (800087c <main+0x388>)
 80007b6:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 76800; i++) // Percorre o tamanho da imagem
 80007b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <main+0x380>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a2d      	ldr	r2, [pc, #180]	@ (8000874 <main+0x380>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000874 <main+0x380>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80007ca:	f6ff af13 	blt.w	80005f4 <main+0x100>
	  }
  }
  // Obtem os a posição central do objeto
  cx_pixel = ((x_pixel_max - x_pixel_min)/2);
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <main+0x390>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <main+0x394>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	0fda      	lsrs	r2, r3, #31
 80007da:	4413      	add	r3, r2
 80007dc:	105b      	asrs	r3, r3, #1
 80007de:	461a      	mov	r2, r3
 80007e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <main+0x3a4>)
 80007e2:	601a      	str	r2, [r3, #0]
  cy_pixel = ((y_pixel_max - y_pixel_min)/2);
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <main+0x398>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <main+0x39c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	0fda      	lsrs	r2, r3, #31
 80007f0:	4413      	add	r3, r2
 80007f2:	105b      	asrs	r3, r3, #1
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <main+0x3a8>)
 80007f8:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // tratamento da interrupção (Botão PB1 - tiro)
	 if(shot == 1)	// Caso a interrupção tenha sido ativada, o valor de shot será 1
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <main+0x3ac>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10d      	bne.n	8000820 <main+0x32c>
	 {
		 tft_drawCircle(cx_pixel, cy_pixel, 5, RED);	// imprime um círculo de 5 pixel de diâmetro no centro do objeto
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <main+0x3a4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	b218      	sxth	r0, r3
 800080a:	4b24      	ldr	r3, [pc, #144]	@ (800089c <main+0x3a8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	b219      	sxth	r1, r3
 8000810:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000814:	2205      	movs	r2, #5
 8000816:	f004 f85b 	bl	80048d0 <tft_drawCircle>
		 shot = 0;	// limpa flag
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <main+0x3ac>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	 }

	 // Leitura dos valores do Joystick x e y (valores centrais por volta de 25 contagens com valores entre 0 e 255)
	 cad_ch = 1; // Seleciona o canal
 8000820:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <main+0x3b0>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
	 cad_x = ADC_Value(cad_ch);	// Envia número de canal a função e guarda o valor lido na variável cad_x
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <main+0x3b0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fc43 	bl	80010b8 <ADC_Value>
 8000832:	4603      	mov	r3, r0
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <main+0x3b4>)
 8000838:	701a      	strb	r2, [r3, #0]
//	 sprintf(&Transmissao,"ADC X = %u V.\r\n", cad_x);
//	 HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);
//	 HAL_Delay(1000);

	 cad_ch = 2; // Seleciona o canal
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <main+0x3b0>)
 800083c:	2202      	movs	r2, #2
 800083e:	701a      	strb	r2, [r3, #0]
	 cad_y = ADC_Value(cad_ch);		// Envia número de canal a função e guarda o valor lido na variável cad_y
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <main+0x3b0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fc36 	bl	80010b8 <ADC_Value>
 800084c:	4603      	mov	r3, r0
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <main+0x3b8>)
 8000852:	701a      	strb	r2, [r3, #0]
//	 sprintf(&Transmissao,"ADC Y = %u V.\r\n", cad_y);
//	 HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);
//	 HAL_Delay(1000);

	 // Ajuste de Sensibilidade de velocidade de deslocamento x
	 if(cad_x >= 7 && cad_x <= 10)	// baixa sensibilidade
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <main+0x3b4>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b06      	cmp	r3, #6
 800085c:	d92a      	bls.n	80008b4 <main+0x3c0>
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <main+0x3b4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b0a      	cmp	r3, #10
 8000866:	d825      	bhi.n	80008b4 <main+0x3c0>
	 {
		 shift_x = -2;	// deloca 2 posições esquerda
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <main+0x3bc>)
 800086a:	f06f 0201 	mvn.w	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e048      	b.n	8000904 <main+0x410>
 8000872:	bf00      	nop
 8000874:	200001a8 	.word	0x200001a8
 8000878:	0802d880 	.word	0x0802d880
 800087c:	200001b4 	.word	0x200001b4
 8000880:	66666667 	.word	0x66666667
 8000884:	200001b8 	.word	0x200001b8
 8000888:	20000000 	.word	0x20000000
 800088c:	200001bc 	.word	0x200001bc
 8000890:	20000004 	.word	0x20000004
 8000894:	08008080 	.word	0x08008080
 8000898:	200001c0 	.word	0x200001c0
 800089c:	200001c4 	.word	0x200001c4
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200001ac 	.word	0x200001ac
 80008a8:	200001ae 	.word	0x200001ae
 80008ac:	200001af 	.word	0x200001af
 80008b0:	200001c8 	.word	0x200001c8
	 }
	 else if(cad_x >= 0 && cad_x <= 6)	// alta sensibilidade
 80008b4:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <main+0x528>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4b58      	ldr	r3, [pc, #352]	@ (8000a1c <main+0x528>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d804      	bhi.n	80008cc <main+0x3d8>
	 {
		 shift_x = -10;	// deloca 10 posições esquerda
 80008c2:	4b57      	ldr	r3, [pc, #348]	@ (8000a20 <main+0x52c>)
 80008c4:	f06f 0209 	mvn.w	r2, #9
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e01b      	b.n	8000904 <main+0x410>
	 }
	 else if(cad_x >= 26  && cad_x <= 35)		// baixa sensibilidade
 80008cc:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <main+0x528>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b19      	cmp	r3, #25
 80008d4:	d908      	bls.n	80008e8 <main+0x3f4>
 80008d6:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <main+0x528>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b23      	cmp	r3, #35	@ 0x23
 80008de:	d803      	bhi.n	80008e8 <main+0x3f4>
	 {
		 shift_x = 2;	// deloca 2 posições direita
 80008e0:	4b4f      	ldr	r3, [pc, #316]	@ (8000a20 <main+0x52c>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	e00d      	b.n	8000904 <main+0x410>
	 }
	 else if(cad_x >= 35 && cad_x <= 255)	// alta sensibilidade
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <main+0x528>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b22      	cmp	r3, #34	@ 0x22
 80008f0:	d905      	bls.n	80008fe <main+0x40a>
 80008f2:	4b4a      	ldr	r3, [pc, #296]	@ (8000a1c <main+0x528>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
	 {
		 shift_x = 10;	// deloca 10 posições direita
 80008f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000a20 <main+0x52c>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e002      	b.n	8000904 <main+0x410>
	 }
	 else	// zona entre 11 e 49
	 {
		 shift_x = 0;	// inativa (controle de ruído)
 80008fe:	4b48      	ldr	r3, [pc, #288]	@ (8000a20 <main+0x52c>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	 }
	 // Ajuste de Sensibilidade de velocidade de deslocamento y
	 if(cad_y >= 7 && cad_y <= 10)	// baixa sensibilidade
 8000904:	4b47      	ldr	r3, [pc, #284]	@ (8000a24 <main+0x530>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b06      	cmp	r3, #6
 800090c:	d909      	bls.n	8000922 <main+0x42e>
 800090e:	4b45      	ldr	r3, [pc, #276]	@ (8000a24 <main+0x530>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b0a      	cmp	r3, #10
 8000916:	d804      	bhi.n	8000922 <main+0x42e>
	 {
		 shift_y = -2;	// deloca 2 posições cima
 8000918:	4b43      	ldr	r3, [pc, #268]	@ (8000a28 <main+0x534>)
 800091a:	f06f 0201 	mvn.w	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e027      	b.n	8000972 <main+0x47e>
	 }
	 else if(cad_y >= 0 && cad_y <= 6)	// alta sensibilidade
 8000922:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <main+0x530>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <main+0x530>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b06      	cmp	r3, #6
 800092e:	d804      	bhi.n	800093a <main+0x446>
	 {
		 shift_y = -10;	// deloca 10 posições cima
 8000930:	4b3d      	ldr	r3, [pc, #244]	@ (8000a28 <main+0x534>)
 8000932:	f06f 0209 	mvn.w	r2, #9
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e01b      	b.n	8000972 <main+0x47e>
	 }
	 else if(cad_y >= 26  && cad_y <= 35)	// baixa sensibilidade
 800093a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a24 <main+0x530>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b19      	cmp	r3, #25
 8000942:	d908      	bls.n	8000956 <main+0x462>
 8000944:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <main+0x530>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b23      	cmp	r3, #35	@ 0x23
 800094c:	d803      	bhi.n	8000956 <main+0x462>
	 {
		 shift_y = 2;	// deloca 2 posições baixo
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <main+0x534>)
 8000950:	2202      	movs	r2, #2
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	e00d      	b.n	8000972 <main+0x47e>
	 }
	 else if(cad_y >= 36 && cad_y <= 255)	// alta sensibilidade
 8000956:	4b33      	ldr	r3, [pc, #204]	@ (8000a24 <main+0x530>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b23      	cmp	r3, #35	@ 0x23
 800095e:	d905      	bls.n	800096c <main+0x478>
 8000960:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <main+0x530>)
 8000962:	781b      	ldrb	r3, [r3, #0]
	 {
		 shift_y = 10;	// deloca 10 posições baixo
 8000964:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <main+0x534>)
 8000966:	220a      	movs	r2, #10
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e002      	b.n	8000972 <main+0x47e>
	 }
	 else	// zona entre 11 e 49
	 {
		 shift_y = 0;	// inativa (controle de ruído)
 800096c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <main+0x534>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
	 }

	 // tratamento de deslocamento da imagem
	 if(shift_x != 0 || shift_y != 0)	//	Caso sensibilidade do ADC seja diferente de 0
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <main+0x52c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d104      	bne.n	8000984 <main+0x490>
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <main+0x534>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f43f af3b 	beq.w	80007fa <main+0x306>
//		sprintf(&Transmissao,"Deslicamento: x %u | y %u.\r\n",
//		shift_x, shift_y);
//		HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);

		// Checa se os valores somados ao deslocamento estão fora das dimenões do TFT
		if((x_pixel_min + shift_x) >= 0 && (x_pixel_max + shift_x) <= 320 &&
 8000984:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <main+0x538>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <main+0x52c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4413      	add	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f6ff af33 	blt.w	80007fa <main+0x306>
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <main+0x53c>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <main+0x52c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4413      	add	r3, r2
 800099e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009a2:	f73f af2a 	bgt.w	80007fa <main+0x306>
		   (y_pixel_min + shift_y) >= 0 && (y_pixel_max + shift_y) <= 240)
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <main+0x540>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <main+0x534>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
		if((x_pixel_min + shift_x) >= 0 && (x_pixel_max + shift_x) <= 320 &&
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f6ff af22 	blt.w	80007fa <main+0x306>
		   (y_pixel_min + shift_y) >= 0 && (y_pixel_max + shift_y) <= 240)
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <main+0x544>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <main+0x534>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c2:	f73f af1a 	bgt.w	80007fa <main+0x306>
		{
			// Caso estejam dentro, segue o loop

			for (i = 0; i < n_Object; i++) // Percorre o tamanho do objeto
 80009c6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <main+0x548>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e01b      	b.n	8000a06 <main+0x512>
			{
				// Imprime matriz recovery (posições atuais da matriz objeto, com dados do fundo) - Apaga objeto anterior
				tft_drawPixel(arr_Recovery[i].address_x, arr_Recovery[i].address_y, arr_Recovery[i].data);
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <main+0x548>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	b218      	sxth	r0, r3
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <main+0x548>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	b219      	sxth	r1, r3
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <main+0x548>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	011b      	lsls	r3, r3, #4
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	899b      	ldrh	r3, [r3, #12]
 80009f6:	461a      	mov	r2, r3
 80009f8:	f003 fc98 	bl	800432c <tft_drawPixel>
			for (i = 0; i < n_Object; i++) // Percorre o tamanho do objeto
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <main+0x548>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <main+0x548>)
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <main+0x548>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <main+0x54c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbdd      	blt.n	80009ce <main+0x4da>
//			    arr_Recovery[i].address_x, arr_Recovery[i].address_y, arr_Recovery[i].address, arr_Recovery[i].data);
//			    HAL_UART_Transmit(&huart2, (uint8_t *)Transmissao, strlen(Transmissao), HAL_MAX_DELAY);
			}

			// Calcula os novos pontos do objeto com o deslocamento e guarda os valores do fundo da nova prosição
			for (i = 0; i < n_Object; i++) // Percorre o tamanho do objeto
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <main+0x548>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e095      	b.n	8000b46 <main+0x652>
 8000a1a:	bf00      	nop
 8000a1c:	200001ae 	.word	0x200001ae
 8000a20:	200001c8 	.word	0x200001c8
 8000a24:	200001af 	.word	0x200001af
 8000a28:	200001cc 	.word	0x200001cc
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	200001b8 	.word	0x200001b8
 8000a34:	20000004 	.word	0x20000004
 8000a38:	200001bc 	.word	0x200001bc
 8000a3c:	200001a8 	.word	0x200001a8
 8000a40:	200001b4 	.word	0x200001b4
			{
				arr_Object[i].address = ((arr_Object[i].address + shift_x) + (shift_y * 320));
 8000a44:	4b6f      	ldr	r3, [pc, #444]	@ (8000c04 <main+0x710>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b6d      	ldr	r3, [pc, #436]	@ (8000c08 <main+0x714>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	18d1      	adds	r1, r2, r3
 8000a56:	4b6d      	ldr	r3, [pc, #436]	@ (8000c0c <main+0x718>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	4618      	mov	r0, r3
 8000a64:	4b67      	ldr	r3, [pc, #412]	@ (8000c04 <main+0x710>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	180a      	adds	r2, r1, r0
 8000a70:	601a      	str	r2, [r3, #0]
				arr_Recovery[i].address = (arr_Object[i].address); // Guarda posição do vetor para obter o valor do fundo
 8000a72:	4b64      	ldr	r3, [pc, #400]	@ (8000c04 <main+0x710>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4b61      	ldr	r3, [pc, #388]	@ (8000c04 <main+0x710>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	440b      	add	r3, r1
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	601a      	str	r2, [r3, #0]
				arr_Recovery[i].data = Duck[(arr_Recovery[i].address)];	 // Guada o valor do fundo com base no endereço do vetor
 8000a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8000c04 <main+0x710>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b5b      	ldr	r3, [pc, #364]	@ (8000c04 <main+0x710>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	495b      	ldr	r1, [pc, #364]	@ (8000c10 <main+0x71c>)
 8000aa2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000aa6:	819a      	strh	r2, [r3, #12]
				arr_Object[i].address_x =  (((arr_Object[i].address)+1)-(((arr_Object[i].address)/320)*320)); // Atualiza posição x do objeto
 8000aa8:	4b56      	ldr	r3, [pc, #344]	@ (8000c04 <main+0x710>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	1c59      	adds	r1, r3, #1
 8000ab6:	4b53      	ldr	r3, [pc, #332]	@ (8000c04 <main+0x710>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	4413      	add	r3, r2
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a54      	ldr	r2, [pc, #336]	@ (8000c14 <main+0x720>)
 8000ac4:	fb82 0203 	smull	r0, r2, r2, r3
 8000ac8:	11d2      	asrs	r2, r2, #7
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1a9a      	subs	r2, r3, r2
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c04 <main+0x710>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	180a      	adds	r2, r1, r0
 8000ae4:	605a      	str	r2, [r3, #4]
				arr_Recovery[i].address_x = arr_Object[i].address_x; // Guarda a posição na matriz de fundo
 8000ae6:	4b47      	ldr	r3, [pc, #284]	@ (8000c04 <main+0x710>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	441a      	add	r2, r3
 8000af0:	4b44      	ldr	r3, [pc, #272]	@ (8000c04 <main+0x710>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	440b      	add	r3, r1
 8000afa:	6852      	ldr	r2, [r2, #4]
 8000afc:	605a      	str	r2, [r3, #4]
				arr_Object[i].address_y = (((arr_Object[i].address)+1)/320); // Atualiza posição x do objeto
 8000afe:	4b41      	ldr	r3, [pc, #260]	@ (8000c04 <main+0x710>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <main+0x710>)
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	440a      	add	r2, r1
 8000b16:	493f      	ldr	r1, [pc, #252]	@ (8000c14 <main+0x720>)
 8000b18:	fb81 0103 	smull	r0, r1, r1, r3
 8000b1c:	11c9      	asrs	r1, r1, #7
 8000b1e:	17db      	asrs	r3, r3, #31
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	6093      	str	r3, [r2, #8]
				arr_Recovery[i].address_y = arr_Object[i].address_y; // Guarda a posição na matriz de fundo
 8000b24:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <main+0x710>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	441a      	add	r2, r3
 8000b2e:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <main+0x710>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	440b      	add	r3, r1
 8000b38:	6892      	ldr	r2, [r2, #8]
 8000b3a:	609a      	str	r2, [r3, #8]
			for (i = 0; i < n_Object; i++) // Percorre o tamanho do objeto
 8000b3c:	4b31      	ldr	r3, [pc, #196]	@ (8000c04 <main+0x710>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a30      	ldr	r2, [pc, #192]	@ (8000c04 <main+0x710>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <main+0x710>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <main+0x724>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	f6ff af78 	blt.w	8000a44 <main+0x550>
			}

			//	Atualiza novas posições para limitar movimentos fora do TFT
			x_pixel_min = x_pixel_min + shift_x;	// Atualiza X mínimo
 8000b54:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <main+0x728>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <main+0x714>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <main+0x728>)
 8000b60:	6013      	str	r3, [r2, #0]
			x_pixel_max = x_pixel_max + shift_x;	// Atualiza X máximo
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <main+0x72c>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <main+0x714>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <main+0x72c>)
 8000b6e:	6013      	str	r3, [r2, #0]
			y_pixel_min = y_pixel_min + shift_y;	// Atualiza y mínimo
 8000b70:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <main+0x730>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <main+0x718>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <main+0x730>)
 8000b7c:	6013      	str	r3, [r2, #0]
			y_pixel_max = y_pixel_max + shift_y;	// Atualiza y máximo
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <main+0x734>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <main+0x718>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <main+0x734>)
 8000b8a:	6013      	str	r3, [r2, #0]
			cx_pixel = (((x_pixel_max - x_pixel_min)/2) + x_pixel_min);	// Atualiza ponto central x
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <main+0x72c>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <main+0x728>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	0fda      	lsrs	r2, r3, #31
 8000b98:	4413      	add	r3, r2
 8000b9a:	105b      	asrs	r3, r3, #1
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <main+0x728>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a21      	ldr	r2, [pc, #132]	@ (8000c2c <main+0x738>)
 8000ba6:	6013      	str	r3, [r2, #0]
			cy_pixel = (((y_pixel_max - y_pixel_min)/2) + y_pixel_min);	// Atualiza ponto central y
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <main+0x734>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <main+0x730>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	0fda      	lsrs	r2, r3, #31
 8000bb4:	4413      	add	r3, r2
 8000bb6:	105b      	asrs	r3, r3, #1
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <main+0x730>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <main+0x73c>)
 8000bc2:	6013      	str	r3, [r2, #0]

			for (int32_t i = 0; i < n_Object; i++) // Imprime objeto na nova posição
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e016      	b.n	8000bf8 <main+0x704>
			{
				tft_drawPixel(arr_Object[i].address_x, arr_Object[i].address_y, arr_Object[i].data);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	b218      	sxth	r0, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	b219      	sxth	r1, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	4413      	add	r3, r2
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f003 fb9d 	bl	800432c <tft_drawPixel>
			for (int32_t i = 0; i < n_Object; i++) // Imprime objeto na nova posição
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <main+0x724>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbe3      	blt.n	8000bca <main+0x6d6>
	 if(shot == 1)	// Caso a interrupção tenha sido ativada, o valor de shot será 1
 8000c02:	e5fa      	b.n	80007fa <main+0x306>
 8000c04:	200001a8 	.word	0x200001a8
 8000c08:	200001c8 	.word	0x200001c8
 8000c0c:	200001cc 	.word	0x200001cc
 8000c10:	08008080 	.word	0x08008080
 8000c14:	66666667 	.word	0x66666667
 8000c18:	200001b4 	.word	0x200001b4
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200001b8 	.word	0x200001b8
 8000c24:	20000004 	.word	0x20000004
 8000c28:	200001bc 	.word	0x200001bc
 8000c2c:	200001c0 	.word	0x200001c0
 8000c30:	200001c4 	.word	0x200001c4

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	@ 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2234      	movs	r2, #52	@ 0x34
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 f9c0 	bl	8007fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	4a29      	ldr	r2, [pc, #164]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <SystemClock_Config+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <SystemClock_Config+0xd8>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <SystemClock_Config+0xd8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fede 	bl	8006a84 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cce:	f000 fa4d 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	2102      	movs	r1, #2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 fb7e 	bl	80063f0 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cfa:	f000 fa37 	bl	800116c <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3750      	adds	r7, #80	@ 0x50
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d24:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <MX_ADC1_Init+0x9c>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <MX_ADC1_Init+0xa0>)
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d72:	f004 fc55 	bl	8005620 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f9f6 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d80:	230e      	movs	r3, #14
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_ADC1_Init+0x98>)
 8000d92:	f004 fe27 	bl	80059e4 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 f9e6 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000088 	.word	0x20000088
 8000dac:	40012000 	.word	0x40012000
 8000db0:	0f000001 	.word	0x0f000001

08000db4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000dc8:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <MX_ADC2_Init+0x9c>)
 8000dca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000dce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dd2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000df6:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <MX_ADC2_Init+0xa0>)
 8000df8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e14:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000e16:	f004 fc03 	bl	8005620 <HAL_ADC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000e20:	f000 f9a4 	bl	800116c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e24:	230f      	movs	r3, #15
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_ADC2_Init+0x98>)
 8000e36:	f004 fdd5 	bl	80059e4 <HAL_ADC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000e40:	f000 f994 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000d0 	.word	0x200000d0
 8000e50:	40012100 	.word	0x40012100
 8000e54:	0f000001 	.word	0x0f000001

08000e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef4 <MX_TIM1_Init+0x9c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e7c:	2253      	movs	r2, #83	@ 0x53
 8000e7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000e9c:	2280      	movs	r2, #128	@ 0x80
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea0:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000ea2:	f006 f88d 	bl	8006fc0 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000eac:	f000 f95e 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000ebe:	f006 f937 	bl	8007130 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ec8:	f000 f950 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_TIM1_Init+0x98>)
 8000eda:	f006 fb37 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ee4:	f000 f942 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000118 	.word	0x20000118
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f006 fb88 	bl	8007644 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f000 f917 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000160 	.word	0x20000160
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b46      	ldr	r3, [pc, #280]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a45      	ldr	r2, [pc, #276]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b43      	ldr	r3, [pc, #268]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a3e      	ldr	r2, [pc, #248]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a37      	ldr	r2, [pc, #220]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a30      	ldr	r2, [pc, #192]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <MX_GPIO_Init+0x134>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2182      	movs	r1, #130	@ 0x82
 8000fd6:	482b      	ldr	r0, [pc, #172]	@ (8001084 <MX_GPIO_Init+0x138>)
 8000fd8:	f005 f9d8 	bl	800638c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f240 7113 	movw	r1, #1811	@ 0x713
 8000fe2:	4829      	ldr	r0, [pc, #164]	@ (8001088 <MX_GPIO_Init+0x13c>)
 8000fe4:	f005 f9d2 	bl	800638c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f240 4139 	movw	r1, #1081	@ 0x439
 8000fee:	4827      	ldr	r0, [pc, #156]	@ (800108c <MX_GPIO_Init+0x140>)
 8000ff0:	f005 f9cc 	bl	800638c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000ff4:	2382      	movs	r3, #130	@ 0x82
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	@ (8001084 <MX_GPIO_Init+0x138>)
 800100c:	f005 f82a 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8001010:	f240 7313 	movw	r3, #1811	@ 0x713
 8001014:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4817      	ldr	r0, [pc, #92]	@ (8001088 <MX_GPIO_Init+0x13c>)
 800102a:	f005 f81b 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 800102e:	f240 4339 	movw	r3, #1081	@ 0x439
 8001032:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4811      	ldr	r0, [pc, #68]	@ (800108c <MX_GPIO_Init+0x140>)
 8001048:	f005 f80c 	bl	8006064 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800104c:	2302      	movs	r3, #2
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001050:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <MX_GPIO_Init+0x140>)
 8001062:	f004 ffff 	bl	8006064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2007      	movs	r0, #7
 800106c:	f004 ffc3 	bl	8005ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001070:	2007      	movs	r0, #7
 8001072:	f004 ffdc 	bl	800602e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400

08001090 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Rotina de interrupção
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)	// recebe o número do pino que causou a interrupção
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1) // Check if PIN is 1 (no caso PB1)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d102      	bne.n	80010a6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		shot = 1;	// Caso positivo, atribui valor 1 a variável shot de flag da rotina principal
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <HAL_GPIO_EXTI_Callback+0x24>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	}
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200001b0 	.word	0x200001b0

080010b8 <ADC_Value>:

//	Rotina de leitura do ADC
uint16_t ADC_Value(uint8_t ch)	// recebe o canal do ADC a ser lido e retorna valor lido
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	switch (ch)	// checa qual canal
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d002      	beq.n	80010ce <ADC_Value+0x16>
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d01b      	beq.n	8001104 <ADC_Value+0x4c>
 80010cc:	e035      	b.n	800113a <ADC_Value+0x82>
	{
		case 1:	// se 1 - posição X
		HAL_ADC_Start(&hadc1);	// Inicia ADC 1
 80010ce:	4822      	ldr	r0, [pc, #136]	@ (8001158 <ADC_Value+0xa0>)
 80010d0:	f004 faea 	bl	80056a8 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)	// aguarda 5 ms para receber dados
 80010d4:	2105      	movs	r1, #5
 80010d6:	4820      	ldr	r0, [pc, #128]	@ (8001158 <ADC_Value+0xa0>)
 80010d8:	f004 fbeb 	bl	80058b2 <HAL_ADC_PollForConversion>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d133      	bne.n	800114a <ADC_Value+0x92>
		{
			cad = HAL_ADC_GetValue(&hadc1);	// guarda dados na variável cad
 80010e2:	481d      	ldr	r0, [pc, #116]	@ (8001158 <ADC_Value+0xa0>)
 80010e4:	f004 fc70 	bl	80059c8 <HAL_ADC_GetValue>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <ADC_Value+0xa4>)
 80010ee:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);	//	espera 50ms para a próxima leitura
 80010f0:	2032      	movs	r0, #50	@ 0x32
 80010f2:	f004 fa71 	bl	80055d8 <HAL_Delay>
			HAL_ADC_Stop(&hadc1);	// desliga ADC
 80010f6:	4818      	ldr	r0, [pc, #96]	@ (8001158 <ADC_Value+0xa0>)
 80010f8:	f004 fba8 	bl	800584c <HAL_ADC_Stop>
			return cad;	//	retona valor da leitura para a função chamada
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <ADC_Value+0xa4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	e025      	b.n	8001150 <ADC_Value+0x98>
		}
		break;	//	encerra case 1

		case 2:	// se 2 - posição Y
		HAL_ADC_Start(&hadc2);	// Inicia ADC 2
 8001104:	4816      	ldr	r0, [pc, #88]	@ (8001160 <ADC_Value+0xa8>)
 8001106:	f004 facf 	bl	80056a8 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK)	// aguarda 5 ms para receber dados
 800110a:	2105      	movs	r1, #5
 800110c:	4814      	ldr	r0, [pc, #80]	@ (8001160 <ADC_Value+0xa8>)
 800110e:	f004 fbd0 	bl	80058b2 <HAL_ADC_PollForConversion>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d11a      	bne.n	800114e <ADC_Value+0x96>
		{
			cad = HAL_ADC_GetValue(&hadc2);	// guarda dados na variável cad
 8001118:	4811      	ldr	r0, [pc, #68]	@ (8001160 <ADC_Value+0xa8>)
 800111a:	f004 fc55 	bl	80059c8 <HAL_ADC_GetValue>
 800111e:	4603      	mov	r3, r0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <ADC_Value+0xa4>)
 8001124:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);	//	espera 50ms para a próxima leitura
 8001126:	2032      	movs	r0, #50	@ 0x32
 8001128:	f004 fa56 	bl	80055d8 <HAL_Delay>
			HAL_ADC_Stop(&hadc2);	// desliga ADC
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <ADC_Value+0xa8>)
 800112e:	f004 fb8d 	bl	800584c <HAL_ADC_Stop>
			return cad;	//	retona valor da leitura para a função chamada
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <ADC_Value+0xa4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	e00a      	b.n	8001150 <ADC_Value+0x98>
		}
		break;	//	encerra case 2

		default:	// caso outras
		HAL_UART_Transmit(&huart2, (uint8_t *)"Erro leitura ADC\r\n", 19, HAL_MAX_DELAY);	// Debug de Erro
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2213      	movs	r2, #19
 8001140:	4908      	ldr	r1, [pc, #32]	@ (8001164 <ADC_Value+0xac>)
 8001142:	4809      	ldr	r0, [pc, #36]	@ (8001168 <ADC_Value+0xb0>)
 8001144:	f006 face 	bl	80076e4 <HAL_UART_Transmit>
		break;	//	encerra case default
 8001148:	e002      	b.n	8001150 <ADC_Value+0x98>
		break;	//	encerra case 1
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <ADC_Value+0x98>
		break;	//	encerra case 2
 800114e:	bf00      	nop
	}
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000088 	.word	0x20000088
 800115c:	200001ad 	.word	0x200001ad
 8001160:	200000d0 	.word	0x200000d0
 8001164:	08008068 	.word	0x08008068
 8001168:	20000160 	.word	0x20000160

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011b6:	2007      	movs	r0, #7
 80011b8:	f004 ff12 	bl	8005fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2e      	ldr	r2, [pc, #184]	@ (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d128      	bne.n	800123c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	4a2c      	ldr	r2, [pc, #176]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a25      	ldr	r2, [pc, #148]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Joystique_X_Pin;
 8001222:	2310      	movs	r3, #16
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Joystique_X_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	@ (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001236:	f004 ff15 	bl	8006064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800123a:	e02c      	b.n	8001296 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <HAL_ADC_MspInit+0xe4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d127      	bne.n	8001296 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_ADC_MspInit+0xdc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Joystique_Y_Pin;
 800127e:	2320      	movs	r3, #32
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Joystique_Y_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001292:	f004 fee7 	bl	8006064 <HAL_GPIO_Init>
}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	@ 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40012100 	.word	0x40012100

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_TIM_Base_MspInit+0x3c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10d      	bne.n	80012de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_TIM_Base_MspInit+0x40>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <HAL_UART_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_UART_MspInit+0x88>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_UART_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <HAL_UART_MspInit+0x8c>)
 800136a:	f004 fe7b 	bl	8006064 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	@ 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004400 	.word	0x40004400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013da:	f004 f8dd 	bl	8005598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f004 ffea 	bl	80063c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f006 fdea 	bl	8007ff8 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20020000 	.word	0x20020000
 8001450:	00000400 	.word	0x00000400
 8001454:	200001d0 	.word	0x200001d0
 8001458:	20000340 	.word	0x20000340

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <PIN_LOW>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f004 ff7a 	bl	800638c <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <PIN_HIGH>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f004 ff6a 	bl	800638c <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <PIN_INPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f004 fdc0 	bl	8006064 <HAL_GPIO_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <PIN_OUTPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f004 fda8 	bl	8006064 <HAL_GPIO_Init>
}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <width>:
/* Variáveis globais *********************************************************/
uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <width+0x14>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000000c 	.word	0x2000000c

08001534 <height>:

uint16_t height(void)
{ return _height; }
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <height+0x14>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000000e 	.word	0x2000000e

0800154c <color565_to_555>:

static void delay (uint32_t time);

/* Funções privadas **********************************************************/
static uint16_t color565_to_555(uint16_t color)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800155e:	b21a      	sxth	r2, r3
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b21b      	sxth	r3, r3
 8001566:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29b      	uxth	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <color555_to_565>:

static uint16_t color555_to_565(uint16_t color)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159e:	b21a      	sxth	r2, r3
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	115b      	asrs	r3, r3, #5
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	105b      	asrs	r3, r3, #1
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b29b      	uxth	r3, r3
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <color565_to_r>:

static uint8_t color565_to_r(uint16_t color)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	80fb      	strh	r3, [r7, #6]
	return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	121b      	asrs	r3, r3, #8
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f023 0307 	bic.w	r3, r3, #7
 80015e2:	b2db      	uxtb	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <color565_to_g>:

static uint8_t color565_to_g(uint16_t color)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	10db      	asrs	r3, r3, #3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f023 0303 	bic.w	r3, r3, #3
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <color565_to_b>:

static uint8_t color565_to_b(uint16_t color)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	b2db      	uxtb	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <pushCommand>:

static void pushCommand(uint16_t cmd, uint8_t * block, int8_t N)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	6039      	str	r1, [r7, #0]
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	4613      	mov	r3, r2
 800163c:	717b      	strb	r3, [r7, #5]
	WriteCmdParamN(cmd, N, block);
 800163e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fab6 	bl	8001bb8 <WriteCmdParamN>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <setReadDir>:

static void setReadDir (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165c:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <setReadDir+0x50>)
 800165e:	f7ff ff2f 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <setReadDir+0x54>)
 8001666:	f7ff ff2b 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800166a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <setReadDir+0x50>)
 8001670:	f7ff ff26 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001674:	2108      	movs	r1, #8
 8001676:	480d      	ldr	r0, [pc, #52]	@ (80016ac <setReadDir+0x58>)
 8001678:	f7ff ff22 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800167c:	2120      	movs	r1, #32
 800167e:	480b      	ldr	r0, [pc, #44]	@ (80016ac <setReadDir+0x58>)
 8001680:	f7ff ff1e 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001684:	2110      	movs	r1, #16
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <setReadDir+0x58>)
 8001688:	f7ff ff1a 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800168c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001690:	4806      	ldr	r0, [pc, #24]	@ (80016ac <setReadDir+0x58>)
 8001692:	f7ff ff15 	bl	80014c0 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169a:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <setReadDir+0x50>)
 800169c:	f7ff ff10 	bl	80014c0 <PIN_INPUT>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020400 	.word	0x40020400

080016b0 <setWriteDir>:

static void setWriteDir (void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80016b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <setWriteDir+0x50>)
 80016ba:	f7ff ff17 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80016be:	2180      	movs	r1, #128	@ 0x80
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <setWriteDir+0x54>)
 80016c2:	f7ff ff13 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80016c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <setWriteDir+0x50>)
 80016cc:	f7ff ff0e 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80016d0:	2108      	movs	r1, #8
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <setWriteDir+0x58>)
 80016d4:	f7ff ff0a 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80016d8:	2120      	movs	r1, #32
 80016da:	480b      	ldr	r0, [pc, #44]	@ (8001708 <setWriteDir+0x58>)
 80016dc:	f7ff ff06 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80016e0:	2110      	movs	r1, #16
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <setWriteDir+0x58>)
 80016e4:	f7ff ff02 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80016e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ec:	4806      	ldr	r0, [pc, #24]	@ (8001708 <setWriteDir+0x58>)
 80016ee:	f7ff fefd 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80016f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f6:	4802      	ldr	r0, [pc, #8]	@ (8001700 <setWriteDir+0x50>)
 80016f8:	f7ff fef8 	bl	80014ec <PIN_OUTPUT>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400

0800170c <write24>:
		}
	CS_IDLE;
}

static void write24(uint16_t color)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	uint8_t r = color565_to_r(color);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff58 	bl	80015ce <color565_to_r>
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
	uint8_t g = color565_to_g(color);
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff63 	bl	80015f0 <color565_to_g>
 800172a:	4603      	mov	r3, r0
 800172c:	73bb      	strb	r3, [r7, #14]
	uint8_t b = color565_to_b(color);
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff6e 	bl	8001612 <color565_to_b>
 8001736:	4603      	mov	r3, r0
 8001738:	737b      	strb	r3, [r7, #13]
	write8(r);
 800173a:	4b71      	ldr	r3, [pc, #452]	@ (8001900 <write24+0x1f4>)
 800173c:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	4b70      	ldr	r3, [pc, #448]	@ (8001904 <write24+0x1f8>)
 8001744:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <write24+0x1fc>)
 800174c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001762:	431a      	orrs	r2, r3
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	431a      	orrs	r2, r3
 800176e:	4b64      	ldr	r3, [pc, #400]	@ (8001900 <write24+0x1f4>)
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	105b      	asrs	r3, r3, #1
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	431a      	orrs	r2, r3
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	431a      	orrs	r2, r3
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <write24+0x1f8>)
 8001798:	619a      	str	r2, [r3, #24]
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	4a5a      	ldr	r2, [pc, #360]	@ (8001908 <write24+0x1fc>)
 80017a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	2102      	movs	r1, #2
 80017a8:	4855      	ldr	r0, [pc, #340]	@ (8001900 <write24+0x1f4>)
 80017aa:	f7ff fe69 	bl	8001480 <PIN_LOW>
 80017ae:	2102      	movs	r1, #2
 80017b0:	4853      	ldr	r0, [pc, #332]	@ (8001900 <write24+0x1f4>)
 80017b2:	f7ff fe65 	bl	8001480 <PIN_LOW>
 80017b6:	2102      	movs	r1, #2
 80017b8:	4851      	ldr	r0, [pc, #324]	@ (8001900 <write24+0x1f4>)
 80017ba:	f7ff fe61 	bl	8001480 <PIN_LOW>
 80017be:	2102      	movs	r1, #2
 80017c0:	484f      	ldr	r0, [pc, #316]	@ (8001900 <write24+0x1f4>)
 80017c2:	f7ff fe6d 	bl	80014a0 <PIN_HIGH>
 80017c6:	2102      	movs	r1, #2
 80017c8:	484d      	ldr	r0, [pc, #308]	@ (8001900 <write24+0x1f4>)
 80017ca:	f7ff fe69 	bl	80014a0 <PIN_HIGH>
	write8(g);
 80017ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001900 <write24+0x1f4>)
 80017d0:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <write24+0x1f8>)
 80017d8:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <write24+0x1fc>)
 80017e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017e4:	619a      	str	r2, [r3, #24]
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f6:	431a      	orrs	r2, r3
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001800:	431a      	orrs	r2, r3
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <write24+0x1f4>)
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	105b      	asrs	r3, r3, #1
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	431a      	orrs	r2, r3
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	431a      	orrs	r2, r3
 800182a:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <write24+0x1f8>)
 800182c:	619a      	str	r2, [r3, #24]
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	4a35      	ldr	r2, [pc, #212]	@ (8001908 <write24+0x1fc>)
 8001834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	2102      	movs	r1, #2
 800183c:	4830      	ldr	r0, [pc, #192]	@ (8001900 <write24+0x1f4>)
 800183e:	f7ff fe1f 	bl	8001480 <PIN_LOW>
 8001842:	2102      	movs	r1, #2
 8001844:	482e      	ldr	r0, [pc, #184]	@ (8001900 <write24+0x1f4>)
 8001846:	f7ff fe1b 	bl	8001480 <PIN_LOW>
 800184a:	2102      	movs	r1, #2
 800184c:	482c      	ldr	r0, [pc, #176]	@ (8001900 <write24+0x1f4>)
 800184e:	f7ff fe17 	bl	8001480 <PIN_LOW>
 8001852:	2102      	movs	r1, #2
 8001854:	482a      	ldr	r0, [pc, #168]	@ (8001900 <write24+0x1f4>)
 8001856:	f7ff fe23 	bl	80014a0 <PIN_HIGH>
 800185a:	2102      	movs	r1, #2
 800185c:	4828      	ldr	r0, [pc, #160]	@ (8001900 <write24+0x1f4>)
 800185e:	f7ff fe1f 	bl	80014a0 <PIN_HIGH>
	write8(b);
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <write24+0x1f4>)
 8001864:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <write24+0x1f8>)
 800186c:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	4b25      	ldr	r3, [pc, #148]	@ (8001908 <write24+0x1fc>)
 8001874:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001878:	619a      	str	r2, [r3, #24]
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188a:	431a      	orrs	r2, r3
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001894:	431a      	orrs	r2, r3
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <write24+0x1f4>)
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	7b7b      	ldrb	r3, [r7, #13]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	105b      	asrs	r3, r3, #1
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	431a      	orrs	r2, r3
 80018b6:	7b7b      	ldrb	r3, [r7, #13]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	431a      	orrs	r2, r3
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <write24+0x1f8>)
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	7b7b      	ldrb	r3, [r7, #13]
 80018c4:	019b      	lsls	r3, r3, #6
 80018c6:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <write24+0x1fc>)
 80018c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	2102      	movs	r1, #2
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <write24+0x1f4>)
 80018d2:	f7ff fdd5 	bl	8001480 <PIN_LOW>
 80018d6:	2102      	movs	r1, #2
 80018d8:	4809      	ldr	r0, [pc, #36]	@ (8001900 <write24+0x1f4>)
 80018da:	f7ff fdd1 	bl	8001480 <PIN_LOW>
 80018de:	2102      	movs	r1, #2
 80018e0:	4807      	ldr	r0, [pc, #28]	@ (8001900 <write24+0x1f4>)
 80018e2:	f7ff fdcd 	bl	8001480 <PIN_LOW>
 80018e6:	2102      	movs	r1, #2
 80018e8:	4805      	ldr	r0, [pc, #20]	@ (8001900 <write24+0x1f4>)
 80018ea:	f7ff fdd9 	bl	80014a0 <PIN_HIGH>
 80018ee:	2102      	movs	r1, #2
 80018f0:	4803      	ldr	r0, [pc, #12]	@ (8001900 <write24+0x1f4>)
 80018f2:	f7ff fdd5 	bl	80014a0 <PIN_HIGH>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800

0800190c <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	80fb      	strh	r3, [r7, #6]
 8001918:	4613      	mov	r3, r2
 800191a:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE;
 800191c:	2101      	movs	r1, #1
 800191e:	48a3      	ldr	r0, [pc, #652]	@ (8001bac <writecmddata+0x2a0>)
 8001920:	f7ff fdae 	bl	8001480 <PIN_LOW>
	WriteCmd(cmd);
 8001924:	2110      	movs	r1, #16
 8001926:	48a2      	ldr	r0, [pc, #648]	@ (8001bb0 <writecmddata+0x2a4>)
 8001928:	f7ff fdaa 	bl	8001480 <PIN_LOW>
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29b      	uxth	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	73bb      	strb	r3, [r7, #14]
 8001938:	4b9d      	ldr	r3, [pc, #628]	@ (8001bb0 <writecmddata+0x2a4>)
 800193a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800193e:	619a      	str	r2, [r3, #24]
 8001940:	4b9a      	ldr	r3, [pc, #616]	@ (8001bac <writecmddata+0x2a0>)
 8001942:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b9a      	ldr	r3, [pc, #616]	@ (8001bb4 <writecmddata+0x2a8>)
 800194a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800194e:	619a      	str	r2, [r3, #24]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	431a      	orrs	r2, r3
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196a:	431a      	orrs	r2, r3
 800196c:	4b90      	ldr	r3, [pc, #576]	@ (8001bb0 <writecmddata+0x2a4>)
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	105b      	asrs	r3, r3, #1
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	431a      	orrs	r2, r3
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	431a      	orrs	r2, r3
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	431a      	orrs	r2, r3
 8001994:	4b85      	ldr	r3, [pc, #532]	@ (8001bac <writecmddata+0x2a0>)
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	4a85      	ldr	r2, [pc, #532]	@ (8001bb4 <writecmddata+0x2a8>)
 800199e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	2102      	movs	r1, #2
 80019a6:	4882      	ldr	r0, [pc, #520]	@ (8001bb0 <writecmddata+0x2a4>)
 80019a8:	f7ff fd6a 	bl	8001480 <PIN_LOW>
 80019ac:	2102      	movs	r1, #2
 80019ae:	4880      	ldr	r0, [pc, #512]	@ (8001bb0 <writecmddata+0x2a4>)
 80019b0:	f7ff fd66 	bl	8001480 <PIN_LOW>
 80019b4:	2102      	movs	r1, #2
 80019b6:	487e      	ldr	r0, [pc, #504]	@ (8001bb0 <writecmddata+0x2a4>)
 80019b8:	f7ff fd62 	bl	8001480 <PIN_LOW>
 80019bc:	2102      	movs	r1, #2
 80019be:	487c      	ldr	r0, [pc, #496]	@ (8001bb0 <writecmddata+0x2a4>)
 80019c0:	f7ff fd6e 	bl	80014a0 <PIN_HIGH>
 80019c4:	2102      	movs	r1, #2
 80019c6:	487a      	ldr	r0, [pc, #488]	@ (8001bb0 <writecmddata+0x2a4>)
 80019c8:	f7ff fd6a 	bl	80014a0 <PIN_HIGH>
 80019cc:	4b78      	ldr	r3, [pc, #480]	@ (8001bb0 <writecmddata+0x2a4>)
 80019ce:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	4b75      	ldr	r3, [pc, #468]	@ (8001bac <writecmddata+0x2a0>)
 80019d6:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <writecmddata+0x2a8>)
 80019de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019e2:	619a      	str	r2, [r3, #24]
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f4:	431a      	orrs	r2, r3
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fe:	431a      	orrs	r2, r3
 8001a00:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a02:	619a      	str	r2, [r3, #24]
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	105b      	asrs	r3, r3, #1
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	431a      	orrs	r2, r3
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	431a      	orrs	r2, r3
 8001a28:	4b60      	ldr	r3, [pc, #384]	@ (8001bac <writecmddata+0x2a0>)
 8001a2a:	619a      	str	r2, [r3, #24]
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	4a60      	ldr	r2, [pc, #384]	@ (8001bb4 <writecmddata+0x2a8>)
 8001a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	2102      	movs	r1, #2
 8001a3a:	485d      	ldr	r0, [pc, #372]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a3c:	f7ff fd20 	bl	8001480 <PIN_LOW>
 8001a40:	2102      	movs	r1, #2
 8001a42:	485b      	ldr	r0, [pc, #364]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a44:	f7ff fd1c 	bl	8001480 <PIN_LOW>
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4859      	ldr	r0, [pc, #356]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a4c:	f7ff fd18 	bl	8001480 <PIN_LOW>
 8001a50:	2102      	movs	r1, #2
 8001a52:	4857      	ldr	r0, [pc, #348]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a54:	f7ff fd24 	bl	80014a0 <PIN_HIGH>
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a5c:	f7ff fd20 	bl	80014a0 <PIN_HIGH>
 8001a60:	2110      	movs	r1, #16
 8001a62:	4853      	ldr	r0, [pc, #332]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a64:	f7ff fd1c 	bl	80014a0 <PIN_HIGH>
	WriteData(dat);
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	737b      	strb	r3, [r7, #13]
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	733b      	strb	r3, [r7, #12]
 8001a74:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <writecmddata+0x2a4>)
 8001a76:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bac <writecmddata+0x2a0>)
 8001a7e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <writecmddata+0x2a8>)
 8001a86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001a94:	7b7b      	ldrb	r3, [r7, #13]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	4b41      	ldr	r3, [pc, #260]	@ (8001bb0 <writecmddata+0x2a4>)
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
 8001ab6:	105b      	asrs	r3, r3, #1
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	4b36      	ldr	r3, [pc, #216]	@ (8001bac <writecmddata+0x2a0>)
 8001ad2:	619a      	str	r2, [r3, #24]
 8001ad4:	7b7b      	ldrb	r3, [r7, #13]
 8001ad6:	019b      	lsls	r3, r3, #6
 8001ad8:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <writecmddata+0x2a8>)
 8001ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4833      	ldr	r0, [pc, #204]	@ (8001bb0 <writecmddata+0x2a4>)
 8001ae4:	f7ff fccc 	bl	8001480 <PIN_LOW>
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4831      	ldr	r0, [pc, #196]	@ (8001bb0 <writecmddata+0x2a4>)
 8001aec:	f7ff fcc8 	bl	8001480 <PIN_LOW>
 8001af0:	2102      	movs	r1, #2
 8001af2:	482f      	ldr	r0, [pc, #188]	@ (8001bb0 <writecmddata+0x2a4>)
 8001af4:	f7ff fcc4 	bl	8001480 <PIN_LOW>
 8001af8:	2102      	movs	r1, #2
 8001afa:	482d      	ldr	r0, [pc, #180]	@ (8001bb0 <writecmddata+0x2a4>)
 8001afc:	f7ff fcd0 	bl	80014a0 <PIN_HIGH>
 8001b00:	2102      	movs	r1, #2
 8001b02:	482b      	ldr	r0, [pc, #172]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b04:	f7ff fccc 	bl	80014a0 <PIN_HIGH>
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b0a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <writecmddata+0x2a0>)
 8001b12:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <writecmddata+0x2a8>)
 8001b1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b30:	431a      	orrs	r2, r3
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b3e:	619a      	str	r2, [r3, #24]
 8001b40:	7b3b      	ldrb	r3, [r7, #12]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001b48:	7b3b      	ldrb	r3, [r7, #12]
 8001b4a:	105b      	asrs	r3, r3, #1
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	431a      	orrs	r2, r3
 8001b52:	7b3b      	ldrb	r3, [r7, #12]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	431a      	orrs	r2, r3
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <writecmddata+0x2a0>)
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	7b3b      	ldrb	r3, [r7, #12]
 8001b6a:	019b      	lsls	r3, r3, #6
 8001b6c:	4a11      	ldr	r2, [pc, #68]	@ (8001bb4 <writecmddata+0x2a8>)
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	2102      	movs	r1, #2
 8001b76:	480e      	ldr	r0, [pc, #56]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b78:	f7ff fc82 	bl	8001480 <PIN_LOW>
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b80:	f7ff fc7e 	bl	8001480 <PIN_LOW>
 8001b84:	2102      	movs	r1, #2
 8001b86:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b88:	f7ff fc7a 	bl	8001480 <PIN_LOW>
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b90:	f7ff fc86 	bl	80014a0 <PIN_HIGH>
 8001b94:	2102      	movs	r1, #2
 8001b96:	4806      	ldr	r0, [pc, #24]	@ (8001bb0 <writecmddata+0x2a4>)
 8001b98:	f7ff fc82 	bl	80014a0 <PIN_HIGH>
	CS_IDLE;
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4803      	ldr	r0, [pc, #12]	@ (8001bac <writecmddata+0x2a0>)
 8001ba0:	f7ff fc7e 	bl	80014a0 <PIN_HIGH>
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020800 	.word	0x40020800

08001bb8 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	603a      	str	r2, [r7, #0]
 8001bc2:	80fb      	strh	r3, [r7, #6]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	717b      	strb	r3, [r7, #5]
	CS_ACTIVE;
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4853      	ldr	r0, [pc, #332]	@ (8001d18 <WriteCmdParamN+0x160>)
 8001bcc:	f7ff fc58 	bl	8001480 <PIN_LOW>
	WriteCmd(cmd);
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4852      	ldr	r0, [pc, #328]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001bd4:	f7ff fc54 	bl	8001480 <PIN_LOW>
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	73bb      	strb	r3, [r7, #14]
 8001be4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001be6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001bea:	619a      	str	r2, [r3, #24]
 8001bec:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <WriteCmdParamN+0x160>)
 8001bee:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001bf2:	619a      	str	r2, [r3, #24]
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <WriteCmdParamN+0x168>)
 8001bf6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bfa:	619a      	str	r2, [r3, #24]
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c16:	431a      	orrs	r2, r3
 8001c18:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	105b      	asrs	r3, r3, #1
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	431a      	orrs	r2, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	4b35      	ldr	r3, [pc, #212]	@ (8001d18 <WriteCmdParamN+0x160>)
 8001c42:	619a      	str	r2, [r3, #24]
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	4a35      	ldr	r2, [pc, #212]	@ (8001d20 <WriteCmdParamN+0x168>)
 8001c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	2102      	movs	r1, #2
 8001c52:	4832      	ldr	r0, [pc, #200]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c54:	f7ff fc14 	bl	8001480 <PIN_LOW>
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4830      	ldr	r0, [pc, #192]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c5c:	f7ff fc10 	bl	8001480 <PIN_LOW>
 8001c60:	2102      	movs	r1, #2
 8001c62:	482e      	ldr	r0, [pc, #184]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c64:	f7ff fc0c 	bl	8001480 <PIN_LOW>
 8001c68:	2102      	movs	r1, #2
 8001c6a:	482c      	ldr	r0, [pc, #176]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c6c:	f7ff fc18 	bl	80014a0 <PIN_HIGH>
 8001c70:	2102      	movs	r1, #2
 8001c72:	482a      	ldr	r0, [pc, #168]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c74:	f7ff fc14 	bl	80014a0 <PIN_HIGH>
 8001c78:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001c7a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <WriteCmdParamN+0x160>)
 8001c82:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <WriteCmdParamN+0x168>)
 8001c8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001c98:	7bbb      	ldrb	r3, [r7, #14]
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001caa:	431a      	orrs	r2, r3
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	105b      	asrs	r3, r3, #1
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <WriteCmdParamN+0x160>)
 8001cd6:	619a      	str	r2, [r3, #24]
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	4a10      	ldr	r2, [pc, #64]	@ (8001d20 <WriteCmdParamN+0x168>)
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001ce8:	f7ff fbca 	bl	8001480 <PIN_LOW>
 8001cec:	2102      	movs	r1, #2
 8001cee:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001cf0:	f7ff fbc6 	bl	8001480 <PIN_LOW>
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001cf8:	f7ff fbc2 	bl	8001480 <PIN_LOW>
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001d00:	f7ff fbce 	bl	80014a0 <PIN_HIGH>
 8001d04:	2102      	movs	r1, #2
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001d08:	f7ff fbca 	bl	80014a0 <PIN_HIGH>
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <WriteCmdParamN+0x164>)
 8001d10:	f7ff fbc6 	bl	80014a0 <PIN_HIGH>
	while (N-- > 0) {
 8001d14:	e104      	b.n	8001f20 <WriteCmdParamN+0x368>
 8001d16:	bf00      	nop
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020800 	.word	0x40020800
		uint8_t u8 = *block++;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	603a      	str	r2, [r7, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	737b      	strb	r3, [r7, #13]
		write8(u8);
 8001d2e:	4b85      	ldr	r3, [pc, #532]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001d30:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	4b84      	ldr	r3, [pc, #528]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001d38:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	4b83      	ldr	r3, [pc, #524]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001d40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d44:	619a      	str	r2, [r3, #24]
 8001d46:	7b7b      	ldrb	r3, [r7, #13]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	431a      	orrs	r2, r3
 8001d58:	7b7b      	ldrb	r3, [r7, #13]
 8001d5a:	025b      	lsls	r3, r3, #9
 8001d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d60:	431a      	orrs	r2, r3
 8001d62:	4b78      	ldr	r3, [pc, #480]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001d64:	619a      	str	r2, [r3, #24]
 8001d66:	7b7b      	ldrb	r3, [r7, #13]
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	105b      	asrs	r3, r3, #1
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	7b7b      	ldrb	r3, [r7, #13]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	431a      	orrs	r2, r3
 8001d82:	7b7b      	ldrb	r3, [r7, #13]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	7b7b      	ldrb	r3, [r7, #13]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	4a6e      	ldr	r2, [pc, #440]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4869      	ldr	r0, [pc, #420]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001d9e:	f7ff fb6f 	bl	8001480 <PIN_LOW>
 8001da2:	2102      	movs	r1, #2
 8001da4:	4867      	ldr	r0, [pc, #412]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001da6:	f7ff fb6b 	bl	8001480 <PIN_LOW>
 8001daa:	2102      	movs	r1, #2
 8001dac:	4865      	ldr	r0, [pc, #404]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001dae:	f7ff fb67 	bl	8001480 <PIN_LOW>
 8001db2:	2102      	movs	r1, #2
 8001db4:	4863      	ldr	r0, [pc, #396]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001db6:	f7ff fb73 	bl	80014a0 <PIN_HIGH>
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4861      	ldr	r0, [pc, #388]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001dbe:	f7ff fb6f 	bl	80014a0 <PIN_HIGH>
		if (N && is8347) {
 8001dc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80aa 	beq.w	8001f20 <WriteCmdParamN+0x368>
 8001dcc:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <WriteCmdParamN+0x398>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a5 	beq.w	8001f20 <WriteCmdParamN+0x368>
			cmd++;
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	80fb      	strh	r3, [r7, #6]
			WriteCmd(cmd);
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4859      	ldr	r0, [pc, #356]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001de0:	f7ff fb4e 	bl	8001480 <PIN_LOW>
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	733b      	strb	r3, [r7, #12]
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	72fb      	strb	r3, [r7, #11]
 8001df0:	4b54      	ldr	r3, [pc, #336]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001df2:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001dfa:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001dfe:	619a      	str	r2, [r3, #24]
 8001e00:	4b52      	ldr	r3, [pc, #328]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001e02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	7b3b      	ldrb	r3, [r7, #12]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	7b3b      	ldrb	r3, [r7, #12]
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e22:	431a      	orrs	r2, r3
 8001e24:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001e30:	7b3b      	ldrb	r3, [r7, #12]
 8001e32:	105b      	asrs	r3, r3, #1
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	7b3b      	ldrb	r3, [r7, #12]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	431a      	orrs	r2, r3
 8001e44:	7b3b      	ldrb	r3, [r7, #12]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	7b3b      	ldrb	r3, [r7, #12]
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	4a3d      	ldr	r2, [pc, #244]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4839      	ldr	r0, [pc, #228]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e60:	f7ff fb0e 	bl	8001480 <PIN_LOW>
 8001e64:	2102      	movs	r1, #2
 8001e66:	4837      	ldr	r0, [pc, #220]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e68:	f7ff fb0a 	bl	8001480 <PIN_LOW>
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4835      	ldr	r0, [pc, #212]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e70:	f7ff fb06 	bl	8001480 <PIN_LOW>
 8001e74:	2102      	movs	r1, #2
 8001e76:	4833      	ldr	r0, [pc, #204]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e78:	f7ff fb12 	bl	80014a0 <PIN_HIGH>
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4831      	ldr	r0, [pc, #196]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e80:	f7ff fb0e 	bl	80014a0 <PIN_HIGH>
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001e86:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001e8a:	619a      	str	r2, [r3, #24]
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001e8e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001e92:	619a      	str	r2, [r3, #24]
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001e96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e9a:	619a      	str	r2, [r3, #24]
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	431a      	orrs	r2, r3
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	105b      	asrs	r3, r3, #1
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	019b      	lsls	r3, r3, #6
 8001ee8:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <WriteCmdParamN+0x394>)
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4814      	ldr	r0, [pc, #80]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001ef4:	f7ff fac4 	bl	8001480 <PIN_LOW>
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4812      	ldr	r0, [pc, #72]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001efc:	f7ff fac0 	bl	8001480 <PIN_LOW>
 8001f00:	2102      	movs	r1, #2
 8001f02:	4810      	ldr	r0, [pc, #64]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001f04:	f7ff fabc 	bl	8001480 <PIN_LOW>
 8001f08:	2102      	movs	r1, #2
 8001f0a:	480e      	ldr	r0, [pc, #56]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001f0c:	f7ff fac8 	bl	80014a0 <PIN_HIGH>
 8001f10:	2102      	movs	r1, #2
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001f14:	f7ff fac4 	bl	80014a0 <PIN_HIGH>
 8001f18:	2110      	movs	r1, #16
 8001f1a:	480a      	ldr	r0, [pc, #40]	@ (8001f44 <WriteCmdParamN+0x38c>)
 8001f1c:	f7ff fac0 	bl	80014a0 <PIN_HIGH>
	while (N-- > 0) {
 8001f20:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	3a01      	subs	r2, #1
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	717a      	strb	r2, [r7, #5]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f73f aef9 	bgt.w	8001d24 <WriteCmdParamN+0x16c>
		}
	}
	CS_IDLE;
 8001f32:	2101      	movs	r1, #1
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <WriteCmdParamN+0x390>)
 8001f36:	f7ff fab3 	bl	80014a0 <PIN_HIGH>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	200001d5 	.word	0x200001d5

08001f54 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	4603      	mov	r3, r0
 8001f68:	71bb      	strb	r3, [r7, #6]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	717b      	strb	r3, [r7, #5]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	713b      	strb	r3, [r7, #4]
	uint8_t d[4];
	d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	733b      	strb	r3, [r7, #12]
 8001f76:	797b      	ldrb	r3, [r7, #5]
 8001f78:	737b      	strb	r3, [r7, #13]
 8001f7a:	793b      	ldrb	r3, [r7, #4]
 8001f7c:	73bb      	strb	r3, [r7, #14]
 8001f7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f82:	73fb      	strb	r3, [r7, #15]
	WriteCmdParamN(cmd, 4, d);
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f107 020c 	add.w	r2, r7, #12
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe12 	bl	8001bb8 <WriteCmdParamN>
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd90      	pop	{r4, r7, pc}

08001f9c <init_table>:

static void init_table(const void *table, int16_t size)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]

	uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

	while (size > 0)
 8001fac:	e046      	b.n	800203c <init_table+0xa0>
	{
		uint8_t cmd = pgm_read_byte(p++);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t len = pgm_read_byte(p++);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (cmd == TFTLCD_DELAY8)
 8001fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fcc:	d108      	bne.n	8001fe0 <init_table+0x44>
		{
			delay(len);
 8001fce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fbb6 	bl	8002744 <delay>
			len = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fde:	e024      	b.n	800202a <init_table+0x8e>
		}
		else
		{
			for (uint8_t i = 0; i < len; i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001fe6:	e010      	b.n	800200a <init_table+0x6e>
				dat[i] = pgm_read_byte(p++);
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8001ff8:	443b      	add	r3, r7
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (uint8_t i = 0; i < len; i++)
 8002000:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002004:	3301      	adds	r3, #1
 8002006:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800200a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800200e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002012:	429a      	cmp	r2, r3
 8002014:	d3e8      	bcc.n	8001fe8 <init_table+0x4c>
			WriteCmdParamN(cmd, len, dat);
 8002016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800201a:	b29b      	uxth	r3, r3
 800201c:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 8002020:	f107 0208 	add.w	r2, r7, #8
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fdc7 	bl	8001bb8 <WriteCmdParamN>
		}
		size -= len + 2;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002030:	b29b      	uxth	r3, r3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b02      	subs	r3, #2
 8002038:	b29b      	uxth	r3, r3
 800203a:	807b      	strh	r3, [r7, #2]
	while (size > 0)
 800203c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002040:	2b00      	cmp	r3, #0
 8002042:	dcb4      	bgt.n	8001fae <init_table+0x12>
	}
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <init_table16>:

static void init_table16(const void *table, int16_t size)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
	uint16_t *p = (uint16_t *) table;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]
	while (size > 0) {
 800205e:	e01d      	b.n	800209c <init_table16+0x4e>
		uint16_t cmd = pgm_read_word(p++);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1c9a      	adds	r2, r3, #2
 8002064:	60fa      	str	r2, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	817b      	strh	r3, [r7, #10]
		uint16_t d = pgm_read_word(p++);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1c9a      	adds	r2, r3, #2
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	813b      	strh	r3, [r7, #8]
		if (cmd == TFTLCD_DELAY)
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207a:	4293      	cmp	r3, r2
 800207c:	d104      	bne.n	8002088 <init_table16+0x3a>
			delay(d);
 800207e:	893b      	ldrh	r3, [r7, #8]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fb5f 	bl	8002744 <delay>
 8002086:	e005      	b.n	8002094 <init_table16+0x46>
		else {
			writecmddata(cmd, d);                      //static function
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fc3c 	bl	800190c <writecmddata>
		}
		size -= 2 * sizeof(int16_t);
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	3b04      	subs	r3, #4
 8002098:	b29b      	uxth	r3, r3
 800209a:	807b      	strh	r3, [r7, #2]
	while (size > 0) {
 800209c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dcdd      	bgt.n	8002060 <init_table16+0x12>
	}
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <read16bits>:

static uint16_t read16bits(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	uint16_t ret;
	uint8_t lo;
	READ_8(ret);
 80020b6:	2101      	movs	r1, #1
 80020b8:	4873      	ldr	r0, [pc, #460]	@ (8002288 <read16bits+0x1d8>)
 80020ba:	f7ff f9f1 	bl	80014a0 <PIN_HIGH>
 80020be:	2101      	movs	r1, #1
 80020c0:	4871      	ldr	r0, [pc, #452]	@ (8002288 <read16bits+0x1d8>)
 80020c2:	f7ff f9dd 	bl	8001480 <PIN_LOW>
 80020c6:	2101      	movs	r1, #1
 80020c8:	486f      	ldr	r0, [pc, #444]	@ (8002288 <read16bits+0x1d8>)
 80020ca:	f7ff f9d9 	bl	8001480 <PIN_LOW>
 80020ce:	2101      	movs	r1, #1
 80020d0:	486d      	ldr	r0, [pc, #436]	@ (8002288 <read16bits+0x1d8>)
 80020d2:	f7ff f9d5 	bl	8001480 <PIN_LOW>
 80020d6:	2101      	movs	r1, #1
 80020d8:	486b      	ldr	r0, [pc, #428]	@ (8002288 <read16bits+0x1d8>)
 80020da:	f7ff f9d1 	bl	8001480 <PIN_LOW>
 80020de:	2101      	movs	r1, #1
 80020e0:	4869      	ldr	r0, [pc, #420]	@ (8002288 <read16bits+0x1d8>)
 80020e2:	f7ff f9cd 	bl	8001480 <PIN_LOW>
 80020e6:	2101      	movs	r1, #1
 80020e8:	4867      	ldr	r0, [pc, #412]	@ (8002288 <read16bits+0x1d8>)
 80020ea:	f7ff f9c9 	bl	8001480 <PIN_LOW>
 80020ee:	2101      	movs	r1, #1
 80020f0:	4865      	ldr	r0, [pc, #404]	@ (8002288 <read16bits+0x1d8>)
 80020f2:	f7ff f9c5 	bl	8001480 <PIN_LOW>
 80020f6:	4b64      	ldr	r3, [pc, #400]	@ (8002288 <read16bits+0x1d8>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b61      	ldr	r3, [pc, #388]	@ (800228c <read16bits+0x1dc>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	b29b      	uxth	r3, r3
 800210c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002110:	b29b      	uxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b5d      	ldr	r3, [pc, #372]	@ (800228c <read16bits+0x1dc>)
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	b29b      	uxth	r3, r3
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	b29b      	uxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <read16bits+0x1dc>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	b29b      	uxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <read16bits+0x1dc>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b4e      	ldr	r3, [pc, #312]	@ (8002288 <read16bits+0x1d8>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	b29b      	uxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b4c      	ldr	r3, [pc, #304]	@ (8002290 <read16bits+0x1e0>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	b29b      	uxth	r3, r3
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	b29b      	uxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <read16bits+0x1d8>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	0a5b      	lsrs	r3, r3, #9
 8002176:	b29b      	uxth	r3, r3
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	2101      	movs	r1, #1
 8002184:	4840      	ldr	r0, [pc, #256]	@ (8002288 <read16bits+0x1d8>)
 8002186:	f7ff f98b 	bl	80014a0 <PIN_HIGH>
 800218a:	2101      	movs	r1, #1
 800218c:	483e      	ldr	r0, [pc, #248]	@ (8002288 <read16bits+0x1d8>)
 800218e:	f7ff f987 	bl	80014a0 <PIN_HIGH>
	READ_8(lo);
 8002192:	2101      	movs	r1, #1
 8002194:	483c      	ldr	r0, [pc, #240]	@ (8002288 <read16bits+0x1d8>)
 8002196:	f7ff f983 	bl	80014a0 <PIN_HIGH>
 800219a:	2101      	movs	r1, #1
 800219c:	483a      	ldr	r0, [pc, #232]	@ (8002288 <read16bits+0x1d8>)
 800219e:	f7ff f96f 	bl	8001480 <PIN_LOW>
 80021a2:	2101      	movs	r1, #1
 80021a4:	4838      	ldr	r0, [pc, #224]	@ (8002288 <read16bits+0x1d8>)
 80021a6:	f7ff f96b 	bl	8001480 <PIN_LOW>
 80021aa:	2101      	movs	r1, #1
 80021ac:	4836      	ldr	r0, [pc, #216]	@ (8002288 <read16bits+0x1d8>)
 80021ae:	f7ff f967 	bl	8001480 <PIN_LOW>
 80021b2:	2101      	movs	r1, #1
 80021b4:	4834      	ldr	r0, [pc, #208]	@ (8002288 <read16bits+0x1d8>)
 80021b6:	f7ff f963 	bl	8001480 <PIN_LOW>
 80021ba:	2101      	movs	r1, #1
 80021bc:	4832      	ldr	r0, [pc, #200]	@ (8002288 <read16bits+0x1d8>)
 80021be:	f7ff f95f 	bl	8001480 <PIN_LOW>
 80021c2:	2101      	movs	r1, #1
 80021c4:	4830      	ldr	r0, [pc, #192]	@ (8002288 <read16bits+0x1d8>)
 80021c6:	f7ff f95b 	bl	8001480 <PIN_LOW>
 80021ca:	2101      	movs	r1, #1
 80021cc:	482e      	ldr	r0, [pc, #184]	@ (8002288 <read16bits+0x1d8>)
 80021ce:	f7ff f957 	bl	8001480 <PIN_LOW>
 80021d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <read16bits+0x1d8>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <read16bits+0x1dc>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <read16bits+0x1dc>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <read16bits+0x1dc>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <read16bits+0x1dc>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <read16bits+0x1d8>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <read16bits+0x1e0>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <read16bits+0x1d8>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	0a5b      	lsrs	r3, r3, #9
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	717b      	strb	r3, [r7, #5]
 800225e:	2101      	movs	r1, #1
 8002260:	4809      	ldr	r0, [pc, #36]	@ (8002288 <read16bits+0x1d8>)
 8002262:	f7ff f91d 	bl	80014a0 <PIN_HIGH>
 8002266:	2101      	movs	r1, #1
 8002268:	4807      	ldr	r0, [pc, #28]	@ (8002288 <read16bits+0x1d8>)
 800226a:	f7ff f919 	bl	80014a0 <PIN_HIGH>
	return (ret << 8) | lo;
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b21a      	sxth	r2, r3
 8002274:	797b      	ldrb	r3, [r7, #5]
 8002276:	b21b      	sxth	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b21b      	sxth	r3, r3
 800227c:	b29b      	uxth	r3, r3
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400
 8002290:	40020800 	.word	0x40020800

08002294 <readReg>:

static uint16_t readReg(uint16_t reg, int8_t index)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	80fb      	strh	r3, [r7, #6]
 80022a0:	4613      	mov	r3, r2
 80022a2:	717b      	strb	r3, [r7, #5]
	uint16_t ret;
	uint8_t lo;
	if (!done_reset)
 80022a4:	4b65      	ldr	r3, [pc, #404]	@ (800243c <readReg+0x1a8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <readReg+0x1c>
		tft_reset();
 80022ac:	f001 f8a2 	bl	80033f4 <tft_reset>
	CS_ACTIVE;
 80022b0:	2101      	movs	r1, #1
 80022b2:	4863      	ldr	r0, [pc, #396]	@ (8002440 <readReg+0x1ac>)
 80022b4:	f7ff f8e4 	bl	8001480 <PIN_LOW>
	WriteCmd(reg);
 80022b8:	2110      	movs	r1, #16
 80022ba:	4862      	ldr	r0, [pc, #392]	@ (8002444 <readReg+0x1b0>)
 80022bc:	f7ff f8e0 	bl	8001480 <PIN_LOW>
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	73bb      	strb	r3, [r7, #14]
 80022cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <readReg+0x1b0>)
 80022ce:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80022d2:	619a      	str	r2, [r3, #24]
 80022d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002440 <readReg+0x1ac>)
 80022d6:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80022da:	619a      	str	r2, [r3, #24]
 80022dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <readReg+0x1b4>)
 80022de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	431a      	orrs	r2, r3
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	431a      	orrs	r2, r3
 8002300:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <readReg+0x1b0>)
 8002302:	619a      	str	r2, [r3, #24]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	105b      	asrs	r3, r3, #1
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	431a      	orrs	r2, r3
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	431a      	orrs	r2, r3
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	431a      	orrs	r2, r3
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <readReg+0x1ac>)
 800232a:	619a      	str	r2, [r3, #24]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	019b      	lsls	r3, r3, #6
 8002330:	4a45      	ldr	r2, [pc, #276]	@ (8002448 <readReg+0x1b4>)
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	2102      	movs	r1, #2
 800233a:	4842      	ldr	r0, [pc, #264]	@ (8002444 <readReg+0x1b0>)
 800233c:	f7ff f8a0 	bl	8001480 <PIN_LOW>
 8002340:	2102      	movs	r1, #2
 8002342:	4840      	ldr	r0, [pc, #256]	@ (8002444 <readReg+0x1b0>)
 8002344:	f7ff f89c 	bl	8001480 <PIN_LOW>
 8002348:	2102      	movs	r1, #2
 800234a:	483e      	ldr	r0, [pc, #248]	@ (8002444 <readReg+0x1b0>)
 800234c:	f7ff f898 	bl	8001480 <PIN_LOW>
 8002350:	2102      	movs	r1, #2
 8002352:	483c      	ldr	r0, [pc, #240]	@ (8002444 <readReg+0x1b0>)
 8002354:	f7ff f8a4 	bl	80014a0 <PIN_HIGH>
 8002358:	2102      	movs	r1, #2
 800235a:	483a      	ldr	r0, [pc, #232]	@ (8002444 <readReg+0x1b0>)
 800235c:	f7ff f8a0 	bl	80014a0 <PIN_HIGH>
 8002360:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <readReg+0x1b0>)
 8002362:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002366:	619a      	str	r2, [r3, #24]
 8002368:	4b35      	ldr	r3, [pc, #212]	@ (8002440 <readReg+0x1ac>)
 800236a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <readReg+0x1b4>)
 8002372:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002380:	7bbb      	ldrb	r3, [r7, #14]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	431a      	orrs	r2, r3
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002392:	431a      	orrs	r2, r3
 8002394:	4b2b      	ldr	r3, [pc, #172]	@ (8002444 <readReg+0x1b0>)
 8002396:	619a      	str	r2, [r3, #24]
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	105b      	asrs	r3, r3, #1
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	431a      	orrs	r2, r3
 80023aa:	7bbb      	ldrb	r3, [r7, #14]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	431a      	orrs	r2, r3
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	431a      	orrs	r2, r3
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <readReg+0x1ac>)
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	4a20      	ldr	r2, [pc, #128]	@ (8002448 <readReg+0x1b4>)
 80023c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	2102      	movs	r1, #2
 80023ce:	481d      	ldr	r0, [pc, #116]	@ (8002444 <readReg+0x1b0>)
 80023d0:	f7ff f856 	bl	8001480 <PIN_LOW>
 80023d4:	2102      	movs	r1, #2
 80023d6:	481b      	ldr	r0, [pc, #108]	@ (8002444 <readReg+0x1b0>)
 80023d8:	f7ff f852 	bl	8001480 <PIN_LOW>
 80023dc:	2102      	movs	r1, #2
 80023de:	4819      	ldr	r0, [pc, #100]	@ (8002444 <readReg+0x1b0>)
 80023e0:	f7ff f84e 	bl	8001480 <PIN_LOW>
 80023e4:	2102      	movs	r1, #2
 80023e6:	4817      	ldr	r0, [pc, #92]	@ (8002444 <readReg+0x1b0>)
 80023e8:	f7ff f85a 	bl	80014a0 <PIN_HIGH>
 80023ec:	2102      	movs	r1, #2
 80023ee:	4815      	ldr	r0, [pc, #84]	@ (8002444 <readReg+0x1b0>)
 80023f0:	f7ff f856 	bl	80014a0 <PIN_HIGH>
 80023f4:	2110      	movs	r1, #16
 80023f6:	4813      	ldr	r0, [pc, #76]	@ (8002444 <readReg+0x1b0>)
 80023f8:	f7ff f852 	bl	80014a0 <PIN_HIGH>
	setReadDir();
 80023fc:	f7ff f92a 	bl	8001654 <setReadDir>
	delay(1);    //1us should be adequate
 8002400:	2001      	movs	r0, #1
 8002402:	f000 f99f 	bl	8002744 <delay>
	//    READ_16(ret);
	do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002406:	f7ff fe53 	bl	80020b0 <read16bits>
 800240a:	4603      	mov	r3, r0
 800240c:	81bb      	strh	r3, [r7, #12]
 800240e:	797b      	ldrb	r3, [r7, #5]
 8002410:	3b01      	subs	r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	717b      	strb	r3, [r7, #5]
 8002416:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800241a:	2b00      	cmp	r3, #0
 800241c:	daf3      	bge.n	8002406 <readReg+0x172>
	RD_IDLE;
 800241e:	2101      	movs	r1, #1
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <readReg+0x1b0>)
 8002422:	f7ff f83d 	bl	80014a0 <PIN_HIGH>
	CS_IDLE;
 8002426:	2101      	movs	r1, #1
 8002428:	4805      	ldr	r0, [pc, #20]	@ (8002440 <readReg+0x1ac>)
 800242a:	f7ff f839 	bl	80014a0 <PIN_HIGH>
	setWriteDir();
 800242e:	f7ff f93f 	bl	80016b0 <setWriteDir>
	return ret;
 8002432:	89bb      	ldrh	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200001d4 	.word	0x200001d4
 8002440:	40020400 	.word	0x40020400
 8002444:	40020000 	.word	0x40020000
 8002448:	40020800 	.word	0x40020800

0800244c <readReg32>:

static uint32_t readReg32(uint16_t reg)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff1a 	bl	8002294 <readReg>
 8002460:	4603      	mov	r3, r0
 8002462:	81fb      	strh	r3, [r7, #14]
	uint16_t l = readReg(reg, 1);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff13 	bl	8002294 <readReg>
 800246e:	4603      	mov	r3, r0
 8002470:	81bb      	strh	r3, [r7, #12]
	return ((uint32_t) h << 16) | (l);
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	89bb      	ldrh	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <readReg40>:

static uint32_t readReg40(uint16_t reg)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff feff 	bl	8002294 <readReg>
 8002496:	4603      	mov	r3, r0
 8002498:	81fb      	strh	r3, [r7, #14]
	uint16_t m = readReg(reg, 1);
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fef8 	bl	8002294 <readReg>
 80024a4:	4603      	mov	r3, r0
 80024a6:	81bb      	strh	r3, [r7, #12]
	uint16_t l = readReg(reg, 2);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fef1 	bl	8002294 <readReg>
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
	return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	061a      	lsls	r2, r3, #24
 80024ba:	89bb      	ldrh	r3, [r7, #12]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4313      	orrs	r3, r2
 80024c0:	897a      	ldrh	r2, [r7, #10]
 80024c2:	0a12      	lsrs	r2, r2, #8
 80024c4:	b292      	uxth	r2, r2
 80024c6:	4313      	orrs	r3, r2
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <setAddrWindow>:
{
	pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

static void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	80fb      	strh	r3, [r7, #6]
 80024e2:	4603      	mov	r3, r0
 80024e4:	80bb      	strh	r3, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
 80024ea:	4613      	mov	r3, r2
 80024ec:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80024ee:	4b80      	ldr	r3, [pc, #512]	@ (80026f0 <setAddrWindow+0x220>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f249 3227 	movw	r2, #37671	@ 0x9327
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d117      	bne.n	800252a <setAddrWindow+0x5a>
		if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80024fa:	4b7e      	ldr	r3, [pc, #504]	@ (80026f4 <setAddrWindow+0x224>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <setAddrWindow+0x42>
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	b29b      	uxth	r3, r3
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	883b      	ldrh	r3, [r7, #0]
 800250c:	3320      	adds	r3, #32
 800250e:	b29b      	uxth	r3, r3
 8002510:	803b      	strh	r3, [r7, #0]
		if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8002512:	4b78      	ldr	r3, [pc, #480]	@ (80026f4 <setAddrWindow+0x224>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <setAddrWindow+0x5a>
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	3320      	adds	r3, #32
 800251e:	b29b      	uxth	r3, r3
 8002520:	80fb      	strh	r3, [r7, #6]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	3320      	adds	r3, #32
 8002526:	b29b      	uxth	r3, r3
 8002528:	807b      	strh	r3, [r7, #2]
	}
#endif
#if 1
	if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800252a:	4b71      	ldr	r3, [pc, #452]	@ (80026f0 <setAddrWindow+0x220>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002532:	4293      	cmp	r3, r2
 8002534:	d128      	bne.n	8002588 <setAddrWindow+0xb8>
 8002536:	4b6f      	ldr	r3, [pc, #444]	@ (80026f4 <setAddrWindow+0x224>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d022      	beq.n	8002588 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	b29b      	uxth	r3, r3
 800254a:	81fb      	strh	r3, [r7, #14]
 800254c:	883a      	ldrh	r2, [r7, #0]
 800254e:	88bb      	ldrh	r3, [r7, #4]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8002556:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <setAddrWindow+0x9c>
 800255e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002562:	b29b      	uxth	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	803b      	strh	r3, [r7, #0]
 800256a:	e00d      	b.n	8002588 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 800256c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <setAddrWindow+0xb8>
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	89bb      	ldrh	r3, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	807b      	strh	r3, [r7, #2]
 800257e:	883a      	ldrh	r2, [r7, #0]
 8002580:	89bb      	ldrh	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	803b      	strh	r3, [r7, #0]
	}
#endif
	if (_lcd_capable & MIPI_DCS_REV1) {
 8002588:	4b5b      	ldr	r3, [pc, #364]	@ (80026f8 <setAddrWindow+0x228>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d054      	beq.n	800263e <setAddrWindow+0x16e>
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <setAddrWindow+0x22c>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b2d8      	uxtb	r0, r3
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	121b      	asrs	r3, r3, #8
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	b2d9      	uxtb	r1, r3
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ac:	121b      	asrs	r3, r3, #8
 80025ae:	b21b      	sxth	r3, r3
 80025b0:	b2dc      	uxtb	r4, r3
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4623      	mov	r3, r4
 80025ba:	f7ff fccb 	bl	8001f54 <WriteCmdParam4>
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80025be:	4b50      	ldr	r3, [pc, #320]	@ (8002700 <setAddrWindow+0x230>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b2d8      	uxtb	r0, r3
 80025c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025c8:	121b      	asrs	r3, r3, #8
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025d6:	121b      	asrs	r3, r3, #8
 80025d8:	b21b      	sxth	r3, r3
 80025da:	b2dc      	uxtb	r4, r3
 80025dc:	883b      	ldrh	r3, [r7, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	f7ff fcb6 	bl	8001f54 <WriteCmdParam4>
		if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80025e8:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <setAddrWindow+0x234>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d07b      	beq.n	80026e8 <setAddrWindow+0x218>
 80025f0:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <setAddrWindow+0x220>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	2b65      	cmp	r3, #101	@ 0x65
 80025f6:	d177      	bne.n	80026e8 <setAddrWindow+0x218>
			uint8_t d[2];
			d[0] = x >> 8; d[1] = x;
 80025f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fc:	121b      	asrs	r3, r3, #8
 80025fe:	b21b      	sxth	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	723b      	strb	r3, [r7, #8]
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 800260a:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <setAddrWindow+0x238>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	f107 0208 	add.w	r2, r7, #8
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff facf 	bl	8001bb8 <WriteCmdParamN>
			d[0] = y >> 8; d[1] = y;
 800261a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800261e:	121b      	asrs	r3, r3, #8
 8002620:	b21b      	sxth	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	723b      	strb	r3, [r7, #8]
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MP, 2, d);
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <setAddrWindow+0x23c>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	f107 0208 	add.w	r2, r7, #8
 8002634:	2102      	movs	r1, #2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fabe 	bl	8001bb8 <WriteCmdParamN>
			tft_writeCmdData(_SP, y);
			tft_writeCmdData(_EC, x1);
			tft_writeCmdData(_EP, y1);
		}
	}
}
 800263c:	e054      	b.n	80026e8 <setAddrWindow+0x218>
		tft_writeCmdData(_MC, x);
 800263e:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <setAddrWindow+0x238>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8d2 	bl	80027f0 <tft_writeCmdData>
		tft_writeCmdData(_MP, y);
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <setAddrWindow+0x23c>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	88ba      	ldrh	r2, [r7, #4]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f8cb 	bl	80027f0 <tft_writeCmdData>
		if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800265a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800265e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002662:	429a      	cmp	r2, r3
 8002664:	d105      	bne.n	8002672 <setAddrWindow+0x1a2>
 8002666:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800266a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800266e:	429a      	cmp	r2, r3
 8002670:	d03a      	beq.n	80026e8 <setAddrWindow+0x218>
			if (_lcd_capable & XSA_XEA_16BIT) {
 8002672:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <setAddrWindow+0x228>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <setAddrWindow+0x1e0>
				if (rotation & 1)
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <setAddrWindow+0x224>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <setAddrWindow+0x1ce>
					y1 = y = (y1 << 8) | y;
 800268a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	4313      	orrs	r3, r2
 8002696:	80bb      	strh	r3, [r7, #4]
 8002698:	88bb      	ldrh	r3, [r7, #4]
 800269a:	803b      	strh	r3, [r7, #0]
 800269c:	e008      	b.n	80026b0 <setAddrWindow+0x1e0>
					x1 = x = (x1 << 8) | x;
 800269e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	80fb      	strh	r3, [r7, #6]
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	807b      	strh	r3, [r7, #2]
			tft_writeCmdData(_SC, x);
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <setAddrWindow+0x22c>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f899 	bl	80027f0 <tft_writeCmdData>
			tft_writeCmdData(_SP, y);
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <setAddrWindow+0x230>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	88ba      	ldrh	r2, [r7, #4]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f892 	bl	80027f0 <tft_writeCmdData>
			tft_writeCmdData(_EC, x1);
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <setAddrWindow+0x240>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	887a      	ldrh	r2, [r7, #2]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f88b 	bl	80027f0 <tft_writeCmdData>
			tft_writeCmdData(_EP, y1);
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <setAddrWindow+0x244>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	883a      	ldrh	r2, [r7, #0]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f884 	bl	80027f0 <tft_writeCmdData>
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	200001de 	.word	0x200001de
 80026f4:	200001d8 	.word	0x200001d8
 80026f8:	200001dc 	.word	0x200001dc
 80026fc:	200001ea 	.word	0x200001ea
 8002700:	200001ee 	.word	0x200001ee
 8002704:	200001d5 	.word	0x200001d5
 8002708:	200001e4 	.word	0x200001e4
 800270c:	200001e6 	.word	0x200001e6
 8002710:	200001ec 	.word	0x200001ec
 8002714:	200001f0 	.word	0x200001f0

08002718 <writePixel>:

static void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	460b      	mov	r3, r1
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	807b      	strh	r3, [r7, #2]
	tft_drawPixel(x, y, color);
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002734:	4618      	mov	r0, r3
 8002736:	f001 fdf9 	bl	800432c <tft_drawPixel>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <delay>:
 * @details Precisa ser customizada de acordo com o microcontrolador
 *
 * @param time unidade de us
 */
static void delay (uint32_t time)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <delay+0x2c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8002754:	bf00      	nop
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <delay+0x2c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8f9      	bhi.n	8002756 <delay+0x12>
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000118 	.word	0x20000118

08002774 <tft_color565>:

/* Funções públicas **********************************************************/
uint16_t tft_color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	460b      	mov	r3, r1
 8002780:	71bb      	strb	r3, [r7, #6]
 8002782:	4613      	mov	r3, r2
 8002784:	717b      	strb	r3, [r7, #5]
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	b21b      	sxth	r3, r3
 800278c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002790:	f023 0307 	bic.w	r3, r3, #7
 8002794:	b21a      	sxth	r2, r3
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	b21b      	sxth	r3, r3
 800279c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <tft_readPixel>:

uint16_t tft_readPixel(int16_t x, int16_t y) { uint16_t color; tft_readGRAM(x, y, &color, 1, 1); return color; }
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80bb      	strh	r3, [r7, #4]
 80027d0:	f107 020e 	add.w	r2, r7, #14
 80027d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80027d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80027dc:	2301      	movs	r3, #1
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	f000 f817 	bl	8002814 <tft_readGRAM>
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <tft_writeCmdData>:

void tft_writeCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	80fb      	strh	r3, [r7, #6]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80bb      	strh	r3, [r7, #4]
 8002800:	88ba      	ldrh	r2, [r7, #4]
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f880 	bl	800190c <writecmddata>
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <tft_readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t tft_readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08b      	sub	sp, #44	@ 0x2c
 8002818:	af00      	add	r7, sp, #0
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	81fb      	strh	r3, [r7, #14]
 8002822:	460b      	mov	r3, r1
 8002824:	81bb      	strh	r3, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
	uint16_t ret, dummy, _MR = _MW;
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <tft_readGRAM+0x88>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t n = w * h, row = 0, col = 0;
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002834:	fb12 f303 	smulbb	r3, r2, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800283c:	2300      	movs	r3, #0
 800283e:	843b      	strh	r3, [r7, #32]
 8002840:	2300      	movs	r3, #0
 8002842:	83fb      	strh	r3, [r7, #30]
	uint8_t r, g, b, tmp;

	if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <tft_readGRAM+0x8c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <tft_readGRAM+0x48>
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <tft_readGRAM+0x90>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <tft_readGRAM+0x48>
		_MR = 0x2E;
 8002858:	232e      	movs	r3, #46	@ 0x2e
 800285a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (_lcd_ID == 0x1602)
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <tft_readGRAM+0x94>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <tft_readGRAM+0x58>
		_MR = 0x2E;
 8002868:	232e      	movs	r3, #46	@ 0x2e
 800286a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 800286c:	89fa      	ldrh	r2, [r7, #14]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	4413      	add	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21c      	sxth	r4, r3
 800287a:	89ba      	ldrh	r2, [r7, #12]
 800287c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800287e:	4413      	add	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29b      	uxth	r3, r3
 8002886:	b21b      	sxth	r3, r3
 8002888:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800288c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002890:	4622      	mov	r2, r4
 8002892:	f7ff fe1d 	bl	80024d0 <setAddrWindow>
	while (n > 0) {
 8002896:	f000 bd86 	b.w	80033a6 <tft_readGRAM+0xb92>
 800289a:	bf00      	nop
 800289c:	200001e8 	.word	0x200001e8
 80028a0:	200001d5 	.word	0x200001d5
 80028a4:	200001dc 	.word	0x200001dc
 80028a8:	200001de 	.word	0x200001de
		if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80028ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002b30 <tft_readGRAM+0x31c>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <tft_readGRAM+0xc8>
			tft_writeCmdData(_MC, x + col);
 80028b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002b34 <tft_readGRAM+0x320>)
 80028ba:	8818      	ldrh	r0, [r3, #0]
 80028bc:	89fa      	ldrh	r2, [r7, #14]
 80028be:	8bfb      	ldrh	r3, [r7, #30]
 80028c0:	4413      	add	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7ff ff93 	bl	80027f0 <tft_writeCmdData>
			tft_writeCmdData(_MP, y + row);
 80028ca:	4b9b      	ldr	r3, [pc, #620]	@ (8002b38 <tft_readGRAM+0x324>)
 80028cc:	8818      	ldrh	r0, [r3, #0]
 80028ce:	89ba      	ldrh	r2, [r7, #12]
 80028d0:	8c3b      	ldrh	r3, [r7, #32]
 80028d2:	4413      	add	r3, r2
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7ff ff8a 	bl	80027f0 <tft_writeCmdData>
		}
		CS_ACTIVE;
 80028dc:	2101      	movs	r1, #1
 80028de:	4897      	ldr	r0, [pc, #604]	@ (8002b3c <tft_readGRAM+0x328>)
 80028e0:	f7fe fdce 	bl	8001480 <PIN_LOW>
		WriteCmd(_MR);
 80028e4:	2110      	movs	r1, #16
 80028e6:	4896      	ldr	r0, [pc, #600]	@ (8002b40 <tft_readGRAM+0x32c>)
 80028e8:	f7fe fdca 	bl	8001480 <PIN_LOW>
 80028ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	777b      	strb	r3, [r7, #29]
 80028f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028f6:	773b      	strb	r3, [r7, #28]
 80028f8:	4b91      	ldr	r3, [pc, #580]	@ (8002b40 <tft_readGRAM+0x32c>)
 80028fa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80028fe:	619a      	str	r2, [r3, #24]
 8002900:	4b8e      	ldr	r3, [pc, #568]	@ (8002b3c <tft_readGRAM+0x328>)
 8002902:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8002906:	619a      	str	r2, [r3, #24]
 8002908:	4b8e      	ldr	r3, [pc, #568]	@ (8002b44 <tft_readGRAM+0x330>)
 800290a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800290e:	619a      	str	r2, [r3, #24]
 8002910:	7f7b      	ldrb	r3, [r7, #29]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002918:	7f7b      	ldrb	r3, [r7, #29]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002920:	431a      	orrs	r2, r3
 8002922:	7f7b      	ldrb	r3, [r7, #29]
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800292a:	431a      	orrs	r2, r3
 800292c:	4b84      	ldr	r3, [pc, #528]	@ (8002b40 <tft_readGRAM+0x32c>)
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	7f7b      	ldrb	r3, [r7, #29]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002938:	7f7b      	ldrb	r3, [r7, #29]
 800293a:	105b      	asrs	r3, r3, #1
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	431a      	orrs	r2, r3
 8002942:	7f7b      	ldrb	r3, [r7, #29]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	431a      	orrs	r2, r3
 800294c:	7f7b      	ldrb	r3, [r7, #29]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	431a      	orrs	r2, r3
 8002954:	4b79      	ldr	r3, [pc, #484]	@ (8002b3c <tft_readGRAM+0x328>)
 8002956:	619a      	str	r2, [r3, #24]
 8002958:	7f7b      	ldrb	r3, [r7, #29]
 800295a:	019b      	lsls	r3, r3, #6
 800295c:	4a79      	ldr	r2, [pc, #484]	@ (8002b44 <tft_readGRAM+0x330>)
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	2102      	movs	r1, #2
 8002966:	4876      	ldr	r0, [pc, #472]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002968:	f7fe fd8a 	bl	8001480 <PIN_LOW>
 800296c:	2102      	movs	r1, #2
 800296e:	4874      	ldr	r0, [pc, #464]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002970:	f7fe fd86 	bl	8001480 <PIN_LOW>
 8002974:	2102      	movs	r1, #2
 8002976:	4872      	ldr	r0, [pc, #456]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002978:	f7fe fd82 	bl	8001480 <PIN_LOW>
 800297c:	2102      	movs	r1, #2
 800297e:	4870      	ldr	r0, [pc, #448]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002980:	f7fe fd8e 	bl	80014a0 <PIN_HIGH>
 8002984:	2102      	movs	r1, #2
 8002986:	486e      	ldr	r0, [pc, #440]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002988:	f7fe fd8a 	bl	80014a0 <PIN_HIGH>
 800298c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b40 <tft_readGRAM+0x32c>)
 800298e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002992:	619a      	str	r2, [r3, #24]
 8002994:	4b69      	ldr	r3, [pc, #420]	@ (8002b3c <tft_readGRAM+0x328>)
 8002996:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800299a:	619a      	str	r2, [r3, #24]
 800299c:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <tft_readGRAM+0x330>)
 800299e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	7f3b      	ldrb	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80029ac:	7f3b      	ldrb	r3, [r7, #28]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b4:	431a      	orrs	r2, r3
 80029b6:	7f3b      	ldrb	r3, [r7, #28]
 80029b8:	025b      	lsls	r3, r3, #9
 80029ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029be:	431a      	orrs	r2, r3
 80029c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002b40 <tft_readGRAM+0x32c>)
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	7f3b      	ldrb	r3, [r7, #28]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80029cc:	7f3b      	ldrb	r3, [r7, #28]
 80029ce:	105b      	asrs	r3, r3, #1
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	7f3b      	ldrb	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	431a      	orrs	r2, r3
 80029e0:	7f3b      	ldrb	r3, [r7, #28]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	431a      	orrs	r2, r3
 80029e8:	4b54      	ldr	r3, [pc, #336]	@ (8002b3c <tft_readGRAM+0x328>)
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	7f3b      	ldrb	r3, [r7, #28]
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	4a54      	ldr	r2, [pc, #336]	@ (8002b44 <tft_readGRAM+0x330>)
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	2102      	movs	r1, #2
 80029fa:	4851      	ldr	r0, [pc, #324]	@ (8002b40 <tft_readGRAM+0x32c>)
 80029fc:	f7fe fd40 	bl	8001480 <PIN_LOW>
 8002a00:	2102      	movs	r1, #2
 8002a02:	484f      	ldr	r0, [pc, #316]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a04:	f7fe fd3c 	bl	8001480 <PIN_LOW>
 8002a08:	2102      	movs	r1, #2
 8002a0a:	484d      	ldr	r0, [pc, #308]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a0c:	f7fe fd38 	bl	8001480 <PIN_LOW>
 8002a10:	2102      	movs	r1, #2
 8002a12:	484b      	ldr	r0, [pc, #300]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a14:	f7fe fd44 	bl	80014a0 <PIN_HIGH>
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4849      	ldr	r0, [pc, #292]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a1c:	f7fe fd40 	bl	80014a0 <PIN_HIGH>
 8002a20:	2110      	movs	r1, #16
 8002a22:	4847      	ldr	r0, [pc, #284]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a24:	f7fe fd3c 	bl	80014a0 <PIN_HIGH>
		setReadDir();
 8002a28:	f7fe fe14 	bl	8001654 <setReadDir>
		if (_lcd_capable & READ_NODUMMY) {
 8002a2c:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <tft_readGRAM+0x31c>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 816d 	bne.w	8002d14 <tft_readGRAM+0x500>
			;
		} else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <tft_readGRAM+0x31c>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <tft_readGRAM+0x23e>
 8002a46:	4b40      	ldr	r3, [pc, #256]	@ (8002b48 <tft_readGRAM+0x334>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f241 2289 	movw	r2, #4745	@ 0x1289
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d17c      	bne.n	8002b4c <tft_readGRAM+0x338>
			READ_8(r);
 8002a52:	2101      	movs	r1, #1
 8002a54:	483a      	ldr	r0, [pc, #232]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a56:	f7fe fd23 	bl	80014a0 <PIN_HIGH>
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4838      	ldr	r0, [pc, #224]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a5e:	f7fe fd0f 	bl	8001480 <PIN_LOW>
 8002a62:	2101      	movs	r1, #1
 8002a64:	4836      	ldr	r0, [pc, #216]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a66:	f7fe fd0b 	bl	8001480 <PIN_LOW>
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4834      	ldr	r0, [pc, #208]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a6e:	f7fe fd07 	bl	8001480 <PIN_LOW>
 8002a72:	2101      	movs	r1, #1
 8002a74:	4832      	ldr	r0, [pc, #200]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a76:	f7fe fd03 	bl	8001480 <PIN_LOW>
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4830      	ldr	r0, [pc, #192]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a7e:	f7fe fcff 	bl	8001480 <PIN_LOW>
 8002a82:	2101      	movs	r1, #1
 8002a84:	482e      	ldr	r0, [pc, #184]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a86:	f7fe fcfb 	bl	8001480 <PIN_LOW>
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	482c      	ldr	r0, [pc, #176]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a8e:	f7fe fcf7 	bl	8001480 <PIN_LOW>
 8002a92:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <tft_readGRAM+0x328>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <tft_readGRAM+0x328>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <tft_readGRAM+0x328>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <tft_readGRAM+0x328>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <tft_readGRAM+0x330>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	75fb      	strb	r3, [r7, #23]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4807      	ldr	r0, [pc, #28]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002b22:	f7fe fcbd 	bl	80014a0 <PIN_HIGH>
 8002b26:	2101      	movs	r1, #1
 8002b28:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <tft_readGRAM+0x32c>)
 8002b2a:	f7fe fcb9 	bl	80014a0 <PIN_HIGH>
 8002b2e:	e0f1      	b.n	8002d14 <tft_readGRAM+0x500>
 8002b30:	200001dc 	.word	0x200001dc
 8002b34:	200001e4 	.word	0x200001e4
 8002b38:	200001e6 	.word	0x200001e6
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020800 	.word	0x40020800
 8002b48:	200001de 	.word	0x200001de
		} else {
			READ_16(dummy);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	48ac      	ldr	r0, [pc, #688]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b50:	f7fe fca6 	bl	80014a0 <PIN_HIGH>
 8002b54:	2101      	movs	r1, #1
 8002b56:	48aa      	ldr	r0, [pc, #680]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b58:	f7fe fc92 	bl	8001480 <PIN_LOW>
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	48a8      	ldr	r0, [pc, #672]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b60:	f7fe fc8e 	bl	8001480 <PIN_LOW>
 8002b64:	2101      	movs	r1, #1
 8002b66:	48a6      	ldr	r0, [pc, #664]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b68:	f7fe fc8a 	bl	8001480 <PIN_LOW>
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	48a4      	ldr	r0, [pc, #656]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b70:	f7fe fc86 	bl	8001480 <PIN_LOW>
 8002b74:	2101      	movs	r1, #1
 8002b76:	48a2      	ldr	r0, [pc, #648]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b78:	f7fe fc82 	bl	8001480 <PIN_LOW>
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	48a0      	ldr	r0, [pc, #640]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b80:	f7fe fc7e 	bl	8001480 <PIN_LOW>
 8002b84:	2101      	movs	r1, #1
 8002b86:	489e      	ldr	r0, [pc, #632]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b88:	f7fe fc7a 	bl	8001480 <PIN_LOW>
 8002b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b9a      	ldr	r3, [pc, #616]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b95      	ldr	r3, [pc, #596]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b90      	ldr	r3, [pc, #576]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b87      	ldr	r3, [pc, #540]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b84      	ldr	r3, [pc, #528]	@ (8002e08 <tft_readGRAM+0x5f4>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b7e      	ldr	r3, [pc, #504]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	76fb      	strb	r3, [r7, #27]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4879      	ldr	r0, [pc, #484]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c1c:	f7fe fc40 	bl	80014a0 <PIN_HIGH>
 8002c20:	2101      	movs	r1, #1
 8002c22:	4877      	ldr	r0, [pc, #476]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c24:	f7fe fc3c 	bl	80014a0 <PIN_HIGH>
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4875      	ldr	r0, [pc, #468]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c2c:	f7fe fc38 	bl	80014a0 <PIN_HIGH>
 8002c30:	2101      	movs	r1, #1
 8002c32:	4873      	ldr	r0, [pc, #460]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c34:	f7fe fc24 	bl	8001480 <PIN_LOW>
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4871      	ldr	r0, [pc, #452]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c3c:	f7fe fc20 	bl	8001480 <PIN_LOW>
 8002c40:	2101      	movs	r1, #1
 8002c42:	486f      	ldr	r0, [pc, #444]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c44:	f7fe fc1c 	bl	8001480 <PIN_LOW>
 8002c48:	2101      	movs	r1, #1
 8002c4a:	486d      	ldr	r0, [pc, #436]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c4c:	f7fe fc18 	bl	8001480 <PIN_LOW>
 8002c50:	2101      	movs	r1, #1
 8002c52:	486b      	ldr	r0, [pc, #428]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c54:	f7fe fc14 	bl	8001480 <PIN_LOW>
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4869      	ldr	r0, [pc, #420]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c5c:	f7fe fc10 	bl	8001480 <PIN_LOW>
 8002c60:	2101      	movs	r1, #1
 8002c62:	4867      	ldr	r0, [pc, #412]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c64:	f7fe fc0c 	bl	8001480 <PIN_LOW>
 8002c68:	4b65      	ldr	r3, [pc, #404]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b63      	ldr	r3, [pc, #396]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b5e      	ldr	r3, [pc, #376]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b55      	ldr	r3, [pc, #340]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <tft_readGRAM+0x5f4>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b47      	ldr	r3, [pc, #284]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	833b      	strh	r3, [r7, #24]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4842      	ldr	r0, [pc, #264]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002cf8:	f7fe fbd2 	bl	80014a0 <PIN_HIGH>
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4840      	ldr	r0, [pc, #256]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d00:	f7fe fbce 	bl	80014a0 <PIN_HIGH>
 8002d04:	7efb      	ldrb	r3, [r7, #27]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	833b      	strh	r3, [r7, #24]
		}
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002d14:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <tft_readGRAM+0x5f8>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 830f 	bne.w	8003340 <tft_readGRAM+0xb2c>
 8002d22:	2101      	movs	r1, #1
 8002d24:	4836      	ldr	r0, [pc, #216]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d26:	f7fe fbbb 	bl	80014a0 <PIN_HIGH>
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4834      	ldr	r0, [pc, #208]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d2e:	f7fe fba7 	bl	8001480 <PIN_LOW>
 8002d32:	2101      	movs	r1, #1
 8002d34:	4832      	ldr	r0, [pc, #200]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d36:	f7fe fba3 	bl	8001480 <PIN_LOW>
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4830      	ldr	r0, [pc, #192]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d3e:	f7fe fb9f 	bl	8001480 <PIN_LOW>
 8002d42:	2101      	movs	r1, #1
 8002d44:	482e      	ldr	r0, [pc, #184]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d46:	f7fe fb9b 	bl	8001480 <PIN_LOW>
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	482c      	ldr	r0, [pc, #176]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d4e:	f7fe fb97 	bl	8001480 <PIN_LOW>
 8002d52:	2101      	movs	r1, #1
 8002d54:	482a      	ldr	r0, [pc, #168]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d56:	f7fe fb93 	bl	8001480 <PIN_LOW>
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4828      	ldr	r0, [pc, #160]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d5e:	f7fe fb8f 	bl	8001480 <PIN_LOW>
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <tft_readGRAM+0x5f0>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <tft_readGRAM+0x5f4>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	0a5b      	lsrs	r3, r3, #9
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	75fb      	strb	r3, [r7, #23]
 8002dee:	2101      	movs	r1, #1
 8002df0:	4803      	ldr	r0, [pc, #12]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002df2:	f7fe fb55 	bl	80014a0 <PIN_HIGH>
 8002df6:	2101      	movs	r1, #1
 8002df8:	4801      	ldr	r0, [pc, #4]	@ (8002e00 <tft_readGRAM+0x5ec>)
 8002dfa:	f7fe fb51 	bl	80014a0 <PIN_HIGH>
		while (n)
 8002dfe:	e29f      	b.n	8003340 <tft_readGRAM+0xb2c>
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	200001de 	.word	0x200001de
		{
			if (_lcd_capable & READ_24BITS)
 8002e10:	4bab      	ldr	r3, [pc, #684]	@ (80030c0 <tft_readGRAM+0x8ac>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 816b 	beq.w	80030f4 <tft_readGRAM+0x8e0>
			{
				READ_8(r);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	48a8      	ldr	r0, [pc, #672]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e22:	f7fe fb3d 	bl	80014a0 <PIN_HIGH>
 8002e26:	2101      	movs	r1, #1
 8002e28:	48a6      	ldr	r0, [pc, #664]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e2a:	f7fe fb29 	bl	8001480 <PIN_LOW>
 8002e2e:	2101      	movs	r1, #1
 8002e30:	48a4      	ldr	r0, [pc, #656]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e32:	f7fe fb25 	bl	8001480 <PIN_LOW>
 8002e36:	2101      	movs	r1, #1
 8002e38:	48a2      	ldr	r0, [pc, #648]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e3a:	f7fe fb21 	bl	8001480 <PIN_LOW>
 8002e3e:	2101      	movs	r1, #1
 8002e40:	48a0      	ldr	r0, [pc, #640]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e42:	f7fe fb1d 	bl	8001480 <PIN_LOW>
 8002e46:	2101      	movs	r1, #1
 8002e48:	489e      	ldr	r0, [pc, #632]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e4a:	f7fe fb19 	bl	8001480 <PIN_LOW>
 8002e4e:	2101      	movs	r1, #1
 8002e50:	489c      	ldr	r0, [pc, #624]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e52:	f7fe fb15 	bl	8001480 <PIN_LOW>
 8002e56:	2101      	movs	r1, #1
 8002e58:	489a      	ldr	r0, [pc, #616]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e5a:	f7fe fb11 	bl	8001480 <PIN_LOW>
 8002e5e:	4b99      	ldr	r3, [pc, #612]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b96      	ldr	r3, [pc, #600]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b92      	ldr	r3, [pc, #584]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b8d      	ldr	r3, [pc, #564]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b83      	ldr	r3, [pc, #524]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b81      	ldr	r3, [pc, #516]	@ (80030cc <tft_readGRAM+0x8b8>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b7a      	ldr	r3, [pc, #488]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	0a5b      	lsrs	r3, r3, #9
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	75fb      	strb	r3, [r7, #23]
 8002eea:	2101      	movs	r1, #1
 8002eec:	4875      	ldr	r0, [pc, #468]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002eee:	f7fe fad7 	bl	80014a0 <PIN_HIGH>
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4873      	ldr	r0, [pc, #460]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002ef6:	f7fe fad3 	bl	80014a0 <PIN_HIGH>
				READ_8(g);
 8002efa:	2101      	movs	r1, #1
 8002efc:	4871      	ldr	r0, [pc, #452]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002efe:	f7fe facf 	bl	80014a0 <PIN_HIGH>
 8002f02:	2101      	movs	r1, #1
 8002f04:	486f      	ldr	r0, [pc, #444]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f06:	f7fe fabb 	bl	8001480 <PIN_LOW>
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	486d      	ldr	r0, [pc, #436]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f0e:	f7fe fab7 	bl	8001480 <PIN_LOW>
 8002f12:	2101      	movs	r1, #1
 8002f14:	486b      	ldr	r0, [pc, #428]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f16:	f7fe fab3 	bl	8001480 <PIN_LOW>
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4869      	ldr	r0, [pc, #420]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f1e:	f7fe faaf 	bl	8001480 <PIN_LOW>
 8002f22:	2101      	movs	r1, #1
 8002f24:	4867      	ldr	r0, [pc, #412]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f26:	f7fe faab 	bl	8001480 <PIN_LOW>
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4865      	ldr	r0, [pc, #404]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f2e:	f7fe faa7 	bl	8001480 <PIN_LOW>
 8002f32:	2101      	movs	r1, #1
 8002f34:	4863      	ldr	r0, [pc, #396]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f36:	f7fe faa3 	bl	8001480 <PIN_LOW>
 8002f3a:	4b62      	ldr	r3, [pc, #392]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4b5f      	ldr	r3, [pc, #380]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b56      	ldr	r3, [pc, #344]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b51      	ldr	r3, [pc, #324]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b4c      	ldr	r3, [pc, #304]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <tft_readGRAM+0x8b8>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	0a5b      	lsrs	r3, r3, #9
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	757b      	strb	r3, [r7, #21]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	483e      	ldr	r0, [pc, #248]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fca:	f7fe fa69 	bl	80014a0 <PIN_HIGH>
 8002fce:	2101      	movs	r1, #1
 8002fd0:	483c      	ldr	r0, [pc, #240]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fd2:	f7fe fa65 	bl	80014a0 <PIN_HIGH>
				READ_8(b);
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	483a      	ldr	r0, [pc, #232]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fda:	f7fe fa61 	bl	80014a0 <PIN_HIGH>
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4838      	ldr	r0, [pc, #224]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fe2:	f7fe fa4d 	bl	8001480 <PIN_LOW>
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4836      	ldr	r0, [pc, #216]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002fea:	f7fe fa49 	bl	8001480 <PIN_LOW>
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4834      	ldr	r0, [pc, #208]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002ff2:	f7fe fa45 	bl	8001480 <PIN_LOW>
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4832      	ldr	r0, [pc, #200]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8002ffa:	f7fe fa41 	bl	8001480 <PIN_LOW>
 8002ffe:	2101      	movs	r1, #1
 8003000:	4830      	ldr	r0, [pc, #192]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8003002:	f7fe fa3d 	bl	8001480 <PIN_LOW>
 8003006:	2101      	movs	r1, #1
 8003008:	482e      	ldr	r0, [pc, #184]	@ (80030c4 <tft_readGRAM+0x8b0>)
 800300a:	f7fe fa39 	bl	8001480 <PIN_LOW>
 800300e:	2101      	movs	r1, #1
 8003010:	482c      	ldr	r0, [pc, #176]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8003012:	f7fe fa35 	bl	8001480 <PIN_LOW>
 8003016:	4b2b      	ldr	r3, [pc, #172]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4313      	orrs	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <tft_readGRAM+0x8b4>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4b1f      	ldr	r3, [pc, #124]	@ (80030c8 <tft_readGRAM+0x8b4>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <tft_readGRAM+0x8b4>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <tft_readGRAM+0x8b0>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <tft_readGRAM+0x8b8>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <tft_readGRAM+0x8b0>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4313      	orrs	r3, r2
 80030a0:	753b      	strb	r3, [r7, #20]
 80030a2:	2101      	movs	r1, #1
 80030a4:	4807      	ldr	r0, [pc, #28]	@ (80030c4 <tft_readGRAM+0x8b0>)
 80030a6:	f7fe f9fb 	bl	80014a0 <PIN_HIGH>
 80030aa:	2101      	movs	r1, #1
 80030ac:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <tft_readGRAM+0x8b0>)
 80030ae:	f7fe f9f7 	bl	80014a0 <PIN_HIGH>
				if (_lcd_capable & READ_BGR)
 80030b2:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <tft_readGRAM+0x8ac>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <tft_readGRAM+0x8ce>
 80030be:	e007      	b.n	80030d0 <tft_readGRAM+0x8bc>
 80030c0:	200001dc 	.word	0x200001dc
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
					ret = tft_color565(b, g, r);
 80030d0:	7dfa      	ldrb	r2, [r7, #23]
 80030d2:	7d79      	ldrb	r1, [r7, #21]
 80030d4:	7d3b      	ldrb	r3, [r7, #20]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fb4c 	bl	8002774 <tft_color565>
 80030dc:	4603      	mov	r3, r0
 80030de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80030e0:	e113      	b.n	800330a <tft_readGRAM+0xaf6>
				else
					ret = tft_color565(r, g, b);
 80030e2:	7d3a      	ldrb	r2, [r7, #20]
 80030e4:	7d79      	ldrb	r1, [r7, #21]
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fb43 	bl	8002774 <tft_color565>
 80030ee:	4603      	mov	r3, r0
 80030f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80030f2:	e10a      	b.n	800330a <tft_readGRAM+0xaf6>
			} else
			{
				READ_16(ret);
 80030f4:	2101      	movs	r1, #1
 80030f6:	4895      	ldr	r0, [pc, #596]	@ (800334c <tft_readGRAM+0xb38>)
 80030f8:	f7fe f9d2 	bl	80014a0 <PIN_HIGH>
 80030fc:	2101      	movs	r1, #1
 80030fe:	4893      	ldr	r0, [pc, #588]	@ (800334c <tft_readGRAM+0xb38>)
 8003100:	f7fe f9be 	bl	8001480 <PIN_LOW>
 8003104:	2101      	movs	r1, #1
 8003106:	4891      	ldr	r0, [pc, #580]	@ (800334c <tft_readGRAM+0xb38>)
 8003108:	f7fe f9ba 	bl	8001480 <PIN_LOW>
 800310c:	2101      	movs	r1, #1
 800310e:	488f      	ldr	r0, [pc, #572]	@ (800334c <tft_readGRAM+0xb38>)
 8003110:	f7fe f9b6 	bl	8001480 <PIN_LOW>
 8003114:	2101      	movs	r1, #1
 8003116:	488d      	ldr	r0, [pc, #564]	@ (800334c <tft_readGRAM+0xb38>)
 8003118:	f7fe f9b2 	bl	8001480 <PIN_LOW>
 800311c:	2101      	movs	r1, #1
 800311e:	488b      	ldr	r0, [pc, #556]	@ (800334c <tft_readGRAM+0xb38>)
 8003120:	f7fe f9ae 	bl	8001480 <PIN_LOW>
 8003124:	2101      	movs	r1, #1
 8003126:	4889      	ldr	r0, [pc, #548]	@ (800334c <tft_readGRAM+0xb38>)
 8003128:	f7fe f9aa 	bl	8001480 <PIN_LOW>
 800312c:	2101      	movs	r1, #1
 800312e:	4887      	ldr	r0, [pc, #540]	@ (800334c <tft_readGRAM+0xb38>)
 8003130:	f7fe f9a6 	bl	8001480 <PIN_LOW>
 8003134:	4b85      	ldr	r3, [pc, #532]	@ (800334c <tft_readGRAM+0xb38>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b83      	ldr	r3, [pc, #524]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4313      	orrs	r3, r2
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b7e      	ldr	r3, [pc, #504]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4313      	orrs	r3, r2
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b79      	ldr	r3, [pc, #484]	@ (8003350 <tft_readGRAM+0xb3c>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b75      	ldr	r3, [pc, #468]	@ (8003350 <tft_readGRAM+0xb3c>)
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b70      	ldr	r3, [pc, #448]	@ (800334c <tft_readGRAM+0xb38>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4313      	orrs	r3, r2
 800319a:	b2da      	uxtb	r2, r3
 800319c:	4b6d      	ldr	r3, [pc, #436]	@ (8003354 <tft_readGRAM+0xb40>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b67      	ldr	r3, [pc, #412]	@ (800334c <tft_readGRAM+0xb38>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	0a5b      	lsrs	r3, r3, #9
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	75bb      	strb	r3, [r7, #22]
 80031c0:	2101      	movs	r1, #1
 80031c2:	4862      	ldr	r0, [pc, #392]	@ (800334c <tft_readGRAM+0xb38>)
 80031c4:	f7fe f96c 	bl	80014a0 <PIN_HIGH>
 80031c8:	2101      	movs	r1, #1
 80031ca:	4860      	ldr	r0, [pc, #384]	@ (800334c <tft_readGRAM+0xb38>)
 80031cc:	f7fe f968 	bl	80014a0 <PIN_HIGH>
 80031d0:	2101      	movs	r1, #1
 80031d2:	485e      	ldr	r0, [pc, #376]	@ (800334c <tft_readGRAM+0xb38>)
 80031d4:	f7fe f964 	bl	80014a0 <PIN_HIGH>
 80031d8:	2101      	movs	r1, #1
 80031da:	485c      	ldr	r0, [pc, #368]	@ (800334c <tft_readGRAM+0xb38>)
 80031dc:	f7fe f950 	bl	8001480 <PIN_LOW>
 80031e0:	2101      	movs	r1, #1
 80031e2:	485a      	ldr	r0, [pc, #360]	@ (800334c <tft_readGRAM+0xb38>)
 80031e4:	f7fe f94c 	bl	8001480 <PIN_LOW>
 80031e8:	2101      	movs	r1, #1
 80031ea:	4858      	ldr	r0, [pc, #352]	@ (800334c <tft_readGRAM+0xb38>)
 80031ec:	f7fe f948 	bl	8001480 <PIN_LOW>
 80031f0:	2101      	movs	r1, #1
 80031f2:	4856      	ldr	r0, [pc, #344]	@ (800334c <tft_readGRAM+0xb38>)
 80031f4:	f7fe f944 	bl	8001480 <PIN_LOW>
 80031f8:	2101      	movs	r1, #1
 80031fa:	4854      	ldr	r0, [pc, #336]	@ (800334c <tft_readGRAM+0xb38>)
 80031fc:	f7fe f940 	bl	8001480 <PIN_LOW>
 8003200:	2101      	movs	r1, #1
 8003202:	4852      	ldr	r0, [pc, #328]	@ (800334c <tft_readGRAM+0xb38>)
 8003204:	f7fe f93c 	bl	8001480 <PIN_LOW>
 8003208:	2101      	movs	r1, #1
 800320a:	4850      	ldr	r0, [pc, #320]	@ (800334c <tft_readGRAM+0xb38>)
 800320c:	f7fe f938 	bl	8001480 <PIN_LOW>
 8003210:	4b4e      	ldr	r3, [pc, #312]	@ (800334c <tft_readGRAM+0xb38>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321c:	b29a      	uxth	r2, r3
 800321e:	4b4c      	ldr	r3, [pc, #304]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	b29b      	uxth	r3, r3
 8003226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322a:	b29b      	uxth	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	b29b      	uxth	r3, r3
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	b29b      	uxth	r3, r3
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	b29b      	uxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b42      	ldr	r3, [pc, #264]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	b29b      	uxth	r3, r3
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	b29b      	uxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b29a      	uxth	r2, r3
 8003256:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <tft_readGRAM+0xb3c>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	b29b      	uxth	r3, r3
 8003262:	4313      	orrs	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b39      	ldr	r3, [pc, #228]	@ (800334c <tft_readGRAM+0xb38>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	b29b      	uxth	r3, r3
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	b29b      	uxth	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b29a      	uxth	r2, r3
 8003278:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <tft_readGRAM+0xb40>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	b29b      	uxth	r3, r3
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	b29b      	uxth	r3, r3
 8003286:	4313      	orrs	r3, r2
 8003288:	b29a      	uxth	r2, r3
 800328a:	4b30      	ldr	r3, [pc, #192]	@ (800334c <tft_readGRAM+0xb38>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	0a5b      	lsrs	r3, r3, #9
 8003290:	b29b      	uxth	r3, r3
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800329c:	2101      	movs	r1, #1
 800329e:	482b      	ldr	r0, [pc, #172]	@ (800334c <tft_readGRAM+0xb38>)
 80032a0:	f7fe f8fe 	bl	80014a0 <PIN_HIGH>
 80032a4:	2101      	movs	r1, #1
 80032a6:	4829      	ldr	r0, [pc, #164]	@ (800334c <tft_readGRAM+0xb38>)
 80032a8:	f7fe f8fa 	bl	80014a0 <PIN_HIGH>
 80032ac:	7dbb      	ldrb	r3, [r7, #22]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_LOWHIGH)
 80032bc:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <tft_readGRAM+0xb44>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <tft_readGRAM+0xac8>
					ret = (ret >> 8) | (ret << 8);
 80032c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	b21a      	sxth	r2, r3
 80032d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	b21b      	sxth	r3, r3
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b21b      	sxth	r3, r3
 80032da:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_BGR)
 80032dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <tft_readGRAM+0xb44>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <tft_readGRAM+0xaf6>
					ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80032e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80032ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032f4:	0adb      	lsrs	r3, r3, #11
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b21a      	sxth	r2, r3
 80032fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003300:	02db      	lsls	r3, r3, #11
 8003302:	b21b      	sxth	r3, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	b21b      	sxth	r3, r3
 8003308:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
#if defined(SUPPORT_9488_555)
    		if (is555) ret = color555_to_565(ret);
 800330a:	4b14      	ldr	r3, [pc, #80]	@ (800335c <tft_readGRAM+0xb48>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <tft_readGRAM+0xb0a>
 8003312:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe f939 	bl	800158c <color555_to_565>
 800331a:	4603      	mov	r3, r0
 800331c:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
*block++ = ret;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	60ba      	str	r2, [r7, #8]
 8003324:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003326:	801a      	strh	r2, [r3, #0]
n--;
 8003328:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	847b      	strh	r3, [r7, #34]	@ 0x22
if (!(_lcd_capable & AUTO_READINC))
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <tft_readGRAM+0xb44>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00f      	beq.n	8003360 <tft_readGRAM+0xb4c>
		while (n)
 8003340:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f ad63 	bne.w	8002e10 <tft_readGRAM+0x5fc>
 800334a:	e00a      	b.n	8003362 <tft_readGRAM+0xb4e>
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400
 8003354:	40020800 	.word	0x40020800
 8003358:	200001dc 	.word	0x200001dc
 800335c:	200001d6 	.word	0x200001d6
	break;
 8003360:	bf00      	nop
		}
		if (++col >= w) {
 8003362:	8bfb      	ldrh	r3, [r7, #30]
 8003364:	3301      	adds	r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	83fb      	strh	r3, [r7, #30]
 800336a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003372:	429a      	cmp	r2, r3
 8003374:	db0d      	blt.n	8003392 <tft_readGRAM+0xb7e>
			col = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	83fb      	strh	r3, [r7, #30]
			if (++row >= h)
 800337a:	8c3b      	ldrh	r3, [r7, #32]
 800337c:	3301      	adds	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	843b      	strh	r3, [r7, #32]
 8003382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003386:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800338a:	429a      	cmp	r2, r3
 800338c:	db01      	blt.n	8003392 <tft_readGRAM+0xb7e>
				row = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	843b      	strh	r3, [r7, #32]
		}
		RD_IDLE;
 8003392:	2101      	movs	r1, #1
 8003394:	4814      	ldr	r0, [pc, #80]	@ (80033e8 <tft_readGRAM+0xbd4>)
 8003396:	f7fe f883 	bl	80014a0 <PIN_HIGH>
		CS_IDLE;
 800339a:	2101      	movs	r1, #1
 800339c:	4813      	ldr	r0, [pc, #76]	@ (80033ec <tft_readGRAM+0xbd8>)
 800339e:	f7fe f87f 	bl	80014a0 <PIN_HIGH>
		setWriteDir();
 80033a2:	f7fe f985 	bl	80016b0 <setWriteDir>
	while (n > 0) {
 80033a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f73f aa7e 	bgt.w	80028ac <tft_readGRAM+0x98>
	}
	if (!(_lcd_capable & MIPI_DCS_REV1))
 80033b0:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <tft_readGRAM+0xbdc>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d110      	bne.n	80033de <tft_readGRAM+0xbca>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 80033bc:	f7fe f8ae 	bl	800151c <width>
 80033c0:	4603      	mov	r3, r0
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b21c      	sxth	r4, r3
 80033c8:	f7fe f8b4 	bl	8001534 <height>
 80033cc:	4603      	mov	r3, r0
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	4622      	mov	r2, r4
 80033d6:	2100      	movs	r1, #0
 80033d8:	2000      	movs	r0, #0
 80033da:	f7ff f879 	bl	80024d0 <setAddrWindow>
	return 0;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	372c      	adds	r7, #44	@ 0x2c
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	200001dc 	.word	0x200001dc

080033f4 <tft_reset>:

void tft_reset(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	done_reset = 1;
 80033f8:	4b20      	ldr	r3, [pc, #128]	@ (800347c <tft_reset+0x88>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
	setWriteDir();
 80033fe:	f7fe f957 	bl	80016b0 <setWriteDir>
	CTL_INIT();
 8003402:	2101      	movs	r1, #1
 8003404:	481e      	ldr	r0, [pc, #120]	@ (8003480 <tft_reset+0x8c>)
 8003406:	f7fe f871 	bl	80014ec <PIN_OUTPUT>
 800340a:	2102      	movs	r1, #2
 800340c:	481c      	ldr	r0, [pc, #112]	@ (8003480 <tft_reset+0x8c>)
 800340e:	f7fe f86d 	bl	80014ec <PIN_OUTPUT>
 8003412:	2110      	movs	r1, #16
 8003414:	481a      	ldr	r0, [pc, #104]	@ (8003480 <tft_reset+0x8c>)
 8003416:	f7fe f869 	bl	80014ec <PIN_OUTPUT>
 800341a:	2101      	movs	r1, #1
 800341c:	4819      	ldr	r0, [pc, #100]	@ (8003484 <tft_reset+0x90>)
 800341e:	f7fe f865 	bl	80014ec <PIN_OUTPUT>
 8003422:	2102      	movs	r1, #2
 8003424:	4818      	ldr	r0, [pc, #96]	@ (8003488 <tft_reset+0x94>)
 8003426:	f7fe f861 	bl	80014ec <PIN_OUTPUT>
	CS_IDLE;
 800342a:	2101      	movs	r1, #1
 800342c:	4815      	ldr	r0, [pc, #84]	@ (8003484 <tft_reset+0x90>)
 800342e:	f7fe f837 	bl	80014a0 <PIN_HIGH>
	RD_IDLE;
 8003432:	2101      	movs	r1, #1
 8003434:	4812      	ldr	r0, [pc, #72]	@ (8003480 <tft_reset+0x8c>)
 8003436:	f7fe f833 	bl	80014a0 <PIN_HIGH>
	WR_IDLE;
 800343a:	2102      	movs	r1, #2
 800343c:	4810      	ldr	r0, [pc, #64]	@ (8003480 <tft_reset+0x8c>)
 800343e:	f7fe f82f 	bl	80014a0 <PIN_HIGH>
	RESET_IDLE;
 8003442:	2102      	movs	r1, #2
 8003444:	4810      	ldr	r0, [pc, #64]	@ (8003488 <tft_reset+0x94>)
 8003446:	f7fe f82b 	bl	80014a0 <PIN_HIGH>
	delay(50);
 800344a:	2032      	movs	r0, #50	@ 0x32
 800344c:	f7ff f97a 	bl	8002744 <delay>
	RESET_ACTIVE;
 8003450:	2102      	movs	r1, #2
 8003452:	480d      	ldr	r0, [pc, #52]	@ (8003488 <tft_reset+0x94>)
 8003454:	f7fe f814 	bl	8001480 <PIN_LOW>
	delay(100);
 8003458:	2064      	movs	r0, #100	@ 0x64
 800345a:	f7ff f973 	bl	8002744 <delay>
	RESET_IDLE;
 800345e:	2102      	movs	r1, #2
 8003460:	4809      	ldr	r0, [pc, #36]	@ (8003488 <tft_reset+0x94>)
 8003462:	f7fe f81d 	bl	80014a0 <PIN_HIGH>
	delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8003466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800346a:	f7ff f96b 	bl	8002744 <delay>
	tft_writeCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 800346e:	2100      	movs	r1, #0
 8003470:	20b0      	movs	r0, #176	@ 0xb0
 8003472:	f7ff f9bd 	bl	80027f0 <tft_writeCmdData>
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200001d4 	.word	0x200001d4
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800

0800348c <tft_init>:

void tft_init(uint16_t ID)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
	int16_t *p16;               //so we can "write" to a const protected variable.
	const uint8_t *table8_ads = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
	int16_t table_size;
	_lcd_xor = 0;
 800349e:	4bd2      	ldr	r3, [pc, #840]	@ (80037e8 <tft_init+0x35c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	801a      	strh	r2, [r3, #0]
	switch (_lcd_ID = ID) {
 80034a4:	4ad1      	ldr	r2, [pc, #836]	@ (80037ec <tft_init+0x360>)
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	8013      	strh	r3, [r2, #0]
 80034aa:	4bd0      	ldr	r3, [pc, #832]	@ (80037ec <tft_init+0x360>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	f24c 5205 	movw	r2, #50437	@ 0xc505
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f000 82c8 	beq.w	8003a48 <tft_init+0x5bc>
 80034b8:	f24c 5205 	movw	r2, #50437	@ 0xc505
 80034bc:	4293      	cmp	r3, r2
 80034be:	f300 8302 	bgt.w	8003ac6 <tft_init+0x63a>
 80034c2:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f000 82ee 	beq.w	8003aa8 <tft_init+0x61c>
 80034cc:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80034d0:	4293      	cmp	r3, r2
 80034d2:	f300 82f8 	bgt.w	8003ac6 <tft_init+0x63a>
 80034d6:	f24b 5205 	movw	r2, #46341	@ 0xb505
 80034da:	4293      	cmp	r3, r2
 80034dc:	f000 82b4 	beq.w	8003a48 <tft_init+0x5bc>
 80034e0:	f24b 5205 	movw	r2, #46341	@ 0xb505
 80034e4:	4293      	cmp	r3, r2
 80034e6:	f300 82ee 	bgt.w	8003ac6 <tft_init+0x63a>
 80034ea:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f000 8235 	beq.w	800395e <tft_init+0x4d2>
 80034f4:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f300 82e4 	bgt.w	8003ac6 <tft_init+0x63a>
 80034fe:	f249 4288 	movw	r2, #38024	@ 0x9488
 8003502:	4293      	cmp	r3, r2
 8003504:	f300 82df 	bgt.w	8003ac6 <tft_init+0x63a>
 8003508:	f249 4287 	movw	r2, #38023	@ 0x9487
 800350c:	4293      	cmp	r3, r2
 800350e:	f280 8284 	bge.w	8003a1a <tft_init+0x58e>
 8003512:	f249 4286 	movw	r2, #38022	@ 0x9486
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 8265 	beq.w	80039e6 <tft_init+0x55a>
 800351c:	f249 4286 	movw	r2, #38022	@ 0x9486
 8003520:	4293      	cmp	r3, r2
 8003522:	f300 82d0 	bgt.w	8003ac6 <tft_init+0x63a>
 8003526:	f249 4281 	movw	r2, #38017	@ 0x9481
 800352a:	4293      	cmp	r3, r2
 800352c:	f000 8244 	beq.w	80039b8 <tft_init+0x52c>
 8003530:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003534:	4293      	cmp	r3, r2
 8003536:	f300 82c6 	bgt.w	8003ac6 <tft_init+0x63a>
 800353a:	f249 3241 	movw	r2, #37697	@ 0x9341
 800353e:	4293      	cmp	r3, r2
 8003540:	f300 82c1 	bgt.w	8003ac6 <tft_init+0x63a>
 8003544:	f249 3202 	movw	r2, #37634	@ 0x9302
 8003548:	4293      	cmp	r3, r2
 800354a:	f280 80a5 	bge.w	8003698 <tft_init+0x20c>
 800354e:	f249 0290 	movw	r2, #37008	@ 0x9090
 8003552:	4293      	cmp	r3, r2
 8003554:	f000 818b 	beq.w	800386e <tft_init+0x3e2>
 8003558:	f249 0290 	movw	r2, #37008	@ 0x9090
 800355c:	4293      	cmp	r3, r2
 800355e:	f300 82b2 	bgt.w	8003ac6 <tft_init+0x63a>
 8003562:	f248 3257 	movw	r2, #33623	@ 0x8357
 8003566:	4293      	cmp	r3, r2
 8003568:	f000 817c 	beq.w	8003864 <tft_init+0x3d8>
 800356c:	f248 3257 	movw	r2, #33623	@ 0x8357
 8003570:	4293      	cmp	r3, r2
 8003572:	f300 82a8 	bgt.w	8003ac6 <tft_init+0x63a>
 8003576:	f248 0231 	movw	r2, #32817	@ 0x8031
 800357a:	4293      	cmp	r3, r2
 800357c:	f000 8169 	beq.w	8003852 <tft_init+0x3c6>
 8003580:	f248 0231 	movw	r2, #32817	@ 0x8031
 8003584:	4293      	cmp	r3, r2
 8003586:	f300 829e 	bgt.w	8003ac6 <tft_init+0x63a>
 800358a:	f247 7296 	movw	r2, #30614	@ 0x7796
 800358e:	4293      	cmp	r3, r2
 8003590:	f000 823e 	beq.w	8003a10 <tft_init+0x584>
 8003594:	f247 7296 	movw	r2, #30614	@ 0x7796
 8003598:	4293      	cmp	r3, r2
 800359a:	f300 8294 	bgt.w	8003ac6 <tft_init+0x63a>
 800359e:	f247 7293 	movw	r2, #30611	@ 0x7793
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f000 8280 	beq.w	8003aa8 <tft_init+0x61c>
 80035a8:	f247 7293 	movw	r2, #30611	@ 0x7793
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f300 828a 	bgt.w	8003ac6 <tft_init+0x63a>
 80035b2:	f247 7289 	movw	r2, #30601	@ 0x7789
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f000 8142 	beq.w	8003840 <tft_init+0x3b4>
 80035bc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80035c0:	4293      	cmp	r3, r2
 80035c2:	f300 8280 	bgt.w	8003ac6 <tft_init+0x63a>
 80035c6:	f646 0209 	movw	r2, #26633	@ 0x6809
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f000 8190 	beq.w	80038f0 <tft_init+0x464>
 80035d0:	f646 0209 	movw	r2, #26633	@ 0x6809
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f300 8276 	bgt.w	8003ac6 <tft_init+0x63a>
 80035da:	f245 4208 	movw	r2, #21512	@ 0x5408
 80035de:	4293      	cmp	r3, r2
 80035e0:	f000 8176 	beq.w	80038d0 <tft_init+0x444>
 80035e4:	f245 4208 	movw	r2, #21512	@ 0x5408
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f300 826c 	bgt.w	8003ac6 <tft_init+0x63a>
 80035ee:	f245 3210 	movw	r2, #21264	@ 0x5310
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f000 810f 	beq.w	8003816 <tft_init+0x38a>
 80035f8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f300 8262 	bgt.w	8003ac6 <tft_init+0x63a>
 8003602:	f242 0253 	movw	r2, #8275	@ 0x2053
 8003606:	4293      	cmp	r3, r2
 8003608:	f000 81a4 	beq.w	8003954 <tft_init+0x4c8>
 800360c:	f242 0253 	movw	r2, #8275	@ 0x2053
 8003610:	4293      	cmp	r3, r2
 8003612:	f300 8258 	bgt.w	8003ac6 <tft_init+0x63a>
 8003616:	f241 6202 	movw	r2, #5634	@ 0x1602
 800361a:	4293      	cmp	r3, r2
 800361c:	f000 8191 	beq.w	8003942 <tft_init+0x4b6>
 8003620:	f241 6202 	movw	r2, #5634	@ 0x1602
 8003624:	4293      	cmp	r3, r2
 8003626:	f300 824e 	bgt.w	8003ac6 <tft_init+0x63a>
 800362a:	f241 5281 	movw	r2, #5505	@ 0x1581
 800362e:	4293      	cmp	r3, r2
 8003630:	f000 81bd 	beq.w	80039ae <tft_init+0x522>
 8003634:	f241 5281 	movw	r2, #5505	@ 0x1581
 8003638:	4293      	cmp	r3, r2
 800363a:	f300 8244 	bgt.w	8003ac6 <tft_init+0x63a>
 800363e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003642:	4293      	cmp	r3, r2
 8003644:	f000 80de 	beq.w	8003804 <tft_init+0x378>
 8003648:	f241 5226 	movw	r2, #5414	@ 0x1526
 800364c:	4293      	cmp	r3, r2
 800364e:	f300 823a 	bgt.w	8003ac6 <tft_init+0x63a>
 8003652:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8003656:	f000 80bd 	beq.w	80037d4 <tft_init+0x348>
 800365a:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 800365e:	f300 8232 	bgt.w	8003ac6 <tft_init+0x63a>
 8003662:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003666:	4293      	cmp	r3, r2
 8003668:	f000 80a0 	beq.w	80037ac <tft_init+0x320>
 800366c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003670:	4293      	cmp	r3, r2
 8003672:	f300 8228 	bgt.w	8003ac6 <tft_init+0x63a>
 8003676:	f241 5205 	movw	r2, #5381	@ 0x1505
 800367a:	4293      	cmp	r3, r2
 800367c:	f000 812d 	beq.w	80038da <tft_init+0x44e>
 8003680:	f241 5205 	movw	r2, #5381	@ 0x1505
 8003684:	4293      	cmp	r3, r2
 8003686:	f300 821e 	bgt.w	8003ac6 <tft_init+0x63a>
 800368a:	2b01      	cmp	r3, #1
 800368c:	f000 811b 	beq.w	80038c6 <tft_init+0x43a>
 8003690:	2b99      	cmp	r3, #153	@ 0x99
 8003692:	f000 8103 	beq.w	800389c <tft_init+0x410>
 8003696:	e216      	b.n	8003ac6 <tft_init+0x63a>
 8003698:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 800369c:	3b02      	subs	r3, #2
 800369e:	2b3f      	cmp	r3, #63	@ 0x3f
 80036a0:	f200 8211 	bhi.w	8003ac6 <tft_init+0x63a>
 80036a4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <tft_init+0x220>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	08003969 	.word	0x08003969
 80036b0:	08003ac7 	.word	0x08003ac7
 80036b4:	08003ac7 	.word	0x08003ac7
 80036b8:	08003ac7 	.word	0x08003ac7
 80036bc:	08003ac7 	.word	0x08003ac7
 80036c0:	08003ac7 	.word	0x08003ac7
 80036c4:	08003ac7 	.word	0x08003ac7
 80036c8:	08003ac7 	.word	0x08003ac7
 80036cc:	08003ac7 	.word	0x08003ac7
 80036d0:	08003ac7 	.word	0x08003ac7
 80036d4:	08003ac7 	.word	0x08003ac7
 80036d8:	08003ac7 	.word	0x08003ac7
 80036dc:	08003ac7 	.word	0x08003ac7
 80036e0:	08003ac7 	.word	0x08003ac7
 80036e4:	08003ac7 	.word	0x08003ac7
 80036e8:	08003ac7 	.word	0x08003ac7
 80036ec:	08003ac7 	.word	0x08003ac7
 80036f0:	08003ac7 	.word	0x08003ac7
 80036f4:	08003ac7 	.word	0x08003ac7
 80036f8:	08003ac7 	.word	0x08003ac7
 80036fc:	08003ac7 	.word	0x08003ac7
 8003700:	08003ac7 	.word	0x08003ac7
 8003704:	08003ac7 	.word	0x08003ac7
 8003708:	08003ac7 	.word	0x08003ac7
 800370c:	08003ac7 	.word	0x08003ac7
 8003710:	08003ac7 	.word	0x08003ac7
 8003714:	08003ac7 	.word	0x08003ac7
 8003718:	08003ac7 	.word	0x08003ac7
 800371c:	08003ac7 	.word	0x08003ac7
 8003720:	08003ac7 	.word	0x08003ac7
 8003724:	080038db 	.word	0x080038db
 8003728:	08003ac7 	.word	0x08003ac7
 800372c:	08003ac7 	.word	0x08003ac7
 8003730:	08003ac7 	.word	0x08003ac7
 8003734:	08003ac7 	.word	0x08003ac7
 8003738:	080038fb 	.word	0x080038fb
 800373c:	08003ac7 	.word	0x08003ac7
 8003740:	0800391b 	.word	0x0800391b
 8003744:	080038fb 	.word	0x080038fb
 8003748:	0800397d 	.word	0x0800397d
 800374c:	08003ac7 	.word	0x08003ac7
 8003750:	08003ac7 	.word	0x08003ac7
 8003754:	08003ac7 	.word	0x08003ac7
 8003758:	08003ac7 	.word	0x08003ac7
 800375c:	08003ac7 	.word	0x08003ac7
 8003760:	08003ac7 	.word	0x08003ac7
 8003764:	08003ac7 	.word	0x08003ac7
 8003768:	08003905 	.word	0x08003905
 800376c:	08003ac7 	.word	0x08003ac7
 8003770:	08003ac7 	.word	0x08003ac7
 8003774:	08003ac7 	.word	0x08003ac7
 8003778:	08003905 	.word	0x08003905
 800377c:	08003ac7 	.word	0x08003ac7
 8003780:	08003ac7 	.word	0x08003ac7
 8003784:	08003973 	.word	0x08003973
 8003788:	08003ac7 	.word	0x08003ac7
 800378c:	08003ac7 	.word	0x08003ac7
 8003790:	08003ac7 	.word	0x08003ac7
 8003794:	08003ac7 	.word	0x08003ac7
 8003798:	08003ac7 	.word	0x08003ac7
 800379c:	08003ac7 	.word	0x08003ac7
 80037a0:	08003ac7 	.word	0x08003ac7
 80037a4:	08003993 	.word	0x08003993
 80037a8:	0800399d 	.word	0x0800399d
		init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
		break;
#endif

	case 0x1511:                // Unknown from Levy
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 80037ac:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <tft_init+0x364>)
 80037ae:	2203      	movs	r2, #3
 80037b0:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61511_regValues[]  = {
				0xB0, 1, 0x00,       //Command Access Protect
		};
		table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 80037b2:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <tft_init+0x368>)
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	2303      	movs	r3, #3
 80037b8:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <tft_init+0x36c>)
 80037bc:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80037c4:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <tft_init+0x370>)
 80037c8:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80037d0:	801a      	strh	r2, [r3, #0]
		break;
 80037d2:	e17e      	b.n	8003ad2 <tft_init+0x646>

	case 0x1520:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <tft_init+0x364>)
 80037d6:	f240 4213 	movw	r2, #1043	@ 0x413
 80037da:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61520_regValues[]  = {
				0xB0, 1, 0x00,      //Command Access Protect
				0xC0, 1, 0x0A,      //DM=1, BGR=1
		};
		table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <tft_init+0x374>)
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	2306      	movs	r3, #6
 80037e2:	837b      	strh	r3, [r7, #26]
		break;
 80037e4:	e175      	b.n	8003ad2 <tft_init+0x646>
 80037e6:	bf00      	nop
 80037e8:	200001da 	.word	0x200001da
 80037ec:	200001de 	.word	0x200001de
 80037f0:	200001dc 	.word	0x200001dc
 80037f4:	08053098 	.word	0x08053098
 80037f8:	08001535 	.word	0x08001535
 80037fc:	0800151d 	.word	0x0800151d
 8003800:	0805309c 	.word	0x0805309c

	case 0x1526:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003804:	4b95      	ldr	r3, [pc, #596]	@ (8003a5c <tft_init+0x5d0>)
 8003806:	f240 4213 	movw	r2, #1043	@ 0x413
 800380a:	801a      	strh	r2, [r3, #0]
				0xB0, 1, 0x03,      //Command Access
				0xE2, 1, 0x3F,      //Command Write Access
				0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
				0xE2, 1, 0x00,      //Command Write Protect
		};
		table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800380c:	4b94      	ldr	r3, [pc, #592]	@ (8003a60 <tft_init+0x5d4>)
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	230c      	movs	r3, #12
 8003812:	837b      	strh	r3, [r7, #26]
		break;
 8003814:	e15d      	b.n	8003ad2 <tft_init+0x646>
		init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
		break;
#endif

	case 0x5310:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8003816:	4b91      	ldr	r3, [pc, #580]	@ (8003a5c <tft_init+0x5d0>)
 8003818:	f640 6213 	movw	r2, #3603	@ 0xe13
 800381c:	801a      	strh	r2, [r3, #0]
		static const uint8_t NT35310_regValues[]  = {        //
				TFTLCD_DELAY8, 10,    //just some dummy
		};
		table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800381e:	4b91      	ldr	r3, [pc, #580]	@ (8003a64 <tft_init+0x5d8>)
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	2302      	movs	r3, #2
 8003824:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003826:	4b90      	ldr	r3, [pc, #576]	@ (8003a68 <tft_init+0x5dc>)
 8003828:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003830:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003832:	4b8e      	ldr	r3, [pc, #568]	@ (8003a6c <tft_init+0x5e0>)
 8003834:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800383c:	801a      	strh	r2, [r3, #0]
		break;
 800383e:	e148      	b.n	8003ad2 <tft_init+0x646>
		init_table16(ST7781_regValues, sizeof(ST7781_regValues));
		break;
#endif

	case 0x7789:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003840:	4b86      	ldr	r3, [pc, #536]	@ (8003a5c <tft_init+0x5d0>)
 8003842:	f240 4213 	movw	r2, #1043	@ 0x413
 8003846:	801a      	strh	r2, [r3, #0]
				(0x55), 1, 0x90,    //WRCACE  [00]
				(0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
				(0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
				(0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
		};
		table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8003848:	4b89      	ldr	r3, [pc, #548]	@ (8003a70 <tft_init+0x5e4>)
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	2341      	movs	r3, #65	@ 0x41
 800384e:	837b      	strh	r3, [r7, #26]
		break;
 8003850:	e13f      	b.n	8003ad2 <tft_init+0x646>

	case 0x8031:      //Unknown BangGood thanks PrinceCharles
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003852:	4b82      	ldr	r3, [pc, #520]	@ (8003a5c <tft_init+0x5d0>)
 8003854:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003858:	801a      	strh	r2, [r3, #0]
		static const uint8_t FK8031_regValues[]  = {
				// 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
				0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
				0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
		};
		table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 800385a:	4b86      	ldr	r3, [pc, #536]	@ (8003a74 <tft_init+0x5e8>)
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	2312      	movs	r3, #18
 8003860:	837b      	strh	r3, [r7, #26]
		break;
 8003862:	e136      	b.n	8003ad2 <tft_init+0x646>
		//        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
		break;
#endif

	case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003864:	4b7d      	ldr	r3, [pc, #500]	@ (8003a5c <tft_init+0x5d0>)
 8003866:	f241 4203 	movw	r2, #5123	@ 0x1403
 800386a:	801a      	strh	r2, [r3, #0]
		goto common_8357;
 800386c:	e003      	b.n	8003876 <tft_init+0x3ea>
	case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800386e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a5c <tft_init+0x5d0>)
 8003870:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003874:	801a      	strh	r2, [r3, #0]
		common_8357:
		dummy=1;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
		static const uint8_t HX8357C_regValues[]  = {
				TFTLCD_DELAY8, 1,  //dummy table
		};
		table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800387a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a78 <tft_init+0x5ec>)
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	2302      	movs	r3, #2
 8003880:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003882:	4b79      	ldr	r3, [pc, #484]	@ (8003a68 <tft_init+0x5dc>)
 8003884:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800388c:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 800388e:	4b77      	ldr	r3, [pc, #476]	@ (8003a6c <tft_init+0x5e0>)
 8003890:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003898:	801a      	strh	r2, [r3, #0]
		break;
 800389a:	e11a      	b.n	8003ad2 <tft_init+0x646>

	case 0x0099:                //HX8357-D matches datasheet
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800389c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a5c <tft_init+0x5d0>)
 800389e:	f241 4213 	movw	r2, #5139	@ 0x1413
 80038a2:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
				// HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
				(0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
		};
		table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80038a4:	4b75      	ldr	r3, [pc, #468]	@ (8003a7c <tft_init+0x5f0>)
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	231d      	movs	r3, #29
 80038aa:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80038ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003a68 <tft_init+0x5dc>)
 80038ae:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80038b6:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80038b8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a6c <tft_init+0x5e0>)
 80038ba:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80038c2:	801a      	strh	r2, [r3, #0]
		break;
 80038c4:	e105      	b.n	8003ad2 <tft_init+0x646>
		*p16 = 176;
		break;
#endif

	case 0x0001:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80038c6:	4b65      	ldr	r3, [pc, #404]	@ (8003a5c <tft_init+0x5d0>)
 80038c8:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80038cc:	801a      	strh	r2, [r3, #0]
		goto common_9320;
 80038ce:	e008      	b.n	80038e2 <tft_init+0x456>
	case 0x5408:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80038d0:	4b62      	ldr	r3, [pc, #392]	@ (8003a5c <tft_init+0x5d0>)
 80038d2:	f241 0204 	movw	r2, #4100	@ 0x1004
 80038d6:	801a      	strh	r2, [r3, #0]
		//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
		goto common_9320;
 80038d8:	e003      	b.n	80038e2 <tft_init+0x456>
	case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
	case 0x9320:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80038da:	4b60      	ldr	r3, [pc, #384]	@ (8003a5c <tft_init+0x5d0>)
 80038dc:	f241 0204 	movw	r2, #4100	@ 0x1004
 80038e0:	801a      	strh	r2, [r3, #0]
		common_9320:
		dummy=1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
				0x0098, 0x0000,
				//-----Display on-----------------------
				0x0007, 0x0173,
				TFTLCD_DELAY, 50,
		};
		init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80038e6:	21d8      	movs	r1, #216	@ 0xd8
 80038e8:	4865      	ldr	r0, [pc, #404]	@ (8003a80 <tft_init+0x5f4>)
 80038ea:	f7fe fbb0 	bl	800204e <init_table16>
		break;
 80038ee:	e0f0      	b.n	8003ad2 <tft_init+0x646>
	case 0x6809:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 80038f0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <tft_init+0x5d0>)
 80038f2:	f241 1202 	movw	r2, #4354	@ 0x1102
 80038f6:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 80038f8:	e008      	b.n	800390c <tft_init+0x480>
	case 0x9328:
	case 0x9325:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 80038fa:	4b58      	ldr	r3, [pc, #352]	@ (8003a5c <tft_init+0x5d0>)
 80038fc:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8003900:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 8003902:	e003      	b.n	800390c <tft_init+0x480>
	case 0x9331:
	case 0x9335:
		_lcd_capable = 0 | REV_SCREEN;
 8003904:	4b55      	ldr	r3, [pc, #340]	@ (8003a5c <tft_init+0x5d0>)
 8003906:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800390a:	801a      	strh	r2, [r3, #0]
		common_93x5:
		dummy=1;
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
				//-------------- Panel Control -------------------//
				0x0090, 0x0010,
				0x0092, 0x0000,
				0x0007, 0x0133,     // 262K color and display ON
		};
		init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003910:	21cc      	movs	r1, #204	@ 0xcc
 8003912:	485c      	ldr	r0, [pc, #368]	@ (8003a84 <tft_init+0x5f8>)
 8003914:	f7fe fb9b 	bl	800204e <init_table16>
		break;
 8003918:	e0db      	b.n	8003ad2 <tft_init+0x646>
		*p16 = 240;
		break;
#endif

	case 0x9327:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800391a:	4b50      	ldr	r3, [pc, #320]	@ (8003a5c <tft_init+0x5d0>)
 800391c:	f240 4203 	movw	r2, #1027	@ 0x403
 8003920:	801a      	strh	r2, [r3, #0]
				//            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
				0xCA, 1, 0x00,      //DGC LUT ???
				0xEA, 1, 0x80,      //3-Gamma Function Enable
				//                     0xB0, 1, 0x03,      //Enable Protect
		};
		table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8003922:	4b59      	ldr	r3, [pc, #356]	@ (8003a88 <tft_init+0x5fc>)
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	231e      	movs	r3, #30
 8003928:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 800392a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a68 <tft_init+0x5dc>)
 800392c:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003934:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003936:	4b4d      	ldr	r3, [pc, #308]	@ (8003a6c <tft_init+0x5e0>)
 8003938:	613b      	str	r3, [r7, #16]
		*p16 = 240;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	22f0      	movs	r2, #240	@ 0xf0
 800393e:	801a      	strh	r2, [r3, #0]
		break;
 8003940:	e0c7      	b.n	8003ad2 <tft_init+0x646>
	case 0x1602:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not tft_readGRAM
 8003942:	4b46      	ldr	r3, [pc, #280]	@ (8003a5c <tft_init+0x5d0>)
 8003944:	f240 4203 	movw	r2, #1027	@ 0x403
 8003948:	801a      	strh	r2, [r3, #0]
		static const uint8_t XX1602_regValues[]  = {
				0xB8, 1, 0x01,      //GS [00]
				0xC0, 1, 0x0E,      //??Power [0A]
		};
		table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800394a:	4b50      	ldr	r3, [pc, #320]	@ (8003a8c <tft_init+0x600>)
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	2306      	movs	r3, #6
 8003950:	837b      	strh	r3, [r7, #26]
		break;
 8003952:	e0be      	b.n	8003ad2 <tft_init+0x646>

	case 0x2053:    //weird from BangGood
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8003954:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <tft_init+0x5d0>)
 8003956:	f241 4217 	movw	r2, #5143	@ 0x1417
 800395a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800395c:	e012      	b.n	8003984 <tft_init+0x4f8>
	case 0xAC11:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 800395e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a5c <tft_init+0x5d0>)
 8003960:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003964:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003966:	e00d      	b.n	8003984 <tft_init+0x4f8>
	case 0x9302:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003968:	4b3c      	ldr	r3, [pc, #240]	@ (8003a5c <tft_init+0x5d0>)
 800396a:	f240 4203 	movw	r2, #1027	@ 0x403
 800396e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003970:	e008      	b.n	8003984 <tft_init+0x4f8>
	case 0x9338:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003972:	4b3a      	ldr	r3, [pc, #232]	@ (8003a5c <tft_init+0x5d0>)
 8003974:	f240 4213 	movw	r2, #1043	@ 0x413
 8003978:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800397a:	e003      	b.n	8003984 <tft_init+0x4f8>
	case 0x9329:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 800397c:	4b37      	ldr	r3, [pc, #220]	@ (8003a5c <tft_init+0x5d0>)
 800397e:	f241 6203 	movw	r2, #5635	@ 0x1603
 8003982:	801a      	strh	r2, [r3, #0]
		common_9329:
		dummy=1;
 8003984:	2301      	movs	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
				//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
				//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
				//            0xB7, 1, 0x06,      //Entry Mode Set [06]
				0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
		};
		table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003988:	4b41      	ldr	r3, [pc, #260]	@ (8003a90 <tft_init+0x604>)
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	2303      	movs	r3, #3
 800398e:	837b      	strh	r3, [r7, #26]
		break;
 8003990:	e09f      	b.n	8003ad2 <tft_init+0x646>

	case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003992:	4b32      	ldr	r3, [pc, #200]	@ (8003a5c <tft_init+0x5d0>)
 8003994:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003998:	801a      	strh	r2, [r3, #0]
		goto common_9341;
 800399a:	bf00      	nop
	case 0x9341:
		common_9341:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800399c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a5c <tft_init+0x5d0>)
 800399e:	f240 4213 	movw	r2, #1043	@ 0x413
 80039a2:	801a      	strh	r2, [r3, #0]
			0xC7, 1, 0xC0,      //VCOM 2 [C0]
			0x36, 1, 0x88,      //Memory Access [00]
			0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
			0xB7, 1, 0x07,      //Entry Mode [00]
	};
	table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <tft_init+0x608>)
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	2365      	movs	r3, #101	@ 0x65
 80039aa:	837b      	strh	r3, [r7, #26]
	break;
 80039ac:	e091      	b.n	8003ad2 <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 320;
		break;
#endif
	case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80039ae:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <tft_init+0x5d0>)
 80039b0:	f240 4213 	movw	r2, #1043	@ 0x413
 80039b4:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80039b6:	e003      	b.n	80039c0 <tft_init+0x534>
	case 0x9481:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80039b8:	4b28      	ldr	r3, [pc, #160]	@ (8003a5c <tft_init+0x5d0>)
 80039ba:	f240 4207 	movw	r2, #1031	@ 0x407
 80039be:	801a      	strh	r2, [r3, #0]
		common_9481:
		dummy=1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
				0x0C, 2, 0x00, 0x55, //RDCOLMOD
				0xB4, 1, 0x00,      //SETDISPLAY
				//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
				0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
		};
		table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80039c4:	4b34      	ldr	r3, [pc, #208]	@ (8003a98 <tft_init+0x60c>)
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	2345      	movs	r3, #69	@ 0x45
 80039ca:	837b      	strh	r3, [r7, #26]
		//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
		//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
		//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
		//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
		//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
		p16 = (int16_t *) & height;
 80039cc:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <tft_init+0x5dc>)
 80039ce:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80039d6:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <tft_init+0x5e0>)
 80039da:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80039e2:	801a      	strh	r2, [r3, #0]
		break;
 80039e4:	e075      	b.n	8003ad2 <tft_init+0x646>
	case 0x9486:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <tft_init+0x5d0>)
 80039e8:	f240 4203 	movw	r2, #1027	@ 0x403
 80039ec:	801a      	strh	r2, [r3, #0]
				// 4.2 WTK 3.5 Inch Initial Code too white
				0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
				0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
		};
		table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80039ee:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <tft_init+0x610>)
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	233b      	movs	r3, #59	@ 0x3b
 80039f4:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80039f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <tft_init+0x5dc>)
 80039f8:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003a00:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <tft_init+0x5e0>)
 8003a04:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003a0c:	801a      	strh	r2, [r3, #0]
		break;
 8003a0e:	e060      	b.n	8003ad2 <tft_init+0x646>
	case 0x7796:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003a10:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <tft_init+0x5d0>)
 8003a12:	f240 4203 	movw	r2, #1027	@ 0x403
 8003a16:	801a      	strh	r2, [r3, #0]
		goto common_9488;
 8003a18:	e003      	b.n	8003a22 <tft_init+0x596>
	case 0x9487:                //with thanks to Charlyf
	case 0x9488:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <tft_init+0x5d0>)
 8003a1c:	f240 4213 	movw	r2, #1043	@ 0x413
 8003a20:	801a      	strh	r2, [r3, #0]
		common_9488:
		dummy=1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
				0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
				0xB7, 1, 0xC6,      //Entry Mode      [06]
				0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
				0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
		};
		table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8003a26:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <tft_init+0x614>)
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	232b      	movs	r3, #43	@ 0x2b
 8003a2c:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <tft_init+0x5dc>)
 8003a30:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003a38:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <tft_init+0x5e0>)
 8003a3c:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003a44:	801a      	strh	r2, [r3, #0]
		break;
 8003a46:	e044      	b.n	8003ad2 <tft_init+0x646>
	case 0xB505:                //R61505V
	case 0xC505:                //R61505W
		_lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <tft_init+0x5d0>)
 8003a4a:	f241 0208 	movw	r2, #4104	@ 0x1008
 8003a4e:	801a      	strh	r2, [r3, #0]
				0x0092, 0x0100,
				0x0093, 0x0701,
				TFTLCD_DELAY, 80,
				0x0007, 0x0100,     //BASEE=1--Display On
		};
		init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003a50:	21b0      	movs	r1, #176	@ 0xb0
 8003a52:	4814      	ldr	r0, [pc, #80]	@ (8003aa4 <tft_init+0x618>)
 8003a54:	f7fe fafb 	bl	800204e <init_table16>
		break;
 8003a58:	e03b      	b.n	8003ad2 <tft_init+0x646>
 8003a5a:	bf00      	nop
 8003a5c:	200001dc 	.word	0x200001dc
 8003a60:	080530a4 	.word	0x080530a4
 8003a64:	080530b0 	.word	0x080530b0
 8003a68:	08001535 	.word	0x08001535
 8003a6c:	0800151d 	.word	0x0800151d
 8003a70:	080530b4 	.word	0x080530b4
 8003a74:	080530f8 	.word	0x080530f8
 8003a78:	0805310c 	.word	0x0805310c
 8003a7c:	08053110 	.word	0x08053110
 8003a80:	08053130 	.word	0x08053130
 8003a84:	08053208 	.word	0x08053208
 8003a88:	080532d4 	.word	0x080532d4
 8003a8c:	080532f4 	.word	0x080532f4
 8003a90:	080532fc 	.word	0x080532fc
 8003a94:	08053300 	.word	0x08053300
 8003a98:	08053368 	.word	0x08053368
 8003a9c:	080533b0 	.word	0x080533b0
 8003aa0:	080533ec 	.word	0x080533ec
 8003aa4:	08053418 	.word	0x08053418

#if defined(SUPPORT_B509_7793)
	case 0x7793:
	case 0xB509:
		_lcd_capable = REV_SCREEN;
 8003aa8:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <tft_init+0x6ec>)
 8003aaa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003aae:	801a      	strh	r2, [r3, #0]
				TFTLCD_DELAY, 50,

				0x0200, 0x0000,
				0x0201, 0x0000,
		};
		init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8003ab0:	21c0      	movs	r1, #192	@ 0xc0
 8003ab2:	4832      	ldr	r0, [pc, #200]	@ (8003b7c <tft_init+0x6f0>)
 8003ab4:	f7fe facb 	bl	800204e <init_table16>
		p16 = (int16_t *) & height;
 8003ab8:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <tft_init+0x6f4>)
 8003aba:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003ac2:	801a      	strh	r2, [r3, #0]
		break;
 8003ac4:	e005      	b.n	8003ad2 <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 854;
		break;
#endif
	default:
		p16 = (int16_t *) & width;
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <tft_init+0x6f8>)
 8003ac8:	613b      	str	r3, [r7, #16]
		*p16 = 0;       //error value for width
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2200      	movs	r2, #0
 8003ace:	801a      	strh	r2, [r3, #0]
		break;
 8003ad0:	bf00      	nop
	}
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8003ad2:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <tft_init+0x6ec>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <tft_init+0x6fc>)
 8003ae8:	801a      	strh	r2, [r3, #0]
	if (table8_ads != NULL) {
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <tft_init+0x680>
		static const uint8_t wake_on[]  = {
				0x11, 0,            //Sleep Out
				TFTLCD_DELAY8, 150,
				0x29, 0,            //Display On
		};
		init_table(&reset_off, sizeof(reset_off));
 8003af0:	2109      	movs	r1, #9
 8003af2:	4826      	ldr	r0, [pc, #152]	@ (8003b8c <tft_init+0x700>)
 8003af4:	f7fe fa52 	bl	8001f9c <init_table>
		init_table(table8_ads, table_size);   //can change PIXFMT
 8003af8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003afc:	4619      	mov	r1, r3
 8003afe:	69f8      	ldr	r0, [r7, #28]
 8003b00:	f7fe fa4c 	bl	8001f9c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8003b04:	2106      	movs	r1, #6
 8003b06:	4822      	ldr	r0, [pc, #136]	@ (8003b90 <tft_init+0x704>)
 8003b08:	f7fe fa48 	bl	8001f9c <init_table>
	}
	tft_setRotation(0);             //PORTRAIT
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f000 f985 	bl	8003e1c <tft_setRotation>
	tft_invertDisplay(false);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f000 fe36 	bl	8004784 <tft_invertDisplay>
#if defined(SUPPORT_9488_555)
	if (_lcd_ID == 0x9488) {
 8003b18:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <tft_init+0x708>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	f249 4288 	movw	r2, #38024	@ 0x9488
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d125      	bne.n	8003b70 <tft_init+0x6e4>
		is555 = 0;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <tft_init+0x70c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
		tft_drawPixel(0, 0, 0xFFE0);
 8003b2a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8003b2e:	2100      	movs	r1, #0
 8003b30:	2000      	movs	r0, #0
 8003b32:	f000 fbfb 	bl	800432c <tft_drawPixel>
		if (tft_readPixel(0, 0) == 0xFF1F) {
 8003b36:	2100      	movs	r1, #0
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fe fe41 	bl	80027c0 <tft_readPixel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d112      	bne.n	8003b70 <tft_init+0x6e4>
			uint8_t pixfmt = 0x06;
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8003b4e:	f107 030f 	add.w	r3, r7, #15
 8003b52:	2201      	movs	r2, #1
 8003b54:	4619      	mov	r1, r3
 8003b56:	203a      	movs	r0, #58	@ 0x3a
 8003b58:	f7fd fd69 	bl	800162e <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <tft_init+0x6ec>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <tft_init+0x6ec>)
 8003b68:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <tft_init+0x70c>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003b70:	bf00      	nop
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200001dc 	.word	0x200001dc
 8003b7c:	080534c8 	.word	0x080534c8
 8003b80:	08001535 	.word	0x08001535
 8003b84:	0800151d 	.word	0x0800151d
 8003b88:	200001e0 	.word	0x200001e0
 8003b8c:	08053588 	.word	0x08053588
 8003b90:	08053594 	.word	0x08053594
 8003b94:	200001de 	.word	0x200001de
 8003b98:	200001d6 	.word	0x200001d6

08003b9c <tft_readID>:

uint16_t tft_readID(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
	uint16_t ret, ret2;
	uint8_t msb;
	ret = readReg(0,0);           //forces a reset() if called before begin()
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7fe fb75 	bl	8002294 <readReg>
 8003baa:	4603      	mov	r3, r0
 8003bac:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	f245 4208 	movw	r2, #21512	@ 0x5408
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d102      	bne.n	8003bbe <tft_readID+0x22>
		return 0x5408;
 8003bb8:	f245 4308 	movw	r3, #21512	@ 0x5408
 8003bbc:	e128      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d102      	bne.n	8003bce <tft_readID+0x32>
		return 0x5420;
 8003bc8:	f245 4320 	movw	r3, #21536	@ 0x5420
 8003bcc:	e120      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x8989)          //SSD1289 is always 8989
 8003bce:	89fb      	ldrh	r3, [r7, #14]
 8003bd0:	f648 1289 	movw	r2, #35209	@ 0x8989
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d102      	bne.n	8003bde <tft_readID+0x42>
		return 0x1289;
 8003bd8:	f241 2389 	movw	r3, #4745	@ 0x1289
 8003bdc:	e118      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg(0x67,0);        //HX8347-A
 8003bde:	2100      	movs	r1, #0
 8003be0:	2067      	movs	r0, #103	@ 0x67
 8003be2:	f7fe fb57 	bl	8002294 <readReg>
 8003be6:	4603      	mov	r3, r0
 8003be8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x4747)
 8003bea:	89fb      	ldrh	r3, [r7, #14]
 8003bec:	f244 7247 	movw	r2, #18247	@ 0x4747
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d102      	bne.n	8003bfa <tft_readID+0x5e>
		return 0x8347;
 8003bf4:	f248 3347 	movw	r3, #33607	@ 0x8347
 8003bf8:	e10a      	b.n	8003e10 <tft_readID+0x274>
	//#if defined(SUPPORT_1963) && USING_16BIT_BUS
	ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8003bfa:	20a1      	movs	r0, #161	@ 0xa1
 8003bfc:	f7fe fc26 	bl	800244c <readReg32>
 8003c00:	4603      	mov	r3, r0
 8003c02:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x6101)
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f246 1201 	movw	r2, #24833	@ 0x6101
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d102      	bne.n	8003c14 <tft_readID+0x78>
		return 0x1963;
 8003c0e:	f641 1363 	movw	r3, #6499	@ 0x1963
 8003c12:	e0fd      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8003c14:	89fb      	ldrh	r3, [r7, #14]
 8003c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d102      	bne.n	8003c24 <tft_readID+0x88>
		return 0x1526;          //subsequent begin() enables Command Access
 8003c1e:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003c22:	e0f5      	b.n	8003e10 <tft_readID+0x274>
	//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
	//        return 0x1520;          //subsequent begin() enables Command Access
	//#endif
	ret = readReg40(0xBF);
 8003c24:	20bf      	movs	r0, #191	@ 0xbf
 8003c26:	f7fe fc2c 	bl	8002482 <readReg40>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	f248 3257 	movw	r2, #33623	@ 0x8357
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d102      	bne.n	8003c3e <tft_readID+0xa2>
		return 0x8357;
 8003c38:	f248 3357 	movw	r3, #33623	@ 0x8357
 8003c3c:	e0e8      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d102      	bne.n	8003c4e <tft_readID+0xb2>
		return 0x9481;
 8003c48:	f249 4381 	movw	r3, #38017	@ 0x9481
 8003c4c:	e0e0      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d102      	bne.n	8003c5e <tft_readID+0xc2>
		return 0x1511;
 8003c58:	f241 5311 	movw	r3, #5393	@ 0x1511
 8003c5c:	e0d8      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003c5e:	89fb      	ldrh	r3, [r7, #14]
 8003c60:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8003c64:	d102      	bne.n	8003c6c <tft_readID+0xd0>
		return 0x1520;
 8003c66:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8003c6a:	e0d1      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d102      	bne.n	8003c7c <tft_readID+0xe0>
		return 0x1526;
 8003c76:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003c7a:	e0c9      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	f241 5281 	movw	r2, #5505	@ 0x1581
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d102      	bne.n	8003c8c <tft_readID+0xf0>
		return 0x1581;
 8003c86:	f241 5381 	movw	r3, #5505	@ 0x1581
 8003c8a:	e0c1      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003c8c:	89fb      	ldrh	r3, [r7, #14]
 8003c8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c92:	d102      	bne.n	8003c9a <tft_readID+0xfe>
		return 0x6814;
 8003c94:	f646 0314 	movw	r3, #26644	@ 0x6814
 8003c98:	e0ba      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg32(0xD4);
 8003c9a:	20d4      	movs	r0, #212	@ 0xd4
 8003c9c:	f7fe fbd6 	bl	800244c <readReg32>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d102      	bne.n	8003cb4 <tft_readID+0x118>
		return 0x5310;
 8003cae:	f245 3310 	movw	r3, #21264	@ 0x5310
 8003cb2:	e0ad      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg32(0xD7);
 8003cb4:	20d7      	movs	r0, #215	@ 0xd7
 8003cb6:	f7fe fbc9 	bl	800244c <readReg32>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	f248 0231 	movw	r2, #32817	@ 0x8031
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <tft_readID+0x132>
		return 0x8031;
 8003cc8:	f248 0331 	movw	r3, #32817	@ 0x8031
 8003ccc:	e0a0      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8003cce:	20ef      	movs	r0, #239	@ 0xef
 8003cd0:	f7fe fbd7 	bl	8002482 <readReg40>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9327)
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d102      	bne.n	8003ce8 <tft_readID+0x14c>
		return 0x9327;
 8003ce2:	f249 3327 	movw	r3, #37671	@ 0x9327
 8003ce6:	e093      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8003ce8:	20fe      	movs	r0, #254	@ 0xfe
 8003cea:	f7fe fbaf 	bl	800244c <readReg32>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x2053)
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	f242 0253 	movw	r2, #8275	@ 0x2053
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d102      	bne.n	8003d04 <tft_readID+0x168>
		return 0x2053;
 8003cfe:	f242 0353 	movw	r3, #8275	@ 0x2053
 8003d02:	e085      	b.n	8003e10 <tft_readID+0x274>
	uint32_t ret32 = readReg32(0x04);
 8003d04:	2004      	movs	r0, #4
 8003d06:	f7fe fba1 	bl	800244c <readReg32>
 8003d0a:	60b8      	str	r0, [r7, #8]
	msb = ret32 >> 16;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	71fb      	strb	r3, [r7, #7]
	ret = ret32;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	81fb      	strh	r3, [r7, #14]
	//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
	if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d122      	bne.n	8003d62 <tft_readID+0x1c6>
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d22:	d11e      	bne.n	8003d62 <tft_readID+0x1c6>
#if 1
		uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8003d24:	4a3c      	ldr	r2, [pc, #240]	@ (8003e18 <tft_readID+0x27c>)
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	8019      	strh	r1, [r3, #0]
 8003d2e:	3302      	adds	r3, #2
 8003d30:	0c12      	lsrs	r2, r2, #16
 8003d32:	701a      	strb	r2, [r3, #0]
		pushCommand(0xB9, cmds, 3);
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2203      	movs	r2, #3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	20b9      	movs	r0, #185	@ 0xb9
 8003d3c:	f7fd fc77 	bl	800162e <pushCommand>
		msb = readReg(0xD0,0);
 8003d40:	2100      	movs	r1, #0
 8003d42:	20d0      	movs	r0, #208	@ 0xd0
 8003d44:	f7fe faa6 	bl	8002294 <readReg>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	71fb      	strb	r3, [r7, #7]
		if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b99      	cmp	r3, #153	@ 0x99
 8003d50:	d101      	bne.n	8003d56 <tft_readID+0x1ba>
 8003d52:	2399      	movs	r3, #153	@ 0x99
 8003d54:	e05c      	b.n	8003e10 <tft_readID+0x274>
		if (msb == 0x90)        //HX8357-C undocumented
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b90      	cmp	r3, #144	@ 0x90
 8003d5a:	d102      	bne.n	8003d62 <tft_readID+0x1c6>
#endif
			return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003d5c:	f249 0390 	movw	r3, #37008	@ 0x9090
 8003d60:	e056      	b.n	8003e10 <tft_readID+0x274>
	}
	//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
	//        return 0x1526;          //subsequent begin() enables Command Access
	if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d102      	bne.n	8003d72 <tft_readID+0x1d6>
		return 0x1526;          //subsequent begin() enables Command Access
 8003d6c:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003d70:	e04e      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003d72:	89fb      	ldrh	r3, [r7, #14]
 8003d74:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d102      	bne.n	8003d82 <tft_readID+0x1e6>
		return 0x7735;
 8003d7c:	f247 7335 	movw	r3, #30517	@ 0x7735
 8003d80:	e046      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	f248 5252 	movw	r2, #34130	@ 0x8552
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d102      	bne.n	8003d92 <tft_readID+0x1f6>
		return 0x7789;
 8003d8c:	f247 7389 	movw	r3, #30601	@ 0x7789
 8003d90:	e03e      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d102      	bne.n	8003da2 <tft_readID+0x206>
		return 0xAC11;
 8003d9c:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8003da0:	e036      	b.n	8003e10 <tft_readID+0x274>
	ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8003da2:	20d3      	movs	r0, #211	@ 0xd3
 8003da4:	f7fe fb52 	bl	800244c <readReg32>
 8003da8:	60b8      	str	r0, [r7, #8]
	ret = ret32 >> 8;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9163) return ret;
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	f249 1263 	movw	r2, #37219	@ 0x9163
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <tft_readID+0x222>
 8003dba:	89fb      	ldrh	r3, [r7, #14]
 8003dbc:	e028      	b.n	8003e10 <tft_readID+0x274>
	ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8003dbe:	20d3      	movs	r0, #211	@ 0xd3
 8003dc0:	f7fe fb44 	bl	800244c <readReg32>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	81fb      	strh	r3, [r7, #14]
	msb = ret >> 8;
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	71fb      	strb	r3, [r7, #7]
	if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	2b93      	cmp	r3, #147	@ 0x93
 8003dd4:	d00b      	beq.n	8003dee <tft_readID+0x252>
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	2b94      	cmp	r3, #148	@ 0x94
 8003dda:	d008      	beq.n	8003dee <tft_readID+0x252>
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	2b98      	cmp	r3, #152	@ 0x98
 8003de0:	d005      	beq.n	8003dee <tft_readID+0x252>
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b77      	cmp	r3, #119	@ 0x77
 8003de6:	d002      	beq.n	8003dee <tft_readID+0x252>
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2b16      	cmp	r3, #22
 8003dec:	d101      	bne.n	8003df2 <tft_readID+0x256>
		return ret;             //0x9488, 9486, 9340, 9341, 7796
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	e00e      	b.n	8003e10 <tft_readID+0x274>
	if (ret == 0x00D3 || ret == 0xD3D3)
 8003df2:	89fb      	ldrh	r3, [r7, #14]
 8003df4:	2bd3      	cmp	r3, #211	@ 0xd3
 8003df6:	d004      	beq.n	8003e02 <tft_readID+0x266>
 8003df8:	89fb      	ldrh	r3, [r7, #14]
 8003dfa:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <tft_readID+0x26a>
		return ret;             //16-bit write-only bus
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	e004      	b.n	8003e10 <tft_readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
	 */
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8003e06:	2100      	movs	r1, #0
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fe fa43 	bl	8002294 <readReg>
 8003e0e:	4603      	mov	r3, r0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	0800807c 	.word	0x0800807c

08003e1c <tft_setRotation>:

void tft_setRotation(uint8_t r)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8003e26:	4b9c      	ldr	r3, [pc, #624]	@ (8004098 <tft_setRotation+0x27c>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	827b      	strh	r3, [r7, #18]
	uint8_t val, d[3];
	rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b99      	ldr	r3, [pc, #612]	@ (800409c <tft_setRotation+0x280>)
 8003e36:	701a      	strb	r2, [r3, #0]
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 8003e38:	4b98      	ldr	r3, [pc, #608]	@ (800409c <tft_setRotation+0x280>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <tft_setRotation+0x2e>
 8003e44:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e48:	e000      	b.n	8003e4c <tft_setRotation+0x30>
 8003e4a:	22f0      	movs	r2, #240	@ 0xf0
 8003e4c:	4b94      	ldr	r3, [pc, #592]	@ (80040a0 <tft_setRotation+0x284>)
 8003e4e:	801a      	strh	r2, [r3, #0]
	_height = (rotation & 1) ? WIDTH : HEIGHT;
 8003e50:	4b92      	ldr	r3, [pc, #584]	@ (800409c <tft_setRotation+0x280>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <tft_setRotation+0x44>
 8003e5c:	22f0      	movs	r2, #240	@ 0xf0
 8003e5e:	e001      	b.n	8003e64 <tft_setRotation+0x48>
 8003e60:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003e64:	4b8f      	ldr	r3, [pc, #572]	@ (80040a4 <tft_setRotation+0x288>)
 8003e66:	801a      	strh	r2, [r3, #0]
	switch (rotation) {
 8003e68:	4b8c      	ldr	r3, [pc, #560]	@ (800409c <tft_setRotation+0x280>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d817      	bhi.n	8003ea0 <tft_setRotation+0x84>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <tft_setRotation+0x5c>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e8f 	.word	0x08003e8f
 8003e80:	08003e95 	.word	0x08003e95
 8003e84:	08003e9b 	.word	0x08003e9b
	case 0:                    //PORTRAIT:
		val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8003e88:	2348      	movs	r3, #72	@ 0x48
 8003e8a:	72fb      	strb	r3, [r7, #11]
		break;
 8003e8c:	e008      	b.n	8003ea0 <tft_setRotation+0x84>
	case 1:                    //LANDSCAPE: 90 degrees
		val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8003e8e:	2328      	movs	r3, #40	@ 0x28
 8003e90:	72fb      	strb	r3, [r7, #11]
		break;
 8003e92:	e005      	b.n	8003ea0 <tft_setRotation+0x84>
	case 2:                    //PORTRAIT_REV: 180 degrees
		val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8003e94:	2398      	movs	r3, #152	@ 0x98
 8003e96:	72fb      	strb	r3, [r7, #11]
		break;
 8003e98:	e002      	b.n	8003ea0 <tft_setRotation+0x84>
	case 3:                    //LANDSCAPE_REV: 270 degrees
		val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8003e9a:	23f8      	movs	r3, #248	@ 0xf8
 8003e9c:	72fb      	strb	r3, [r7, #11]
		break;
 8003e9e:	bf00      	nop
	}
	if (_lcd_capable & INVERT_GS)
 8003ea0:	4b81      	ldr	r3, [pc, #516]	@ (80040a8 <tft_setRotation+0x28c>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <tft_setRotation+0x9c>
		val ^= 0x80;
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_SS)
 8003eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80040a8 <tft_setRotation+0x28c>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <tft_setRotation+0xb2>
		val ^= 0x40;
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_RGB)
 8003ece:	4b76      	ldr	r3, [pc, #472]	@ (80040a8 <tft_setRotation+0x28c>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <tft_setRotation+0xc8>
		val ^= 0x08;
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f083 0308 	eor.w	r3, r3, #8
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003ee4:	4b70      	ldr	r3, [pc, #448]	@ (80040a8 <tft_setRotation+0x28c>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8119 	beq.w	8004124 <tft_setRotation+0x308>
		if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8003ef2:	4b6e      	ldr	r3, [pc, #440]	@ (80040ac <tft_setRotation+0x290>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f646 0214 	movw	r2, #26644	@ 0x6814
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d128      	bne.n	8003f50 <tft_setRotation+0x134>
			GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	105b      	asrs	r3, r3, #1
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	823b      	strh	r3, [r7, #16]
			SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	105b      	asrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	81fb      	strh	r3, [r7, #14]
			val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
 8003f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	72fb      	strb	r3, [r7, #11]
			d[0] = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	723b      	strb	r3, [r7, #8]
			d[1] = GS | SS_v | 0x02;      //MY, MX
 8003f28:	8a3b      	ldrh	r3, [r7, #16]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	89fb      	ldrh	r3, [r7, #14]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	727b      	strb	r3, [r7, #9]
			d[2] = 0x3B;
 8003f3c:	233b      	movs	r3, #59	@ 0x3b
 8003f3e:	72bb      	strb	r3, [r7, #10]
			WriteCmdParamN(0xB6, 3, d);
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	461a      	mov	r2, r3
 8003f46:	2103      	movs	r1, #3
 8003f48:	20b6      	movs	r0, #182	@ 0xb6
 8003f4a:	f7fd fe35 	bl	8001bb8 <WriteCmdParamN>
			goto common_MC;
 8003f4e:	e0c0      	b.n	80040d2 <tft_setRotation+0x2b6>
		}
		else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8003f50:	4b56      	ldr	r3, [pc, #344]	@ (80040ac <tft_setRotation+0x290>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <tft_setRotation+0x158>
 8003f5c:	4b53      	ldr	r3, [pc, #332]	@ (80040ac <tft_setRotation+0x290>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d005      	beq.n	8003f74 <tft_setRotation+0x158>
 8003f68:	4b50      	ldr	r3, [pc, #320]	@ (80040ac <tft_setRotation+0x290>)
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d139      	bne.n	8003fe8 <tft_setRotation+0x1cc>
			if (val & 0x80)
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da04      	bge.n	8003f86 <tft_setRotation+0x16a>
				val |= 0x01;    //GS
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x40))
 8003f86:	7afb      	ldrb	r3, [r7, #11]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <tft_setRotation+0x17e>
					val |= 0x02;    //SS
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f043 0302 	orr.w	r3, r3, #2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1963) val &= ~0xC0;
 8003f9a:	4b44      	ldr	r3, [pc, #272]	@ (80040ac <tft_setRotation+0x290>)
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d104      	bne.n	8003fb0 <tft_setRotation+0x194>
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ac <tft_setRotation+0x290>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d104      	bne.n	8003fc6 <tft_setRotation+0x1aa>
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
 8003fbe:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1511) {
 8003fc6:	4b39      	ldr	r3, [pc, #228]	@ (80040ac <tft_setRotation+0x290>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d160      	bne.n	8004094 <tft_setRotation+0x278>
					val &= ~0x10;   //remove ML
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	72fb      	strb	r3, [r7, #11]
					val |= 0xC0;    //force penguin 180 rotation
 8003fdc:	7afb      	ldrb	r3, [r7, #11]
 8003fde:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	72fb      	strb	r3, [r7, #11]
				}
				//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
				goto common_MC;
 8003fe6:	e055      	b.n	8004094 <tft_setRotation+0x278>
		}
		else if (is8347) {
 8003fe8:	4b31      	ldr	r3, [pc, #196]	@ (80040b0 <tft_setRotation+0x294>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d06f      	beq.n	80040d0 <tft_setRotation+0x2b4>
			_MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003ff0:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <tft_setRotation+0x298>)
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	4b30      	ldr	r3, [pc, #192]	@ (80040b8 <tft_setRotation+0x29c>)
 8003ff8:	2206      	movs	r2, #6
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <tft_setRotation+0x2a0>)
 8003ffe:	2222      	movs	r2, #34	@ 0x22
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <tft_setRotation+0x2a4>)
 8004004:	2202      	movs	r2, #2
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	4b2e      	ldr	r3, [pc, #184]	@ (80040c4 <tft_setRotation+0x2a8>)
 800400a:	2204      	movs	r2, #4
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	4b2e      	ldr	r3, [pc, #184]	@ (80040c8 <tft_setRotation+0x2ac>)
 8004010:	2206      	movs	r2, #6
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <tft_setRotation+0x2b0>)
 8004016:	2208      	movs	r2, #8
 8004018:	801a      	strh	r2, [r3, #0]
			if (_lcd_ID == 0x0065) {             //HX8352-B
 800401a:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <tft_setRotation+0x290>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2b65      	cmp	r3, #101	@ 0x65
 8004020:	d121      	bne.n	8004066 <tft_setRotation+0x24a>
				val |= 0x01;    //GS=1
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800402c:	7afb      	ldrb	r3, [r7, #11]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <tft_setRotation+0x226>
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 800403c:	43db      	mvns	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	72fb      	strb	r3, [r7, #11]
				if (r & 1) _MC = 0x82, _MP = 0x80;
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <tft_setRotation+0x23e>
 800404c:	4b19      	ldr	r3, [pc, #100]	@ (80040b4 <tft_setRotation+0x298>)
 800404e:	2282      	movs	r2, #130	@ 0x82
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <tft_setRotation+0x29c>)
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e005      	b.n	8004066 <tft_setRotation+0x24a>
				else _MC = 0x80, _MP = 0x82;
 800405a:	4b16      	ldr	r3, [pc, #88]	@ (80040b4 <tft_setRotation+0x298>)
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	801a      	strh	r2, [r3, #0]
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <tft_setRotation+0x29c>)
 8004062:	2282      	movs	r2, #130	@ 0x82
 8004064:	801a      	strh	r2, [r3, #0]
			}
			if (_lcd_ID == 0x5252) {             //HX8352-A
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <tft_setRotation+0x290>)
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f245 2252 	movw	r2, #21074	@ 0x5252
 800406e:	4293      	cmp	r3, r2
 8004070:	d145      	bne.n	80040fe <tft_setRotation+0x2e2>
				val |= 0x02;   //VERT_SCROLLON
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f043 0302 	orr.w	r3, r3, #2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03b      	beq.n	80040fe <tft_setRotation+0x2e2>
 8004086:	7afb      	ldrb	r3, [r7, #11]
 8004088:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 800408c:	43db      	mvns	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	72fb      	strb	r3, [r7, #11]
			}
			goto common_BGR;
 8004092:	e034      	b.n	80040fe <tft_setRotation+0x2e2>
				goto common_MC;
 8004094:	bf00      	nop
 8004096:	e01c      	b.n	80040d2 <tft_setRotation+0x2b6>
 8004098:	200001e0 	.word	0x200001e0
 800409c:	200001d8 	.word	0x200001d8
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	2000000e 	.word	0x2000000e
 80040a8:	200001dc 	.word	0x200001dc
 80040ac:	200001de 	.word	0x200001de
 80040b0:	200001d5 	.word	0x200001d5
 80040b4:	200001e4 	.word	0x200001e4
 80040b8:	200001e6 	.word	0x200001e6
 80040bc:	200001e8 	.word	0x200001e8
 80040c0:	200001ea 	.word	0x200001ea
 80040c4:	200001ec 	.word	0x200001ec
 80040c8:	200001ee 	.word	0x200001ee
 80040cc:	200001f0 	.word	0x200001f0
		}
		common_MC:
 80040d0:	bf00      	nop
		_MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80040d2:	4b8a      	ldr	r3, [pc, #552]	@ (80042fc <tft_setRotation+0x4e0>)
 80040d4:	222a      	movs	r2, #42	@ 0x2a
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	4b89      	ldr	r3, [pc, #548]	@ (8004300 <tft_setRotation+0x4e4>)
 80040da:	222b      	movs	r2, #43	@ 0x2b
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	4b89      	ldr	r3, [pc, #548]	@ (8004304 <tft_setRotation+0x4e8>)
 80040e0:	222c      	movs	r2, #44	@ 0x2c
 80040e2:	801a      	strh	r2, [r3, #0]
 80040e4:	4b88      	ldr	r3, [pc, #544]	@ (8004308 <tft_setRotation+0x4ec>)
 80040e6:	222a      	movs	r2, #42	@ 0x2a
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	4b88      	ldr	r3, [pc, #544]	@ (800430c <tft_setRotation+0x4f0>)
 80040ec:	222a      	movs	r2, #42	@ 0x2a
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	4b87      	ldr	r3, [pc, #540]	@ (8004310 <tft_setRotation+0x4f4>)
 80040f2:	222b      	movs	r2, #43	@ 0x2b
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	4b87      	ldr	r3, [pc, #540]	@ (8004314 <tft_setRotation+0x4f8>)
 80040f8:	222b      	movs	r2, #43	@ 0x2b
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e000      	b.n	8004100 <tft_setRotation+0x2e4>
			goto common_BGR;
 80040fe:	bf00      	nop
		common_BGR:
		WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8004100:	4b85      	ldr	r3, [pc, #532]	@ (8004318 <tft_setRotation+0x4fc>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <tft_setRotation+0x2f0>
 8004108:	2316      	movs	r3, #22
 800410a:	e000      	b.n	800410e <tft_setRotation+0x2f2>
 800410c:	2336      	movs	r3, #54	@ 0x36
 800410e:	f107 020b 	add.w	r2, r7, #11
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd fd4f 	bl	8001bb8 <WriteCmdParamN>
		_lcd_madctl = val;
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	461a      	mov	r2, r3
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <tft_setRotation+0x500>)
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	e0a5      	b.n	8004270 <tft_setRotation+0x454>
		//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
	}
	// cope with 9320 variants
	else {
		switch (_lcd_ID) {
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <tft_setRotation+0x504>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <tft_setRotation+0x33c>
 8004130:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004134:	4293      	cmp	r3, r2
 8004136:	dc4f      	bgt.n	80041d8 <tft_setRotation+0x3bc>
 8004138:	f249 3226 	movw	r2, #37670	@ 0x9326
 800413c:	4293      	cmp	r3, r2
 800413e:	d00b      	beq.n	8004158 <tft_setRotation+0x33c>
 8004140:	f249 3226 	movw	r2, #37670	@ 0x9326
 8004144:	4293      	cmp	r3, r2
 8004146:	dc47      	bgt.n	80041d8 <tft_setRotation+0x3bc>
 8004148:	f245 4220 	movw	r2, #21536	@ 0x5420
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <tft_setRotation+0x33c>
 8004150:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004154:	4293      	cmp	r3, r2
 8004156:	d13f      	bne.n	80041d8 <tft_setRotation+0x3bc>
#endif
		case 0x5420:
		case 0x7793:
		case 0x9326:
		case 0xB509:
			_MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004158:	4b68      	ldr	r3, [pc, #416]	@ (80042fc <tft_setRotation+0x4e0>)
 800415a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	4b67      	ldr	r3, [pc, #412]	@ (8004300 <tft_setRotation+0x4e4>)
 8004162:	f240 2201 	movw	r2, #513	@ 0x201
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	4b66      	ldr	r3, [pc, #408]	@ (8004304 <tft_setRotation+0x4e8>)
 800416a:	f240 2202 	movw	r2, #514	@ 0x202
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	4b65      	ldr	r3, [pc, #404]	@ (8004308 <tft_setRotation+0x4ec>)
 8004172:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8004176:	801a      	strh	r2, [r3, #0]
 8004178:	4b64      	ldr	r3, [pc, #400]	@ (800430c <tft_setRotation+0x4f0>)
 800417a:	f240 2211 	movw	r2, #529	@ 0x211
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	4b63      	ldr	r3, [pc, #396]	@ (8004310 <tft_setRotation+0x4f4>)
 8004182:	f240 2212 	movw	r2, #530	@ 0x212
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	4b62      	ldr	r3, [pc, #392]	@ (8004314 <tft_setRotation+0x4f8>)
 800418a:	f240 2213 	movw	r2, #531	@ 0x213
 800418e:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8004190:	7afb      	ldrb	r3, [r7, #11]
 8004192:	b25b      	sxtb	r3, r3
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800419a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800419e:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80041a0:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80041a4:	82bb      	strh	r3, [r7, #20]
			if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80041a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004320 <tft_setRotation+0x504>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	f249 3226 	movw	r2, #37670	@ 0x9326
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d005      	beq.n	80041be <tft_setRotation+0x3a2>
 80041b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004320 <tft_setRotation+0x504>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f245 4220 	movw	r2, #21536	@ 0x5420
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d102      	bne.n	80041c4 <tft_setRotation+0x3a8>
 80041be:	8abb      	ldrh	r3, [r7, #20]
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	82bb      	strh	r3, [r7, #20]
			tft_writeCmdData(0x400, GS | NL);
 80041c4:	8a3a      	ldrh	r2, [r7, #16]
 80041c6:	8abb      	ldrh	r3, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041d2:	f7fe fb0d 	bl	80027f0 <tft_writeCmdData>
			goto common_SS;
 80041d6:	e024      	b.n	8004222 <tft_setRotation+0x406>
		default:
			_MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80041d8:	4b48      	ldr	r3, [pc, #288]	@ (80042fc <tft_setRotation+0x4e0>)
 80041da:	2220      	movs	r2, #32
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	4b48      	ldr	r3, [pc, #288]	@ (8004300 <tft_setRotation+0x4e4>)
 80041e0:	2221      	movs	r2, #33	@ 0x21
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <tft_setRotation+0x4e8>)
 80041e6:	2222      	movs	r2, #34	@ 0x22
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <tft_setRotation+0x4ec>)
 80041ec:	2250      	movs	r2, #80	@ 0x50
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	4b46      	ldr	r3, [pc, #280]	@ (800430c <tft_setRotation+0x4f0>)
 80041f2:	2251      	movs	r2, #81	@ 0x51
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	4b46      	ldr	r3, [pc, #280]	@ (8004310 <tft_setRotation+0x4f4>)
 80041f8:	2252      	movs	r2, #82	@ 0x52
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	4b45      	ldr	r3, [pc, #276]	@ (8004314 <tft_setRotation+0x4f8>)
 80041fe:	2253      	movs	r2, #83	@ 0x53
 8004200:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	b25b      	sxtb	r3, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800420c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004210:	823b      	strh	r3, [r7, #16]
			tft_writeCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8004212:	8a3b      	ldrh	r3, [r7, #16]
 8004214:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8004218:	b29b      	uxth	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	2060      	movs	r0, #96	@ 0x60
 800421e:	f7fe fae7 	bl	80027f0 <tft_writeCmdData>
			common_SS:
			SS_v = (val & 0x40) ? (1 << 8) : 0;
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	b29b      	uxth	r3, r3
 8004228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422c:	81fb      	strh	r3, [r7, #14]
			tft_writeCmdData(0x01, SS_v);     // set Driver Output Control
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	4619      	mov	r1, r3
 8004232:	2001      	movs	r0, #1
 8004234:	f7fe fadc 	bl	80027f0 <tft_writeCmdData>
			common_ORG:
			ORG = (val & 0x20) ? (1 << 3) : 0;
 8004238:	7afb      	ldrb	r3, [r7, #11]
 800423a:	109b      	asrs	r3, r3, #2
 800423c:	b29b      	uxth	r3, r3
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	82fb      	strh	r3, [r7, #22]
				if (rotation == 1 || rotation == 2) {
					val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
				}
			}
#endif
			if (val & 0x08)
 8004244:	7afb      	ldrb	r3, [r7, #11]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <tft_setRotation+0x43a>
				ORG |= 0x1000;  //BGR
 800424e:	8afb      	ldrh	r3, [r7, #22]
 8004250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004254:	82fb      	strh	r3, [r7, #22]
			_lcd_madctl = ORG | 0x0030;
 8004256:	8afb      	ldrh	r3, [r7, #22]
 8004258:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800425c:	b29a      	uxth	r2, r3
 800425e:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <tft_setRotation+0x500>)
 8004260:	801a      	strh	r2, [r3, #0]
			tft_writeCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8004262:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <tft_setRotation+0x500>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	2003      	movs	r0, #3
 800426a:	f7fe fac1 	bl	80027f0 <tft_writeCmdData>
			break;
 800426e:	bf00      	nop
				tft_writeCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
			break;
#endif
		}
	}
	if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004270:	4b2c      	ldr	r3, [pc, #176]	@ (8004324 <tft_setRotation+0x508>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d023      	beq.n	80042c4 <tft_setRotation+0x4a8>
 800427c:	4b2a      	ldr	r3, [pc, #168]	@ (8004328 <tft_setRotation+0x50c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <tft_setRotation+0x4a8>
		uint16_t x;
		x = _MC, _MC = _MP, _MP = x;
 8004288:	4b1c      	ldr	r3, [pc, #112]	@ (80042fc <tft_setRotation+0x4e0>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	81bb      	strh	r3, [r7, #12]
 800428e:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <tft_setRotation+0x4e4>)
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <tft_setRotation+0x4e0>)
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <tft_setRotation+0x4e4>)
 8004298:	89bb      	ldrh	r3, [r7, #12]
 800429a:	8013      	strh	r3, [r2, #0]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800429c:	4b1a      	ldr	r3, [pc, #104]	@ (8004308 <tft_setRotation+0x4ec>)
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	81bb      	strh	r3, [r7, #12]
 80042a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004310 <tft_setRotation+0x4f4>)
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <tft_setRotation+0x4ec>)
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <tft_setRotation+0x4f4>)
 80042ac:	89bb      	ldrh	r3, [r7, #12]
 80042ae:	8013      	strh	r3, [r2, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80042b0:	4b16      	ldr	r3, [pc, #88]	@ (800430c <tft_setRotation+0x4f0>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	81bb      	strh	r3, [r7, #12]
 80042b6:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <tft_setRotation+0x4f8>)
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	4b14      	ldr	r3, [pc, #80]	@ (800430c <tft_setRotation+0x4f0>)
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <tft_setRotation+0x4f8>)
 80042c0:	89bb      	ldrh	r3, [r7, #12]
 80042c2:	8013      	strh	r3, [r2, #0]
	}
	setAddrWindow(0, 0, width() - 1, height() - 1);
 80042c4:	f7fd f92a 	bl	800151c <width>
 80042c8:	4603      	mov	r3, r0
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	b21c      	sxth	r4, r3
 80042d0:	f7fd f930 	bl	8001534 <height>
 80042d4:	4603      	mov	r3, r0
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b21b      	sxth	r3, r3
 80042dc:	4622      	mov	r2, r4
 80042de:	2100      	movs	r1, #0
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fe f8f5 	bl	80024d0 <setAddrWindow>
	tft_vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80042e6:	2200      	movs	r2, #0
 80042e8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80042ec:	2000      	movs	r0, #0
 80042ee:	f000 f923 	bl	8004538 <tft_vertScroll>
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200001e4 	.word	0x200001e4
 8004300:	200001e6 	.word	0x200001e6
 8004304:	200001e8 	.word	0x200001e8
 8004308:	200001ea 	.word	0x200001ea
 800430c:	200001ec 	.word	0x200001ec
 8004310:	200001ee 	.word	0x200001ee
 8004314:	200001f0 	.word	0x200001f0
 8004318:	200001d5 	.word	0x200001d5
 800431c:	200001e2 	.word	0x200001e2
 8004320:	200001de 	.word	0x200001de
 8004324:	200001d8 	.word	0x200001d8
 8004328:	200001dc 	.word	0x200001dc

0800432c <tft_drawPixel>:
{
	return rotation;
}

void tft_drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	80fb      	strh	r3, [r7, #6]
 8004336:	460b      	mov	r3, r1
 8004338:	80bb      	strh	r3, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	807b      	strh	r3, [r7, #2]
	// MCUFRIEND just plots at edge if you try to write outside of the box:
	if (x < 0 || y < 0 || x >= width() || y >= height())
 800433e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f2c0 80e7 	blt.w	8004516 <tft_drawPixel+0x1ea>
 8004348:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f2c0 80e2 	blt.w	8004516 <tft_drawPixel+0x1ea>
 8004352:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8004356:	f7fd f8e1 	bl	800151c <width>
 800435a:	4603      	mov	r3, r0
 800435c:	429c      	cmp	r4, r3
 800435e:	f280 80da 	bge.w	8004516 <tft_drawPixel+0x1ea>
 8004362:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004366:	f7fd f8e5 	bl	8001534 <height>
 800436a:	4603      	mov	r3, r0
 800436c:	429c      	cmp	r4, r3
 800436e:	f280 80d2 	bge.w	8004516 <tft_drawPixel+0x1ea>
		return;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8004372:	4b6b      	ldr	r3, [pc, #428]	@ (8004520 <tft_drawPixel+0x1f4>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <tft_drawPixel+0x5a>
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd f8e5 	bl	800154c <color565_to_555>
 8004382:	4603      	mov	r3, r0
 8004384:	807b      	strh	r3, [r7, #2]
#endif
	setAddrWindow(x, y, x, y);
 8004386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800438a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800438e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004392:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004396:	f7fe f89b 	bl	80024d0 <setAddrWindow>
	//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
	if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800439a:	4b62      	ldr	r3, [pc, #392]	@ (8004524 <tft_drawPixel+0x1f8>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80b1 	beq.w	8004506 <tft_drawPixel+0x1da>
 80043a4:	2101      	movs	r1, #1
 80043a6:	4860      	ldr	r0, [pc, #384]	@ (8004528 <tft_drawPixel+0x1fc>)
 80043a8:	f7fd f86a 	bl	8001480 <PIN_LOW>
 80043ac:	2110      	movs	r1, #16
 80043ae:	485f      	ldr	r0, [pc, #380]	@ (800452c <tft_drawPixel+0x200>)
 80043b0:	f7fd f866 	bl	8001480 <PIN_LOW>
 80043b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004530 <tft_drawPixel+0x204>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	4b5c      	ldr	r3, [pc, #368]	@ (8004530 <tft_drawPixel+0x204>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	73bb      	strb	r3, [r7, #14]
 80043c4:	4b59      	ldr	r3, [pc, #356]	@ (800452c <tft_drawPixel+0x200>)
 80043c6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80043ca:	619a      	str	r2, [r3, #24]
 80043cc:	4b56      	ldr	r3, [pc, #344]	@ (8004528 <tft_drawPixel+0x1fc>)
 80043ce:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	4b57      	ldr	r3, [pc, #348]	@ (8004534 <tft_drawPixel+0x208>)
 80043d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80043da:	619a      	str	r2, [r3, #24]
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ec:	431a      	orrs	r2, r3
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	025b      	lsls	r3, r3, #9
 80043f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f6:	431a      	orrs	r2, r3
 80043f8:	4b4c      	ldr	r3, [pc, #304]	@ (800452c <tft_drawPixel+0x200>)
 80043fa:	619a      	str	r2, [r3, #24]
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	105b      	asrs	r3, r3, #1
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	431a      	orrs	r2, r3
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	431a      	orrs	r2, r3
 8004420:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <tft_drawPixel+0x1fc>)
 8004422:	619a      	str	r2, [r3, #24]
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	4a42      	ldr	r2, [pc, #264]	@ (8004534 <tft_drawPixel+0x208>)
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	6193      	str	r3, [r2, #24]
 8004430:	2102      	movs	r1, #2
 8004432:	483e      	ldr	r0, [pc, #248]	@ (800452c <tft_drawPixel+0x200>)
 8004434:	f7fd f824 	bl	8001480 <PIN_LOW>
 8004438:	2102      	movs	r1, #2
 800443a:	483c      	ldr	r0, [pc, #240]	@ (800452c <tft_drawPixel+0x200>)
 800443c:	f7fd f820 	bl	8001480 <PIN_LOW>
 8004440:	2102      	movs	r1, #2
 8004442:	483a      	ldr	r0, [pc, #232]	@ (800452c <tft_drawPixel+0x200>)
 8004444:	f7fd f81c 	bl	8001480 <PIN_LOW>
 8004448:	2102      	movs	r1, #2
 800444a:	4838      	ldr	r0, [pc, #224]	@ (800452c <tft_drawPixel+0x200>)
 800444c:	f7fd f828 	bl	80014a0 <PIN_HIGH>
 8004450:	2102      	movs	r1, #2
 8004452:	4836      	ldr	r0, [pc, #216]	@ (800452c <tft_drawPixel+0x200>)
 8004454:	f7fd f824 	bl	80014a0 <PIN_HIGH>
 8004458:	4b34      	ldr	r3, [pc, #208]	@ (800452c <tft_drawPixel+0x200>)
 800445a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800445e:	619a      	str	r2, [r3, #24]
 8004460:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <tft_drawPixel+0x1fc>)
 8004462:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004466:	619a      	str	r2, [r3, #24]
 8004468:	4b32      	ldr	r3, [pc, #200]	@ (8004534 <tft_drawPixel+0x208>)
 800446a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800446e:	619a      	str	r2, [r3, #24]
 8004470:	7bbb      	ldrb	r3, [r7, #14]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	431a      	orrs	r2, r3
 8004482:	7bbb      	ldrb	r3, [r7, #14]
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448a:	431a      	orrs	r2, r3
 800448c:	4b27      	ldr	r3, [pc, #156]	@ (800452c <tft_drawPixel+0x200>)
 800448e:	619a      	str	r2, [r3, #24]
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	105b      	asrs	r3, r3, #1
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	7bbb      	ldrb	r3, [r7, #14]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	431a      	orrs	r2, r3
 80044ac:	7bbb      	ldrb	r3, [r7, #14]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	431a      	orrs	r2, r3
 80044b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004528 <tft_drawPixel+0x1fc>)
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	7bbb      	ldrb	r3, [r7, #14]
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <tft_drawPixel+0x208>)
 80044be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	2102      	movs	r1, #2
 80044c6:	4819      	ldr	r0, [pc, #100]	@ (800452c <tft_drawPixel+0x200>)
 80044c8:	f7fc ffda 	bl	8001480 <PIN_LOW>
 80044cc:	2102      	movs	r1, #2
 80044ce:	4817      	ldr	r0, [pc, #92]	@ (800452c <tft_drawPixel+0x200>)
 80044d0:	f7fc ffd6 	bl	8001480 <PIN_LOW>
 80044d4:	2102      	movs	r1, #2
 80044d6:	4815      	ldr	r0, [pc, #84]	@ (800452c <tft_drawPixel+0x200>)
 80044d8:	f7fc ffd2 	bl	8001480 <PIN_LOW>
 80044dc:	2102      	movs	r1, #2
 80044de:	4813      	ldr	r0, [pc, #76]	@ (800452c <tft_drawPixel+0x200>)
 80044e0:	f7fc ffde 	bl	80014a0 <PIN_HIGH>
 80044e4:	2102      	movs	r1, #2
 80044e6:	4811      	ldr	r0, [pc, #68]	@ (800452c <tft_drawPixel+0x200>)
 80044e8:	f7fc ffda 	bl	80014a0 <PIN_HIGH>
 80044ec:	2110      	movs	r1, #16
 80044ee:	480f      	ldr	r0, [pc, #60]	@ (800452c <tft_drawPixel+0x200>)
 80044f0:	f7fc ffd6 	bl	80014a0 <PIN_HIGH>
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd f908 	bl	800170c <write24>
 80044fc:	2101      	movs	r1, #1
 80044fe:	480a      	ldr	r0, [pc, #40]	@ (8004528 <tft_drawPixel+0x1fc>)
 8004500:	f7fc ffce 	bl	80014a0 <PIN_HIGH>
 8004504:	e008      	b.n	8004518 <tft_drawPixel+0x1ec>
		tft_writeCmdData(_MW, color);
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <tft_drawPixel+0x204>)
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe f96e 	bl	80027f0 <tft_writeCmdData>
 8004514:	e000      	b.n	8004518 <tft_drawPixel+0x1ec>
		return;
 8004516:	bf00      	nop
}
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	bf00      	nop
 8004520:	200001d6 	.word	0x200001d6
 8004524:	200001d7 	.word	0x200001d7
 8004528:	40020400 	.word	0x40020400
 800452c:	40020000 	.word	0x40020000
 8004530:	200001e8 	.word	0x200001e8
 8004534:	40020800 	.word	0x40020800

08004538 <tft_vertScroll>:

void tft_vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
 8004542:	460b      	mov	r3, r1
 8004544:	80bb      	strh	r3, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800454a:	4b89      	ldr	r3, [pc, #548]	@ (8004770 <tft_vertScroll+0x238>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	f249 3227 	movw	r2, #37671	@ 0x9327
 8004552:	4293      	cmp	r3, r2
 8004554:	d10b      	bne.n	800456e <tft_vertScroll+0x36>
		if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004556:	4b87      	ldr	r3, [pc, #540]	@ (8004774 <tft_vertScroll+0x23c>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d003      	beq.n	8004566 <tft_vertScroll+0x2e>
 800455e:	4b85      	ldr	r3, [pc, #532]	@ (8004774 <tft_vertScroll+0x23c>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d103      	bne.n	800456e <tft_vertScroll+0x36>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	3320      	adds	r3, #32
 800456a:	b29b      	uxth	r3, r3
 800456c:	80fb      	strh	r3, [r7, #6]
	}
#endif
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	88bb      	ldrh	r3, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800457a:	b29b      	uxth	r3, r3
 800457c:	82fb      	strh	r3, [r7, #22]
	int16_t vsp;
	int16_t sea = top;
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004582:	4b7b      	ldr	r3, [pc, #492]	@ (8004770 <tft_vertScroll+0x238>)
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	f249 3227 	movw	r2, #37671	@ 0x9327
 800458a:	4293      	cmp	r3, r2
 800458c:	d103      	bne.n	8004596 <tft_vertScroll+0x5e>
 800458e:	8afb      	ldrh	r3, [r7, #22]
 8004590:	3320      	adds	r3, #32
 8004592:	b29b      	uxth	r3, r3
 8004594:	82fb      	strh	r3, [r7, #22]
	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004596:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800459a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800459e:	425b      	negs	r3, r3
 80045a0:	429a      	cmp	r2, r3
 80045a2:	dd05      	ble.n	80045b0 <tft_vertScroll+0x78>
 80045a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80045a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	db01      	blt.n	80045b4 <tft_vertScroll+0x7c>
 80045b0:	2300      	movs	r3, #0
 80045b2:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	887b      	ldrh	r3, [r7, #2]
 80045b8:	4413      	add	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	82bb      	strh	r3, [r7, #20]
	if (offset < 0)
 80045be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da04      	bge.n	80045d0 <tft_vertScroll+0x98>
		vsp += scrollines;          //keep in unsigned range
 80045c6:	8aba      	ldrh	r2, [r7, #20]
 80045c8:	88bb      	ldrh	r3, [r7, #4]
 80045ca:	4413      	add	r3, r2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	82bb      	strh	r3, [r7, #20]
	sea = top + scrollines - 1;
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	88bb      	ldrh	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	827b      	strh	r3, [r7, #18]
	if (_lcd_capable & MIPI_DCS_REV1) {
 80045de:	4b66      	ldr	r3, [pc, #408]	@ (8004778 <tft_vertScroll+0x240>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d071      	beq.n	80046ce <tft_vertScroll+0x196>
		uint8_t d[6];           // for multi-byte parameters
		d[0] = top >> 8;        //TFA
 80045ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ee:	121b      	asrs	r3, r3, #8
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	733b      	strb	r3, [r7, #12]
		d[1] = top;
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	737b      	strb	r3, [r7, #13]
		d[2] = scrollines >> 8; //VSA
 80045fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004600:	121b      	asrs	r3, r3, #8
 8004602:	b21b      	sxth	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	73bb      	strb	r3, [r7, #14]
		d[3] = scrollines;
 8004608:	88bb      	ldrh	r3, [r7, #4]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	73fb      	strb	r3, [r7, #15]
		d[4] = bfa >> 8;        //BFA
 800460e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004612:	121b      	asrs	r3, r3, #8
 8004614:	b21b      	sxth	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	743b      	strb	r3, [r7, #16]
		d[5] = bfa;
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	747b      	strb	r3, [r7, #17]
		WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004620:	4b56      	ldr	r3, [pc, #344]	@ (800477c <tft_vertScroll+0x244>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <tft_vertScroll+0xf4>
 8004628:	230e      	movs	r3, #14
 800462a:	e000      	b.n	800462e <tft_vertScroll+0xf6>
 800462c:	2333      	movs	r3, #51	@ 0x33
 800462e:	f107 020c 	add.w	r2, r7, #12
 8004632:	2106      	movs	r1, #6
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd fabf 	bl	8001bb8 <WriteCmdParamN>
		//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 800463a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800463e:	121b      	asrs	r3, r3, #8
 8004640:	b21b      	sxth	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	733b      	strb	r3, [r7, #12]
		d[1] = vsp;
 8004646:	8abb      	ldrh	r3, [r7, #20]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	737b      	strb	r3, [r7, #13]
		WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 800464c:	4b4b      	ldr	r3, [pc, #300]	@ (800477c <tft_vertScroll+0x244>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <tft_vertScroll+0x120>
 8004654:	2314      	movs	r3, #20
 8004656:	e000      	b.n	800465a <tft_vertScroll+0x122>
 8004658:	2337      	movs	r3, #55	@ 0x37
 800465a:	f107 020c 	add.w	r2, r7, #12
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd faa9 	bl	8001bb8 <WriteCmdParamN>
		if (is8347) {
 8004666:	4b45      	ldr	r3, [pc, #276]	@ (800477c <tft_vertScroll+0x244>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01f      	beq.n	80046ae <tft_vertScroll+0x176>
			d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 800466e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <tft_vertScroll+0x152>
 8004676:	4b3e      	ldr	r3, [pc, #248]	@ (8004770 <tft_vertScroll+0x238>)
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	f248 3247 	movw	r2, #33607	@ 0x8347
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <tft_vertScroll+0x14e>
 8004682:	2302      	movs	r3, #2
 8004684:	e002      	b.n	800468c <tft_vertScroll+0x154>
 8004686:	2308      	movs	r3, #8
 8004688:	e000      	b.n	800468c <tft_vertScroll+0x154>
 800468a:	2300      	movs	r3, #0
 800468c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800468e:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <tft_vertScroll+0x238>)
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	f248 3247 	movw	r2, #33607	@ 0x8347
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <tft_vertScroll+0x166>
 800469a:	2318      	movs	r3, #24
 800469c:	e000      	b.n	80046a0 <tft_vertScroll+0x168>
 800469e:	2301      	movs	r3, #1
 80046a0:	f107 020c 	add.w	r2, r7, #12
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fa86 	bl	8001bb8 <WriteCmdParamN>
 80046ac:	e05d      	b.n	800476a <tft_vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 80046ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d159      	bne.n	800476a <tft_vertScroll+0x232>
 80046b6:	4b30      	ldr	r3, [pc, #192]	@ (8004778 <tft_vertScroll+0x240>)
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d053      	beq.n	800476a <tft_vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	2013      	movs	r0, #19
 80046c8:	f7fd fa76 	bl	8001bb8 <WriteCmdParamN>
 80046cc:	e04d      	b.n	800476a <tft_vertScroll+0x232>
		}
		return;
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 80046ce:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <tft_vertScroll+0x238>)
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <tft_vertScroll+0x1f2>
 80046da:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80046de:	4293      	cmp	r3, r2
 80046e0:	dc34      	bgt.n	800474c <tft_vertScroll+0x214>
 80046e2:	f249 3226 	movw	r2, #37670	@ 0x9326
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01f      	beq.n	800472a <tft_vertScroll+0x1f2>
 80046ea:	f249 3226 	movw	r2, #37670	@ 0x9326
 80046ee:	4293      	cmp	r3, r2
 80046f0:	dc2c      	bgt.n	800474c <tft_vertScroll+0x214>
 80046f2:	f247 7293 	movw	r2, #30611	@ 0x7793
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d017      	beq.n	800472a <tft_vertScroll+0x1f2>
 80046fa:	f247 7293 	movw	r2, #30611	@ 0x7793
 80046fe:	4293      	cmp	r3, r2
 8004700:	dc24      	bgt.n	800474c <tft_vertScroll+0x214>
 8004702:	f245 4220 	movw	r2, #21536	@ 0x5420
 8004706:	4293      	cmp	r3, r2
 8004708:	d00f      	beq.n	800472a <tft_vertScroll+0x1f2>
 800470a:	f247 7283 	movw	r2, #30595	@ 0x7783
 800470e:	4293      	cmp	r3, r2
 8004710:	d11c      	bne.n	800474c <tft_vertScroll+0x214>
	case 0x7783:
		tft_writeCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <tft_vertScroll+0x248>)
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	2061      	movs	r0, #97	@ 0x61
 800471a:	f7fe f869 	bl	80027f0 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 800471e:	8abb      	ldrh	r3, [r7, #20]
 8004720:	4619      	mov	r1, r3
 8004722:	206a      	movs	r0, #106	@ 0x6a
 8004724:	f7fe f864 	bl	80027f0 <tft_writeCmdData>
		break;
 8004728:	e01f      	b.n	800476a <tft_vertScroll+0x232>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <tft_vertScroll+0x248>)
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	f043 0302 	orr.w	r3, r3, #2
 8004732:	b29b      	uxth	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	f240 4001 	movw	r0, #1025	@ 0x401
 800473a:	f7fe f859 	bl	80027f0 <tft_writeCmdData>
		tft_writeCmdData(0x404, vsp);       //VL#
 800473e:	8abb      	ldrh	r3, [r7, #20]
 8004740:	4619      	mov	r1, r3
 8004742:	f240 4004 	movw	r0, #1028	@ 0x404
 8004746:	f7fe f853 	bl	80027f0 <tft_writeCmdData>
		break;
 800474a:	e00e      	b.n	800476a <tft_vertScroll+0x232>
	default:
		// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
		tft_writeCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <tft_vertScroll+0x248>)
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	b29b      	uxth	r3, r3
 8004756:	4619      	mov	r1, r3
 8004758:	2061      	movs	r0, #97	@ 0x61
 800475a:	f7fe f849 	bl	80027f0 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 800475e:	8abb      	ldrh	r3, [r7, #20]
 8004760:	4619      	mov	r1, r3
 8004762:	206a      	movs	r0, #106	@ 0x6a
 8004764:	f7fe f844 	bl	80027f0 <tft_writeCmdData>
		break;
 8004768:	bf00      	nop
	}
}
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	200001de 	.word	0x200001de
 8004774:	200001d8 	.word	0x200001d8
 8004778:	200001dc 	.word	0x200001dc
 800477c:	200001d5 	.word	0x200001d5
 8004780:	200001e0 	.word	0x200001e0

08004784 <tft_invertDisplay>:

void tft_invertDisplay(uint8_t i)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800478e:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <tft_invertDisplay+0x13c>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	4053      	eors	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b45      	ldr	r3, [pc, #276]	@ (80048c4 <tft_invertDisplay+0x140>)
 80047ae:	801a      	strh	r2, [r3, #0]
	if (_lcd_capable & MIPI_DCS_REV1) {
 80047b0:	4b43      	ldr	r3, [pc, #268]	@ (80048c0 <tft_invertDisplay+0x13c>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d035      	beq.n	8004828 <tft_invertDisplay+0xa4>
		if (is8347) {
 80047bc:	4b42      	ldr	r3, [pc, #264]	@ (80048c8 <tft_invertDisplay+0x144>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d024      	beq.n	800480e <tft_invertDisplay+0x8a>
			// HX8347D: 0x36 Panel Characteristic. REV_Panel
			// HX8347A: 0x36 is Display Control 10
			if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80047c4:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <tft_invertDisplay+0x148>)
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	f248 3247 	movw	r2, #33607	@ 0x8347
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d005      	beq.n	80047dc <tft_invertDisplay+0x58>
 80047d0:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <tft_invertDisplay+0x148>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f245 2252 	movw	r2, #21074	@ 0x5252
 80047d8:	4293      	cmp	r3, r2
 80047da:	d108      	bne.n	80047ee <tft_invertDisplay+0x6a>
				val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80047dc:	4b39      	ldr	r3, [pc, #228]	@ (80048c4 <tft_invertDisplay+0x140>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <tft_invertDisplay+0x64>
 80047e4:	2306      	movs	r3, #6
 80047e6:	e000      	b.n	80047ea <tft_invertDisplay+0x66>
 80047e8:	2302      	movs	r3, #2
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e007      	b.n	80047fe <tft_invertDisplay+0x7a>
			else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80047ee:	4b35      	ldr	r3, [pc, #212]	@ (80048c4 <tft_invertDisplay+0x140>)
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <tft_invertDisplay+0x76>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e000      	b.n	80047fc <tft_invertDisplay+0x78>
 80047fa:	230a      	movs	r3, #10
 80047fc:	73fb      	strb	r3, [r7, #15]
			// HX8347: 0x01 Display Mode has diff bit mapping for A, D
			WriteCmdParamN(0x01, 1, &val);
 80047fe:	f107 030f 	add.w	r3, r7, #15
 8004802:	461a      	mov	r2, r3
 8004804:	2101      	movs	r1, #1
 8004806:	2001      	movs	r0, #1
 8004808:	f7fd f9d6 	bl	8001bb8 <WriteCmdParamN>
		} else
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
		return;
 800480c:	e055      	b.n	80048ba <tft_invertDisplay+0x136>
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 800480e:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <tft_invertDisplay+0x140>)
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <tft_invertDisplay+0x96>
 8004816:	2321      	movs	r3, #33	@ 0x21
 8004818:	e000      	b.n	800481c <tft_invertDisplay+0x98>
 800481a:	2320      	movs	r3, #32
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd f9c9 	bl	8001bb8 <WriteCmdParamN>
 8004826:	e048      	b.n	80048ba <tft_invertDisplay+0x136>
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 8004828:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <tft_invertDisplay+0x148>)
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004830:	4293      	cmp	r3, r2
 8004832:	d030      	beq.n	8004896 <tft_invertDisplay+0x112>
 8004834:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8004838:	4293      	cmp	r3, r2
 800483a:	dc37      	bgt.n	80048ac <tft_invertDisplay+0x128>
 800483c:	f249 3226 	movw	r2, #37670	@ 0x9326
 8004840:	4293      	cmp	r3, r2
 8004842:	d028      	beq.n	8004896 <tft_invertDisplay+0x112>
 8004844:	f249 3226 	movw	r2, #37670	@ 0x9326
 8004848:	4293      	cmp	r3, r2
 800484a:	dc2f      	bgt.n	80048ac <tft_invertDisplay+0x128>
 800484c:	f249 2225 	movw	r2, #37413	@ 0x9225
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <tft_invertDisplay+0xf8>
 8004854:	f249 2225 	movw	r2, #37413	@ 0x9225
 8004858:	4293      	cmp	r3, r2
 800485a:	dc27      	bgt.n	80048ac <tft_invertDisplay+0x128>
 800485c:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <tft_invertDisplay+0x112>
 8004864:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004868:	4293      	cmp	r3, r2
 800486a:	dc1f      	bgt.n	80048ac <tft_invertDisplay+0x128>
 800486c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8004870:	d004      	beq.n	800487c <tft_invertDisplay+0xf8>
 8004872:	f245 4220 	movw	r2, #21536	@ 0x5420
 8004876:	4293      	cmp	r3, r2
 8004878:	d00d      	beq.n	8004896 <tft_invertDisplay+0x112>
 800487a:	e017      	b.n	80048ac <tft_invertDisplay+0x128>
#ifdef SUPPORT_0139
	case 0x0139:
#endif
	case 0x9225:                                        //REV is in reg(0x07) like Samsung
	case 0x0154:
		tft_writeCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <tft_invertDisplay+0x140>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	b21b      	sxth	r3, r3
 8004884:	f043 0313 	orr.w	r3, r3, #19
 8004888:	b21b      	sxth	r3, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	2007      	movs	r0, #7
 8004890:	f7fd ffae 	bl	80027f0 <tft_writeCmdData>
		break;
 8004894:	e011      	b.n	80048ba <tft_invertDisplay+0x136>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004896:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <tft_invertDisplay+0x140>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	f240 4001 	movw	r0, #1025	@ 0x401
 80048a6:	f7fd ffa3 	bl	80027f0 <tft_writeCmdData>
		break;
 80048aa:	e006      	b.n	80048ba <tft_invertDisplay+0x136>
	default:
		tft_writeCmdData(0x61, _lcd_rev);
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <tft_invertDisplay+0x140>)
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	2061      	movs	r0, #97	@ 0x61
 80048b4:	f7fd ff9c 	bl	80027f0 <tft_writeCmdData>
		break;
 80048b8:	bf00      	nop
	}
}
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200001dc 	.word	0x200001dc
 80048c4:	200001e0 	.word	0x200001e0
 80048c8:	200001d5 	.word	0x200001d5
 80048cc:	200001de 	.word	0x200001de

080048d0 <tft_drawCircle>:
		writeLine(x0, y0, x1, y1, color);
	}
}

void tft_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	80fb      	strh	r3, [r7, #6]
 80048e2:	4603      	mov	r3, r0
 80048e4:	80bb      	strh	r3, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
 80048ea:	4613      	mov	r3, r2
 80048ec:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80048ee:	887b      	ldrh	r3, [r7, #2]
 80048f0:	f1c3 0301 	rsb	r3, r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	461a      	mov	r2, r3
 8004900:	03d2      	lsls	r2, r2, #15
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	81fb      	strh	r3, [r7, #14]

	writePixel(x0  , y0+r, color);
 8004912:	88ba      	ldrh	r2, [r7, #4]
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	4413      	add	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	b219      	sxth	r1, r3
 800491c:	883a      	ldrh	r2, [r7, #0]
 800491e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fef8 	bl	8002718 <writePixel>
	writePixel(x0  , y0-r, color);
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	b219      	sxth	r1, r3
 8004932:	883a      	ldrh	r2, [r7, #0]
 8004934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd feed 	bl	8002718 <writePixel>
	writePixel(x0+r, y0  , color);
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	4413      	add	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	b21b      	sxth	r3, r3
 8004948:	883a      	ldrh	r2, [r7, #0]
 800494a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fee2 	bl	8002718 <writePixel>
	writePixel(x0-r, y0  , color);
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	b21b      	sxth	r3, r3
 800495e:	883a      	ldrh	r2, [r7, #0]
 8004960:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd fed7 	bl	8002718 <writePixel>

	while (x<y) {
 800496a:	e091      	b.n	8004a90 <tft_drawCircle+0x1c0>
		if (f >= 0) {
 800496c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db0e      	blt.n	8004992 <tft_drawCircle+0xc2>
			y--;
 8004974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004980:	8a7b      	ldrh	r3, [r7, #18]
 8004982:	3302      	adds	r3, #2
 8004984:	b29b      	uxth	r3, r3
 8004986:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004988:	8afa      	ldrh	r2, [r7, #22]
 800498a:	8a7b      	ldrh	r3, [r7, #18]
 800498c:	4413      	add	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004992:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004996:	b29b      	uxth	r3, r3
 8004998:	3301      	adds	r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800499e:	8abb      	ldrh	r3, [r7, #20]
 80049a0:	3302      	adds	r3, #2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80049a6:	8afa      	ldrh	r2, [r7, #22]
 80049a8:	8abb      	ldrh	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	82fb      	strh	r3, [r7, #22]

		writePixel(x0 + x, y0 + y, color);
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	8a3b      	ldrh	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	b218      	sxth	r0, r3
 80049ba:	88ba      	ldrh	r2, [r7, #4]
 80049bc:	89fb      	ldrh	r3, [r7, #14]
 80049be:	4413      	add	r3, r2
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	b21b      	sxth	r3, r3
 80049c4:	883a      	ldrh	r2, [r7, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7fd fea6 	bl	8002718 <writePixel>
		writePixel(x0 - x, y0 + y, color);
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	8a3b      	ldrh	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b218      	sxth	r0, r3
 80049d6:	88ba      	ldrh	r2, [r7, #4]
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	4413      	add	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	b21b      	sxth	r3, r3
 80049e0:	883a      	ldrh	r2, [r7, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	f7fd fe98 	bl	8002718 <writePixel>
		writePixel(x0 + x, y0 - y, color);
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	8a3b      	ldrh	r3, [r7, #16]
 80049ec:	4413      	add	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	b218      	sxth	r0, r3
 80049f2:	88ba      	ldrh	r2, [r7, #4]
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	b21b      	sxth	r3, r3
 80049fc:	883a      	ldrh	r2, [r7, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7fd fe8a 	bl	8002718 <writePixel>
		writePixel(x0 - x, y0 - y, color);
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	8a3b      	ldrh	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	b218      	sxth	r0, r3
 8004a0e:	88ba      	ldrh	r2, [r7, #4]
 8004a10:	89fb      	ldrh	r3, [r7, #14]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	883a      	ldrh	r2, [r7, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fd fe7c 	bl	8002718 <writePixel>
		writePixel(x0 + y, y0 + x, color);
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	89fb      	ldrh	r3, [r7, #14]
 8004a24:	4413      	add	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	b218      	sxth	r0, r3
 8004a2a:	88ba      	ldrh	r2, [r7, #4]
 8004a2c:	8a3b      	ldrh	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	883a      	ldrh	r2, [r7, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7fd fe6e 	bl	8002718 <writePixel>
		writePixel(x0 - y, y0 + x, color);
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	b218      	sxth	r0, r3
 8004a46:	88ba      	ldrh	r2, [r7, #4]
 8004a48:	8a3b      	ldrh	r3, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	b21b      	sxth	r3, r3
 8004a50:	883a      	ldrh	r2, [r7, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	f7fd fe60 	bl	8002718 <writePixel>
		writePixel(x0 + y, y0 - x, color);
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	89fb      	ldrh	r3, [r7, #14]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	b218      	sxth	r0, r3
 8004a62:	88ba      	ldrh	r2, [r7, #4]
 8004a64:	8a3b      	ldrh	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	b21b      	sxth	r3, r3
 8004a6c:	883a      	ldrh	r2, [r7, #0]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7fd fe52 	bl	8002718 <writePixel>
		writePixel(x0 - y, y0 - x, color);
 8004a74:	88fa      	ldrh	r2, [r7, #6]
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	b218      	sxth	r0, r3
 8004a7e:	88ba      	ldrh	r2, [r7, #4]
 8004a80:	8a3b      	ldrh	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	883a      	ldrh	r2, [r7, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7fd fe44 	bl	8002718 <writePixel>
	while (x<y) {
 8004a90:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f6ff af67 	blt.w	800496c <tft_drawCircle+0x9c>
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <tft_fillRect>:
	tft_drawFastVLine(x, y, h, color);
	tft_drawFastVLine(x+w-1, y, h, color);
}

void tft_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	80fb      	strh	r3, [r7, #6]
 8004aba:	4603      	mov	r3, r0
 8004abc:	80bb      	strh	r3, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	807b      	strh	r3, [r7, #2]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	803b      	strh	r3, [r7, #0]
	int16_t end;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8004ac6:	4b95      	ldr	r3, [pc, #596]	@ (8004d1c <tft_fillRect+0x274>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <tft_fillRect+0x32>
 8004ace:	8c3b      	ldrh	r3, [r7, #32]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fc fd3b 	bl	800154c <color565_to_555>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	843b      	strh	r3, [r7, #32]
#endif
	if (w < 0) {
 8004ada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da08      	bge.n	8004af4 <tft_fillRect+0x4c>
		w = -w;
 8004ae2:	887b      	ldrh	r3, [r7, #2]
 8004ae4:	425b      	negs	r3, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	807b      	strh	r3, [r7, #2]
		x -= w;
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	80fb      	strh	r3, [r7, #6]
	}                           //+ve w
	end = x + w;
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	4413      	add	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8004afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	da01      	bge.n	8004b0a <tft_fillRect+0x62>
		x = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	80fb      	strh	r3, [r7, #6]
	if (end > width())
 8004b0a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004b0e:	f7fc fd05 	bl	800151c <width>
 8004b12:	4603      	mov	r3, r0
 8004b14:	429c      	cmp	r4, r3
 8004b16:	dd03      	ble.n	8004b20 <tft_fillRect+0x78>
		end = width();
 8004b18:	f7fc fd00 	bl	800151c <width>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	81fb      	strh	r3, [r7, #14]
	w = end - x;
 8004b20:	89fa      	ldrh	r2, [r7, #14]
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	807b      	strh	r3, [r7, #2]
	if (h < 0) {
 8004b2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da08      	bge.n	8004b44 <tft_fillRect+0x9c>
		h = -h;
 8004b32:	883b      	ldrh	r3, [r7, #0]
 8004b34:	425b      	negs	r3, r3
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	803b      	strh	r3, [r7, #0]
		y -= h;
 8004b3a:	88ba      	ldrh	r2, [r7, #4]
 8004b3c:	883b      	ldrh	r3, [r7, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	80bb      	strh	r3, [r7, #4]
	}                           //+ve h
	end = y + h;
 8004b44:	88ba      	ldrh	r2, [r7, #4]
 8004b46:	883b      	ldrh	r3, [r7, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	81fb      	strh	r3, [r7, #14]
	if (y < 0)
 8004b4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da01      	bge.n	8004b5a <tft_fillRect+0xb2>
		y = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	80bb      	strh	r3, [r7, #4]
	if (end > height())
 8004b5a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004b5e:	f7fc fce9 	bl	8001534 <height>
 8004b62:	4603      	mov	r3, r0
 8004b64:	429c      	cmp	r4, r3
 8004b66:	dd03      	ble.n	8004b70 <tft_fillRect+0xc8>
		end = height();
 8004b68:	f7fc fce4 	bl	8001534 <height>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	81fb      	strh	r3, [r7, #14]
	h = end - y;
 8004b70:	89fa      	ldrh	r2, [r7, #14]
 8004b72:	88bb      	ldrh	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	4413      	add	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b21c      	sxth	r4, r3
 8004b88:	88ba      	ldrh	r2, [r7, #4]
 8004b8a:	883b      	ldrh	r3, [r7, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004b9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	f7fd fc96 	bl	80024d0 <setAddrWindow>
	CS_ACTIVE;
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	485e      	ldr	r0, [pc, #376]	@ (8004d20 <tft_fillRect+0x278>)
 8004ba8:	f7fc fc6a 	bl	8001480 <PIN_LOW>
	WriteCmd(_MW);
 8004bac:	2110      	movs	r1, #16
 8004bae:	485d      	ldr	r0, [pc, #372]	@ (8004d24 <tft_fillRect+0x27c>)
 8004bb0:	f7fc fc66 	bl	8001480 <PIN_LOW>
 8004bb4:	4b5c      	ldr	r3, [pc, #368]	@ (8004d28 <tft_fillRect+0x280>)
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	737b      	strb	r3, [r7, #13]
 8004bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8004d28 <tft_fillRect+0x280>)
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	733b      	strb	r3, [r7, #12]
 8004bc4:	4b57      	ldr	r3, [pc, #348]	@ (8004d24 <tft_fillRect+0x27c>)
 8004bc6:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004bca:	619a      	str	r2, [r3, #24]
 8004bcc:	4b54      	ldr	r3, [pc, #336]	@ (8004d20 <tft_fillRect+0x278>)
 8004bce:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004bd2:	619a      	str	r2, [r3, #24]
 8004bd4:	4b55      	ldr	r3, [pc, #340]	@ (8004d2c <tft_fillRect+0x284>)
 8004bd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bda:	619a      	str	r2, [r3, #24]
 8004bdc:	7b7b      	ldrb	r3, [r7, #13]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004be4:	7b7b      	ldrb	r3, [r7, #13]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bec:	431a      	orrs	r2, r3
 8004bee:	7b7b      	ldrb	r3, [r7, #13]
 8004bf0:	025b      	lsls	r3, r3, #9
 8004bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8004d24 <tft_fillRect+0x27c>)
 8004bfa:	619a      	str	r2, [r3, #24]
 8004bfc:	7b7b      	ldrb	r3, [r7, #13]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004c04:	7b7b      	ldrb	r3, [r7, #13]
 8004c06:	105b      	asrs	r3, r3, #1
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	7b7b      	ldrb	r3, [r7, #13]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	431a      	orrs	r2, r3
 8004c18:	7b7b      	ldrb	r3, [r7, #13]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	4b3f      	ldr	r3, [pc, #252]	@ (8004d20 <tft_fillRect+0x278>)
 8004c22:	619a      	str	r2, [r3, #24]
 8004c24:	7b7b      	ldrb	r3, [r7, #13]
 8004c26:	019b      	lsls	r3, r3, #6
 8004c28:	4a40      	ldr	r2, [pc, #256]	@ (8004d2c <tft_fillRect+0x284>)
 8004c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2e:	6193      	str	r3, [r2, #24]
 8004c30:	2102      	movs	r1, #2
 8004c32:	483c      	ldr	r0, [pc, #240]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c34:	f7fc fc24 	bl	8001480 <PIN_LOW>
 8004c38:	2102      	movs	r1, #2
 8004c3a:	483a      	ldr	r0, [pc, #232]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c3c:	f7fc fc20 	bl	8001480 <PIN_LOW>
 8004c40:	2102      	movs	r1, #2
 8004c42:	4838      	ldr	r0, [pc, #224]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c44:	f7fc fc1c 	bl	8001480 <PIN_LOW>
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4836      	ldr	r0, [pc, #216]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c4c:	f7fc fc28 	bl	80014a0 <PIN_HIGH>
 8004c50:	2102      	movs	r1, #2
 8004c52:	4834      	ldr	r0, [pc, #208]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c54:	f7fc fc24 	bl	80014a0 <PIN_HIGH>
 8004c58:	4b32      	ldr	r3, [pc, #200]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c5a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <tft_fillRect+0x278>)
 8004c62:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004c66:	619a      	str	r2, [r3, #24]
 8004c68:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <tft_fillRect+0x284>)
 8004c6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c6e:	619a      	str	r2, [r3, #24]
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004c78:	7b3b      	ldrb	r3, [r7, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	431a      	orrs	r2, r3
 8004c82:	7b3b      	ldrb	r3, [r7, #12]
 8004c84:	025b      	lsls	r3, r3, #9
 8004c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	4b25      	ldr	r3, [pc, #148]	@ (8004d24 <tft_fillRect+0x27c>)
 8004c8e:	619a      	str	r2, [r3, #24]
 8004c90:	7b3b      	ldrb	r3, [r7, #12]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004c98:	7b3b      	ldrb	r3, [r7, #12]
 8004c9a:	105b      	asrs	r3, r3, #1
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	7b3b      	ldrb	r3, [r7, #12]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	431a      	orrs	r2, r3
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <tft_fillRect+0x278>)
 8004cb6:	619a      	str	r2, [r3, #24]
 8004cb8:	7b3b      	ldrb	r3, [r7, #12]
 8004cba:	019b      	lsls	r3, r3, #6
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <tft_fillRect+0x284>)
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	6193      	str	r3, [r2, #24]
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	4817      	ldr	r0, [pc, #92]	@ (8004d24 <tft_fillRect+0x27c>)
 8004cc8:	f7fc fbda 	bl	8001480 <PIN_LOW>
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4815      	ldr	r0, [pc, #84]	@ (8004d24 <tft_fillRect+0x27c>)
 8004cd0:	f7fc fbd6 	bl	8001480 <PIN_LOW>
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	4813      	ldr	r0, [pc, #76]	@ (8004d24 <tft_fillRect+0x27c>)
 8004cd8:	f7fc fbd2 	bl	8001480 <PIN_LOW>
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4811      	ldr	r0, [pc, #68]	@ (8004d24 <tft_fillRect+0x27c>)
 8004ce0:	f7fc fbde 	bl	80014a0 <PIN_HIGH>
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	480f      	ldr	r0, [pc, #60]	@ (8004d24 <tft_fillRect+0x27c>)
 8004ce8:	f7fc fbda 	bl	80014a0 <PIN_HIGH>
 8004cec:	2110      	movs	r1, #16
 8004cee:	480d      	ldr	r0, [pc, #52]	@ (8004d24 <tft_fillRect+0x27c>)
 8004cf0:	f7fc fbd6 	bl	80014a0 <PIN_HIGH>
	if (h > w) {
 8004cf4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	dd05      	ble.n	8004d0c <tft_fillRect+0x264>
		end = h;
 8004d00:	883b      	ldrh	r3, [r7, #0]
 8004d02:	81fb      	strh	r3, [r7, #14]
		h = w;
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	803b      	strh	r3, [r7, #0]
		w = end;
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	807b      	strh	r3, [r7, #2]
	}
	uint8_t hi = color >> 8, lo = color & 0xFF;
 8004d0c:	8c3b      	ldrh	r3, [r7, #32]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	72fb      	strb	r3, [r7, #11]
 8004d14:	8c3b      	ldrh	r3, [r7, #32]
 8004d16:	72bb      	strb	r3, [r7, #10]
	while (h-- > 0) {
 8004d18:	e0a9      	b.n	8004e6e <tft_fillRect+0x3c6>
 8004d1a:	bf00      	nop
 8004d1c:	200001d6 	.word	0x200001d6
 8004d20:	40020400 	.word	0x40020400
 8004d24:	40020000 	.word	0x40020000
 8004d28:	200001e8 	.word	0x200001e8
 8004d2c:	40020800 	.word	0x40020800
		end = w;
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	81fb      	strh	r3, [r7, #14]
		//                 write8(b);
		//             } while (--end != 0);
		//        } else
		//#endif
		do {
			write8(hi);
 8004d34:	4b68      	ldr	r3, [pc, #416]	@ (8004ed8 <tft_fillRect+0x430>)
 8004d36:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004d3a:	619a      	str	r2, [r3, #24]
 8004d3c:	4b67      	ldr	r3, [pc, #412]	@ (8004edc <tft_fillRect+0x434>)
 8004d3e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004d42:	619a      	str	r2, [r3, #24]
 8004d44:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <tft_fillRect+0x438>)
 8004d46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d4a:	619a      	str	r2, [r3, #24]
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004d54:	7afb      	ldrb	r3, [r7, #11]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d66:	431a      	orrs	r2, r3
 8004d68:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed8 <tft_fillRect+0x430>)
 8004d6a:	619a      	str	r2, [r3, #24]
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004d74:	7afb      	ldrb	r3, [r7, #11]
 8004d76:	105b      	asrs	r3, r3, #1
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	431a      	orrs	r2, r3
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	4b52      	ldr	r3, [pc, #328]	@ (8004edc <tft_fillRect+0x434>)
 8004d92:	619a      	str	r2, [r3, #24]
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	019b      	lsls	r3, r3, #6
 8004d98:	4a51      	ldr	r2, [pc, #324]	@ (8004ee0 <tft_fillRect+0x438>)
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	6193      	str	r3, [r2, #24]
 8004da0:	2102      	movs	r1, #2
 8004da2:	484d      	ldr	r0, [pc, #308]	@ (8004ed8 <tft_fillRect+0x430>)
 8004da4:	f7fc fb6c 	bl	8001480 <PIN_LOW>
 8004da8:	2102      	movs	r1, #2
 8004daa:	484b      	ldr	r0, [pc, #300]	@ (8004ed8 <tft_fillRect+0x430>)
 8004dac:	f7fc fb68 	bl	8001480 <PIN_LOW>
 8004db0:	2102      	movs	r1, #2
 8004db2:	4849      	ldr	r0, [pc, #292]	@ (8004ed8 <tft_fillRect+0x430>)
 8004db4:	f7fc fb64 	bl	8001480 <PIN_LOW>
 8004db8:	2102      	movs	r1, #2
 8004dba:	4847      	ldr	r0, [pc, #284]	@ (8004ed8 <tft_fillRect+0x430>)
 8004dbc:	f7fc fb70 	bl	80014a0 <PIN_HIGH>
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4845      	ldr	r0, [pc, #276]	@ (8004ed8 <tft_fillRect+0x430>)
 8004dc4:	f7fc fb6c 	bl	80014a0 <PIN_HIGH>
			write8(lo);
 8004dc8:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <tft_fillRect+0x430>)
 8004dca:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004dce:	619a      	str	r2, [r3, #24]
 8004dd0:	4b42      	ldr	r3, [pc, #264]	@ (8004edc <tft_fillRect+0x434>)
 8004dd2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004dd6:	619a      	str	r2, [r3, #24]
 8004dd8:	4b41      	ldr	r3, [pc, #260]	@ (8004ee0 <tft_fillRect+0x438>)
 8004dda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004dde:	619a      	str	r2, [r3, #24]
 8004de0:	7abb      	ldrb	r3, [r7, #10]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004de8:	7abb      	ldrb	r3, [r7, #10]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df0:	431a      	orrs	r2, r3
 8004df2:	7abb      	ldrb	r3, [r7, #10]
 8004df4:	025b      	lsls	r3, r3, #9
 8004df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	4b36      	ldr	r3, [pc, #216]	@ (8004ed8 <tft_fillRect+0x430>)
 8004dfe:	619a      	str	r2, [r3, #24]
 8004e00:	7abb      	ldrb	r3, [r7, #10]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004e08:	7abb      	ldrb	r3, [r7, #10]
 8004e0a:	105b      	asrs	r3, r3, #1
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	7abb      	ldrb	r3, [r7, #10]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	7abb      	ldrb	r3, [r7, #10]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	431a      	orrs	r2, r3
 8004e24:	4b2d      	ldr	r3, [pc, #180]	@ (8004edc <tft_fillRect+0x434>)
 8004e26:	619a      	str	r2, [r3, #24]
 8004e28:	7abb      	ldrb	r3, [r7, #10]
 8004e2a:	019b      	lsls	r3, r3, #6
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee0 <tft_fillRect+0x438>)
 8004e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e32:	6193      	str	r3, [r2, #24]
 8004e34:	2102      	movs	r1, #2
 8004e36:	4828      	ldr	r0, [pc, #160]	@ (8004ed8 <tft_fillRect+0x430>)
 8004e38:	f7fc fb22 	bl	8001480 <PIN_LOW>
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4826      	ldr	r0, [pc, #152]	@ (8004ed8 <tft_fillRect+0x430>)
 8004e40:	f7fc fb1e 	bl	8001480 <PIN_LOW>
 8004e44:	2102      	movs	r1, #2
 8004e46:	4824      	ldr	r0, [pc, #144]	@ (8004ed8 <tft_fillRect+0x430>)
 8004e48:	f7fc fb1a 	bl	8001480 <PIN_LOW>
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	4822      	ldr	r0, [pc, #136]	@ (8004ed8 <tft_fillRect+0x430>)
 8004e50:	f7fc fb26 	bl	80014a0 <PIN_HIGH>
 8004e54:	2102      	movs	r1, #2
 8004e56:	4820      	ldr	r0, [pc, #128]	@ (8004ed8 <tft_fillRect+0x430>)
 8004e58:	f7fc fb22 	bl	80014a0 <PIN_HIGH>
		} while (--end != 0);
 8004e5c:	89fb      	ldrh	r3, [r7, #14]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	81fb      	strh	r3, [r7, #14]
 8004e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f47f af63 	bne.w	8004d34 <tft_fillRect+0x28c>
	while (h-- > 0) {
 8004e6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	3a01      	subs	r2, #1
 8004e76:	b292      	uxth	r2, r2
 8004e78:	803a      	strh	r2, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f73f af58 	bgt.w	8004d30 <tft_fillRect+0x288>
#endif
	}
	CS_IDLE;
 8004e80:	2101      	movs	r1, #1
 8004e82:	4816      	ldr	r0, [pc, #88]	@ (8004edc <tft_fillRect+0x434>)
 8004e84:	f7fc fb0c 	bl	80014a0 <PIN_HIGH>
	if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8004e88:	4b16      	ldr	r3, [pc, #88]	@ (8004ee4 <tft_fillRect+0x43c>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <tft_fillRect+0x404>
 8004e94:	4b14      	ldr	r3, [pc, #80]	@ (8004ee8 <tft_fillRect+0x440>)
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	f241 5226 	movw	r2, #5414	@ 0x1526
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d116      	bne.n	8004ece <tft_fillRect+0x426>
 8004ea0:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <tft_fillRect+0x444>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <tft_fillRect+0x426>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8004eac:	f7fc fb36 	bl	800151c <width>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	b21c      	sxth	r4, r3
 8004eb8:	f7fc fb3c 	bl	8001534 <height>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7fd fb01 	bl	80024d0 <setAddrWindow>
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40020000 	.word	0x40020000
 8004edc:	40020400 	.word	0x40020400
 8004ee0:	40020800 	.word	0x40020800
 8004ee4:	200001dc 	.word	0x200001dc
 8004ee8:	200001de 	.word	0x200001de
 8004eec:	200001d8 	.word	0x200001d8

08004ef0 <tft_fillScreen>:
		tft_drawFastHLine(a, y, b-a+1, color);
	}
}

void tft_fillScreen(uint16_t color)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	80fb      	strh	r3, [r7, #6]
	tft_fillRect(0, 0, _width, _height, color);
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <tft_fillScreen+0x2c>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b21a      	sxth	r2, r3
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <tft_fillScreen+0x30>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b219      	sxth	r1, r3
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7ff fdca 	bl	8004aa8 <tft_fillRect>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	2000000e 	.word	0x2000000e

08004f24 <tft_inicioDados>:
{
	write16(pixel);
}

void tft_inicioDados(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
	CS_ACTIVE;
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4853      	ldr	r0, [pc, #332]	@ (800507c <tft_inicioDados+0x158>)
 8004f2e:	f7fc faa7 	bl	8001480 <PIN_LOW>
	WriteCmd(0x2C);
 8004f32:	2110      	movs	r1, #16
 8004f34:	4852      	ldr	r0, [pc, #328]	@ (8005080 <tft_inicioDados+0x15c>)
 8004f36:	f7fc faa3 	bl	8001480 <PIN_LOW>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	232c      	movs	r3, #44	@ 0x2c
 8004f40:	71bb      	strb	r3, [r7, #6]
 8004f42:	4b4f      	ldr	r3, [pc, #316]	@ (8005080 <tft_inicioDados+0x15c>)
 8004f44:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800507c <tft_inicioDados+0x158>)
 8004f4c:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004f50:	619a      	str	r2, [r3, #24]
 8004f52:	4b4c      	ldr	r3, [pc, #304]	@ (8005084 <tft_inicioDados+0x160>)
 8004f54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f58:	619a      	str	r2, [r3, #24]
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	025b      	lsls	r3, r3, #9
 8004f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f74:	431a      	orrs	r2, r3
 8004f76:	4b42      	ldr	r3, [pc, #264]	@ (8005080 <tft_inicioDados+0x15c>)
 8004f78:	619a      	str	r2, [r3, #24]
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	105b      	asrs	r3, r3, #1
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	431a      	orrs	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	4b37      	ldr	r3, [pc, #220]	@ (800507c <tft_inicioDados+0x158>)
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	4a37      	ldr	r2, [pc, #220]	@ (8005084 <tft_inicioDados+0x160>)
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	6193      	str	r3, [r2, #24]
 8004fae:	2102      	movs	r1, #2
 8004fb0:	4833      	ldr	r0, [pc, #204]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fb2:	f7fc fa65 	bl	8001480 <PIN_LOW>
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	4831      	ldr	r0, [pc, #196]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fba:	f7fc fa61 	bl	8001480 <PIN_LOW>
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	482f      	ldr	r0, [pc, #188]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fc2:	f7fc fa5d 	bl	8001480 <PIN_LOW>
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	482d      	ldr	r0, [pc, #180]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fca:	f7fc fa69 	bl	80014a0 <PIN_HIGH>
 8004fce:	2102      	movs	r1, #2
 8004fd0:	482b      	ldr	r0, [pc, #172]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fd2:	f7fc fa65 	bl	80014a0 <PIN_HIGH>
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8005080 <tft_inicioDados+0x15c>)
 8004fd8:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8004fdc:	619a      	str	r2, [r3, #24]
 8004fde:	4b27      	ldr	r3, [pc, #156]	@ (800507c <tft_inicioDados+0x158>)
 8004fe0:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004fe4:	619a      	str	r2, [r3, #24]
 8004fe6:	4b27      	ldr	r3, [pc, #156]	@ (8005084 <tft_inicioDados+0x160>)
 8004fe8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004fec:	619a      	str	r2, [r3, #24]
 8004fee:	79bb      	ldrb	r3, [r7, #6]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004ff6:	79bb      	ldrb	r3, [r7, #6]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffe:	431a      	orrs	r2, r3
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	025b      	lsls	r3, r3, #9
 8005004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005008:	431a      	orrs	r2, r3
 800500a:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <tft_inicioDados+0x15c>)
 800500c:	619a      	str	r2, [r3, #24]
 800500e:	79bb      	ldrb	r3, [r7, #6]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8005016:	79bb      	ldrb	r3, [r7, #6]
 8005018:	105b      	asrs	r3, r3, #1
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	431a      	orrs	r2, r3
 8005020:	79bb      	ldrb	r3, [r7, #6]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	431a      	orrs	r2, r3
 800502a:	79bb      	ldrb	r3, [r7, #6]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	431a      	orrs	r2, r3
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <tft_inicioDados+0x158>)
 8005034:	619a      	str	r2, [r3, #24]
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <tft_inicioDados+0x160>)
 800503c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005040:	6193      	str	r3, [r2, #24]
 8005042:	2102      	movs	r1, #2
 8005044:	480e      	ldr	r0, [pc, #56]	@ (8005080 <tft_inicioDados+0x15c>)
 8005046:	f7fc fa1b 	bl	8001480 <PIN_LOW>
 800504a:	2102      	movs	r1, #2
 800504c:	480c      	ldr	r0, [pc, #48]	@ (8005080 <tft_inicioDados+0x15c>)
 800504e:	f7fc fa17 	bl	8001480 <PIN_LOW>
 8005052:	2102      	movs	r1, #2
 8005054:	480a      	ldr	r0, [pc, #40]	@ (8005080 <tft_inicioDados+0x15c>)
 8005056:	f7fc fa13 	bl	8001480 <PIN_LOW>
 800505a:	2102      	movs	r1, #2
 800505c:	4808      	ldr	r0, [pc, #32]	@ (8005080 <tft_inicioDados+0x15c>)
 800505e:	f7fc fa1f 	bl	80014a0 <PIN_HIGH>
 8005062:	2102      	movs	r1, #2
 8005064:	4806      	ldr	r0, [pc, #24]	@ (8005080 <tft_inicioDados+0x15c>)
 8005066:	f7fc fa1b 	bl	80014a0 <PIN_HIGH>
 800506a:	2110      	movs	r1, #16
 800506c:	4804      	ldr	r0, [pc, #16]	@ (8005080 <tft_inicioDados+0x15c>)
 800506e:	f7fc fa17 	bl	80014a0 <PIN_HIGH>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40020400 	.word	0x40020400
 8005080:	40020000 	.word	0x40020000
 8005084:	40020800 	.word	0x40020800

08005088 <tft_fimDados>:

void tft_fimDados(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	CS_IDLE;
 800508c:	2101      	movs	r1, #1
 800508e:	4802      	ldr	r0, [pc, #8]	@ (8005098 <tft_fimDados+0x10>)
 8005090:	f7fc fa06 	bl	80014a0 <PIN_HIGH>
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40020400 	.word	0x40020400

0800509c <tft_gpio_init>:
	setAddrWindow(x, y, x1, y1);
}

/****************** Inicialização de GPIOs *************************/
void tft_gpio_init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b32      	ldr	r3, [pc, #200]	@ (8005170 <tft_gpio_init+0xd4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	4a31      	ldr	r2, [pc, #196]	@ (8005170 <tft_gpio_init+0xd4>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005170 <tft_gpio_init+0xd4>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <tft_gpio_init+0xd4>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005170 <tft_gpio_init+0xd4>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ce:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <tft_gpio_init+0xd4>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <tft_gpio_init+0xd4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	4a23      	ldr	r2, [pc, #140]	@ (8005170 <tft_gpio_init+0xd4>)
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ea:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <tft_gpio_init+0xd4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80050f6:	2101      	movs	r1, #1
 80050f8:	481e      	ldr	r0, [pc, #120]	@ (8005174 <tft_gpio_init+0xd8>)
 80050fa:	f7fc f9f7 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 80050fe:	2102      	movs	r1, #2
 8005100:	481c      	ldr	r0, [pc, #112]	@ (8005174 <tft_gpio_init+0xd8>)
 8005102:	f7fc f9f3 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 8005106:	2110      	movs	r1, #16
 8005108:	481a      	ldr	r0, [pc, #104]	@ (8005174 <tft_gpio_init+0xd8>)
 800510a:	f7fc f9ef 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 800510e:	2101      	movs	r1, #1
 8005110:	4819      	ldr	r0, [pc, #100]	@ (8005178 <tft_gpio_init+0xdc>)
 8005112:	f7fc f9eb 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 8005116:	2102      	movs	r1, #2
 8005118:	4818      	ldr	r0, [pc, #96]	@ (800517c <tft_gpio_init+0xe0>)
 800511a:	f7fc f9e7 	bl	80014ec <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 800511e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005122:	4814      	ldr	r0, [pc, #80]	@ (8005174 <tft_gpio_init+0xd8>)
 8005124:	f7fc f9e2 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	4814      	ldr	r0, [pc, #80]	@ (800517c <tft_gpio_init+0xe0>)
 800512c:	f7fc f9de 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8005130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005134:	480f      	ldr	r0, [pc, #60]	@ (8005174 <tft_gpio_init+0xd8>)
 8005136:	f7fc f9d9 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 800513a:	2108      	movs	r1, #8
 800513c:	480e      	ldr	r0, [pc, #56]	@ (8005178 <tft_gpio_init+0xdc>)
 800513e:	f7fc f9d5 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8005142:	2120      	movs	r1, #32
 8005144:	480c      	ldr	r0, [pc, #48]	@ (8005178 <tft_gpio_init+0xdc>)
 8005146:	f7fc f9d1 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800514a:	2110      	movs	r1, #16
 800514c:	480a      	ldr	r0, [pc, #40]	@ (8005178 <tft_gpio_init+0xdc>)
 800514e:	f7fc f9cd 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8005152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005156:	4808      	ldr	r0, [pc, #32]	@ (8005178 <tft_gpio_init+0xdc>)
 8005158:	f7fc f9c8 	bl	80014ec <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800515c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005160:	4804      	ldr	r0, [pc, #16]	@ (8005174 <tft_gpio_init+0xd8>)
 8005162:	f7fc f9c3 	bl	80014ec <PIN_OUTPUT>
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800
 8005174:	40020000 	.word	0x40020000
 8005178:	40020400 	.word	0x40020400
 800517c:	40020800 	.word	0x40020800

08005180 <tft_drawRGBBitmap>:
//        h     number of pixels tall
// Output: none
// Must be less than or equal to 320 pixels wide by 240 pixels high
#define TOP_DOWN
void tft_drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[], int16_t w, int16_t h)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60ba      	str	r2, [r7, #8]
 8005188:	461a      	mov	r2, r3
 800518a:	4603      	mov	r3, r0
 800518c:	81fb      	strh	r3, [r7, #14]
 800518e:	460b      	mov	r3, r1
 8005190:	81bb      	strh	r3, [r7, #12]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
	int16_t skipC = 0;                      // non-zero if columns need to be skipped due to clipping
 8005196:	2300      	movs	r3, #0
 8005198:	83fb      	strh	r3, [r7, #30]
	int16_t originalWidth = w;              // save this value; even if not all columns fit on the screen, the image is still this width in ROM
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	82fb      	strh	r3, [r7, #22]
	int i = w*(h - 1);
 800519e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a2:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80051a6:	3a01      	subs	r2, #1
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	61bb      	str	r3, [r7, #24]

#ifdef TOP_DOWN
	i = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
#endif

	if((x >= _width) || ((y - h + 1) >= _height) || ((x + w) <= 0) || (y < 0))
 80051b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b6:	4ab2      	ldr	r2, [pc, #712]	@ (8005480 <tft_drawRGBBitmap+0x300>)
 80051b8:	8812      	ldrh	r2, [r2, #0]
 80051ba:	4293      	cmp	r3, r2
 80051bc:	f280 816a 	bge.w	8005494 <tft_drawRGBBitmap+0x314>
 80051c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80051c4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	4aad      	ldr	r2, [pc, #692]	@ (8005484 <tft_drawRGBBitmap+0x304>)
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	f280 815f 	bge.w	8005494 <tft_drawRGBBitmap+0x314>
 80051d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80051da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051de:	4413      	add	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f340 8157 	ble.w	8005494 <tft_drawRGBBitmap+0x314>
 80051e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f2c0 8152 	blt.w	8005494 <tft_drawRGBBitmap+0x314>
	{
		return;                             // image is totally off the screen, do nothing
	}
	if((w > _width) || (h > _height))		// image is too wide for the screen, do nothing
 80051f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f4:	4aa2      	ldr	r2, [pc, #648]	@ (8005480 <tft_drawRGBBitmap+0x300>)
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	f300 814d 	bgt.w	8005498 <tft_drawRGBBitmap+0x318>
 80051fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005202:	4aa0      	ldr	r2, [pc, #640]	@ (8005484 <tft_drawRGBBitmap+0x304>)
 8005204:	8812      	ldrh	r2, [r2, #0]
 8005206:	4293      	cmp	r3, r2
 8005208:	f300 8146 	bgt.w	8005498 <tft_drawRGBBitmap+0x318>
		//following logic much more complicated, since you can have
		//an image that exceeds multiple boundaries and needs to be
		//clipped on more than one side.
		return;
	}
	if((x + w - 1) >= _width)	// image exceeds right of screen
 800520c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005214:	4413      	add	r3, r2
 8005216:	4a9a      	ldr	r2, [pc, #616]	@ (8005480 <tft_drawRGBBitmap+0x300>)
 8005218:	8812      	ldrh	r2, [r2, #0]
 800521a:	4293      	cmp	r3, r2
 800521c:	dd0e      	ble.n	800523c <tft_drawRGBBitmap+0xbc>
	{
		skipC = (x + w) - _width;           // skip cut off columns
 800521e:	89fa      	ldrh	r2, [r7, #14]
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	4413      	add	r3, r2
 8005224:	b29a      	uxth	r2, r3
 8005226:	4b96      	ldr	r3, [pc, #600]	@ (8005480 <tft_drawRGBBitmap+0x300>)
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	b29b      	uxth	r3, r3
 800522e:	83fb      	strh	r3, [r7, #30]
		w = _width - x;
 8005230:	4b93      	ldr	r3, [pc, #588]	@ (8005480 <tft_drawRGBBitmap+0x300>)
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	89fb      	ldrh	r3, [r7, #14]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	b29b      	uxth	r3, r3
 800523a:	80fb      	strh	r3, [r7, #6]
	}
	if((y - h + 1) < 0)			// image exceeds top of screen
 800523c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005240:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	da10      	bge.n	800526e <tft_drawRGBBitmap+0xee>
	{
		i = i - (h - y - 1)*originalWidth;  // skip the last cut off rows
 800524c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8005250:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	61bb      	str	r3, [r7, #24]
		h = y + 1;
 8005266:	89bb      	ldrh	r3, [r7, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	if(x < 0)					// image exceeds left of screen
 800526e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0f      	bge.n	8005296 <tft_drawRGBBitmap+0x116>
	{
		w = w + x;
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	4413      	add	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	80fb      	strh	r3, [r7, #6]
		skipC = -1*x;                       // skip cut off columns
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	425b      	negs	r3, r3
 8005284:	b29b      	uxth	r3, r3
 8005286:	83fb      	strh	r3, [r7, #30]
		i = i - x;                          // skip the first cut off columns
 8005288:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	61bb      	str	r3, [r7, #24]
		x = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	81fb      	strh	r3, [r7, #14]
	}
	if(y >= _height)			// image exceeds bottom of screen
 8005296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800529a:	4a7a      	ldr	r2, [pc, #488]	@ (8005484 <tft_drawRGBBitmap+0x304>)
 800529c:	8812      	ldrh	r2, [r2, #0]
 800529e:	4293      	cmp	r3, r2
 80052a0:	db0f      	blt.n	80052c2 <tft_drawRGBBitmap+0x142>
	{
		h = h - (y - _height + 1);
 80052a2:	4b78      	ldr	r3, [pc, #480]	@ (8005484 <tft_drawRGBBitmap+0x304>)
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	89bb      	ldrh	r3, [r7, #12]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80052ae:	4413      	add	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	853b      	strh	r3, [r7, #40]	@ 0x28
		y = _height - 1;
 80052b8:	4b72      	ldr	r3, [pc, #456]	@ (8005484 <tft_drawRGBBitmap+0x304>)
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	81bb      	strh	r3, [r7, #12]
	}

	setAddrWindow(x, y-h+1, x+w-1, y);
 80052c2:	89ba      	ldrh	r2, [r7, #12]
 80052c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3301      	adds	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	b219      	sxth	r1, r3
 80052d0:	89fa      	ldrh	r2, [r7, #14]
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	4413      	add	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	b21a      	sxth	r2, r3
 80052de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052e2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80052e6:	f7fd f8f3 	bl	80024d0 <setAddrWindow>

	tft_inicioDados();
 80052ea:	f7ff fe1b 	bl	8004f24 <tft_inicioDados>

#ifdef TOP_DOWN
	//Plota na ordem direta (de cima para baixo, da esquerda para direita)
	//Dessa forma, uma imagem normal fica na orientação correta
	for(y=0; y<h; y=y+1)
 80052ee:	2300      	movs	r3, #0
 80052f0:	81bb      	strh	r3, [r7, #12]
 80052f2:	e0bb      	b.n	800546c <tft_drawRGBBitmap+0x2ec>
	{
		for(x=0; x<w; x=x+1)
 80052f4:	2300      	movs	r3, #0
 80052f6:	81fb      	strh	r3, [r7, #14]
 80052f8:	e0a8      	b.n	800544c <tft_drawRGBBitmap+0x2cc>
		{
			write16(bitmap[i]);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	b29b      	uxth	r3, r3
 8005308:	757b      	strb	r3, [r7, #21]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	753b      	strb	r3, [r7, #20]
 8005316:	4b5c      	ldr	r3, [pc, #368]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 8005318:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800531c:	619a      	str	r2, [r3, #24]
 800531e:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <tft_drawRGBBitmap+0x30c>)
 8005320:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8005324:	619a      	str	r2, [r3, #24]
 8005326:	4b5a      	ldr	r3, [pc, #360]	@ (8005490 <tft_drawRGBBitmap+0x310>)
 8005328:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800532c:	619a      	str	r2, [r3, #24]
 800532e:	7d7b      	ldrb	r3, [r7, #21]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8005336:	7d7b      	ldrb	r3, [r7, #21]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533e:	431a      	orrs	r2, r3
 8005340:	7d7b      	ldrb	r3, [r7, #21]
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005348:	431a      	orrs	r2, r3
 800534a:	4b4f      	ldr	r3, [pc, #316]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800534c:	619a      	str	r2, [r3, #24]
 800534e:	7d7b      	ldrb	r3, [r7, #21]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8005356:	7d7b      	ldrb	r3, [r7, #21]
 8005358:	105b      	asrs	r3, r3, #1
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	431a      	orrs	r2, r3
 8005360:	7d7b      	ldrb	r3, [r7, #21]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	431a      	orrs	r2, r3
 800536a:	7d7b      	ldrb	r3, [r7, #21]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	431a      	orrs	r2, r3
 8005372:	4b46      	ldr	r3, [pc, #280]	@ (800548c <tft_drawRGBBitmap+0x30c>)
 8005374:	619a      	str	r2, [r3, #24]
 8005376:	7d7b      	ldrb	r3, [r7, #21]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	4a45      	ldr	r2, [pc, #276]	@ (8005490 <tft_drawRGBBitmap+0x310>)
 800537c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005380:	6193      	str	r3, [r2, #24]
 8005382:	2102      	movs	r1, #2
 8005384:	4840      	ldr	r0, [pc, #256]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 8005386:	f7fc f87b 	bl	8001480 <PIN_LOW>
 800538a:	2102      	movs	r1, #2
 800538c:	483e      	ldr	r0, [pc, #248]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800538e:	f7fc f877 	bl	8001480 <PIN_LOW>
 8005392:	2102      	movs	r1, #2
 8005394:	483c      	ldr	r0, [pc, #240]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 8005396:	f7fc f873 	bl	8001480 <PIN_LOW>
 800539a:	2102      	movs	r1, #2
 800539c:	483a      	ldr	r0, [pc, #232]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800539e:	f7fc f87f 	bl	80014a0 <PIN_HIGH>
 80053a2:	2102      	movs	r1, #2
 80053a4:	4838      	ldr	r0, [pc, #224]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 80053a6:	f7fc f87b 	bl	80014a0 <PIN_HIGH>
 80053aa:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 80053ac:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80053b0:	619a      	str	r2, [r3, #24]
 80053b2:	4b36      	ldr	r3, [pc, #216]	@ (800548c <tft_drawRGBBitmap+0x30c>)
 80053b4:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80053b8:	619a      	str	r2, [r3, #24]
 80053ba:	4b35      	ldr	r3, [pc, #212]	@ (8005490 <tft_drawRGBBitmap+0x310>)
 80053bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053c0:	619a      	str	r2, [r3, #24]
 80053c2:	7d3b      	ldrb	r3, [r7, #20]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80053ca:	7d3b      	ldrb	r3, [r7, #20]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d2:	431a      	orrs	r2, r3
 80053d4:	7d3b      	ldrb	r3, [r7, #20]
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053dc:	431a      	orrs	r2, r3
 80053de:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 80053e0:	619a      	str	r2, [r3, #24]
 80053e2:	7d3b      	ldrb	r3, [r7, #20]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80053ea:	7d3b      	ldrb	r3, [r7, #20]
 80053ec:	105b      	asrs	r3, r3, #1
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	7d3b      	ldrb	r3, [r7, #20]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	431a      	orrs	r2, r3
 80053fe:	7d3b      	ldrb	r3, [r7, #20]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	431a      	orrs	r2, r3
 8005406:	4b21      	ldr	r3, [pc, #132]	@ (800548c <tft_drawRGBBitmap+0x30c>)
 8005408:	619a      	str	r2, [r3, #24]
 800540a:	7d3b      	ldrb	r3, [r7, #20]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	4a20      	ldr	r2, [pc, #128]	@ (8005490 <tft_drawRGBBitmap+0x310>)
 8005410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005414:	6193      	str	r3, [r2, #24]
 8005416:	2102      	movs	r1, #2
 8005418:	481b      	ldr	r0, [pc, #108]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800541a:	f7fc f831 	bl	8001480 <PIN_LOW>
 800541e:	2102      	movs	r1, #2
 8005420:	4819      	ldr	r0, [pc, #100]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 8005422:	f7fc f82d 	bl	8001480 <PIN_LOW>
 8005426:	2102      	movs	r1, #2
 8005428:	4817      	ldr	r0, [pc, #92]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800542a:	f7fc f829 	bl	8001480 <PIN_LOW>
 800542e:	2102      	movs	r1, #2
 8005430:	4815      	ldr	r0, [pc, #84]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 8005432:	f7fc f835 	bl	80014a0 <PIN_HIGH>
 8005436:	2102      	movs	r1, #2
 8005438:	4813      	ldr	r0, [pc, #76]	@ (8005488 <tft_drawRGBBitmap+0x308>)
 800543a:	f7fc f831 	bl	80014a0 <PIN_HIGH>

			i = i + 1;                        // go to the next pixel
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3301      	adds	r3, #1
 8005442:	61bb      	str	r3, [r7, #24]
		for(x=0; x<w; x=x+1)
 8005444:	89fb      	ldrh	r3, [r7, #14]
 8005446:	3301      	adds	r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	81fb      	strh	r3, [r7, #14]
 800544c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005454:	429a      	cmp	r2, r3
 8005456:	f6ff af50 	blt.w	80052fa <tft_drawRGBBitmap+0x17a>
		}
		i = i + skipC;
 800545a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4413      	add	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
	for(y=0; y<h; y=y+1)
 8005464:	89bb      	ldrh	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	b29b      	uxth	r3, r3
 800546a:	81bb      	strh	r3, [r7, #12]
 800546c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005470:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005474:	429a      	cmp	r2, r3
 8005476:	f6ff af3d 	blt.w	80052f4 <tft_drawRGBBitmap+0x174>
		i = i + skipC;
		i = i - 2*originalWidth;
	}
#endif

	tft_fimDados();
 800547a:	f7ff fe05 	bl	8005088 <tft_fimDados>
 800547e:	e00c      	b.n	800549a <tft_drawRGBBitmap+0x31a>
 8005480:	2000000c 	.word	0x2000000c
 8005484:	2000000e 	.word	0x2000000e
 8005488:	40020000 	.word	0x40020000
 800548c:	40020400 	.word	0x40020400
 8005490:	40020800 	.word	0x40020800
		return;                             // image is totally off the screen, do nothing
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <tft_drawRGBBitmap+0x31a>
		return;
 8005498:	bf00      	nop
}
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80054a4:	f7fb ffda 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054a8:	480c      	ldr	r0, [pc, #48]	@ (80054dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80054aa:	490d      	ldr	r1, [pc, #52]	@ (80054e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80054ac:	4a0d      	ldr	r2, [pc, #52]	@ (80054e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80054ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054b0:	e002      	b.n	80054b8 <LoopCopyDataInit>

080054b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054b6:	3304      	adds	r3, #4

080054b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054bc:	d3f9      	bcc.n	80054b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054be:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80054c0:	4c0a      	ldr	r4, [pc, #40]	@ (80054ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80054c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054c4:	e001      	b.n	80054ca <LoopFillZerobss>

080054c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054c8:	3204      	adds	r2, #4

080054ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054cc:	d3fb      	bcc.n	80054c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80054ce:	f002 fd99 	bl	8008004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054d2:	f7fb f80f 	bl	80004f4 <main>
  bx  lr    
 80054d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80054e4:	080535ac 	.word	0x080535ac
  ldr r2, =_sbss
 80054e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80054ec:	20000340 	.word	0x20000340

080054f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054f0:	e7fe      	b.n	80054f0 <ADC_IRQHandler>
	...

080054f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <HAL_Init+0x40>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005534 <HAL_Init+0x40>)
 80054fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_Init+0x40>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <HAL_Init+0x40>)
 800550a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800550e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005510:	4b08      	ldr	r3, [pc, #32]	@ (8005534 <HAL_Init+0x40>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a07      	ldr	r2, [pc, #28]	@ (8005534 <HAL_Init+0x40>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800551c:	2003      	movs	r0, #3
 800551e:	f000 fd5f 	bl	8005fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005522:	2000      	movs	r0, #0
 8005524:	f000 f808 	bl	8005538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005528:	f7fb fe26 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00

08005538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005540:	4b12      	ldr	r3, [pc, #72]	@ (800558c <HAL_InitTick+0x54>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b12      	ldr	r3, [pc, #72]	@ (8005590 <HAL_InitTick+0x58>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	4619      	mov	r1, r3
 800554a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800554e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fd77 	bl	800604a <HAL_SYSTICK_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e00e      	b.n	8005584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b0f      	cmp	r3, #15
 800556a:	d80a      	bhi.n	8005582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800556c:	2200      	movs	r2, #0
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	f000 fd3f 	bl	8005ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005578:	4a06      	ldr	r2, [pc, #24]	@ (8005594 <HAL_InitTick+0x5c>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000008 	.word	0x20000008
 8005590:	20000014 	.word	0x20000014
 8005594:	20000010 	.word	0x20000010

08005598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_IncTick+0x20>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <HAL_IncTick+0x24>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	4a04      	ldr	r2, [pc, #16]	@ (80055bc <HAL_IncTick+0x24>)
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000014 	.word	0x20000014
 80055bc:	200001f4 	.word	0x200001f4

080055c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return uwTick;
 80055c4:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <HAL_GetTick+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	200001f4 	.word	0x200001f4

080055d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff ffee 	bl	80055c0 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d005      	beq.n	80055fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_Delay+0x44>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055fe:	bf00      	nop
 8005600:	f7ff ffde 	bl	80055c0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	429a      	cmp	r2, r3
 800560e:	d8f7      	bhi.n	8005600 <HAL_Delay+0x28>
  {
  }
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000014 	.word	0x20000014

08005620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e033      	b.n	800569e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fdc2 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005666:	f023 0302 	bic.w	r3, r3, #2
 800566a:	f043 0202 	orr.w	r2, r3, #2
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fae8 	bl	8005c48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40
 800568e:	e001      	b.n	8005694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_Start+0x1a>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0b2      	b.n	8005828 <HAL_ADC_Start+0x180>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d018      	beq.n	800570a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056e8:	4b52      	ldr	r3, [pc, #328]	@ (8005834 <HAL_ADC_Start+0x18c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a52      	ldr	r2, [pc, #328]	@ (8005838 <HAL_ADC_Start+0x190>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	0c9a      	lsrs	r2, r3, #18
 80056f4:	4613      	mov	r3, r2
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	4413      	add	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80056fc:	e002      	b.n	8005704 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3b01      	subs	r3, #1
 8005702:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f9      	bne.n	80056fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d17a      	bne.n	800580e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005742:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005756:	d106      	bne.n	8005766 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575c:	f023 0206 	bic.w	r2, r3, #6
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	645a      	str	r2, [r3, #68]	@ 0x44
 8005764:	e002      	b.n	800576c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005774:	4b31      	ldr	r3, [pc, #196]	@ (800583c <HAL_ADC_Start+0x194>)
 8005776:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005780:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2b00      	cmp	r3, #0
 800578c:	d12a      	bne.n	80057e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <HAL_ADC_Start+0x198>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d015      	beq.n	80057c4 <HAL_ADC_Start+0x11c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a29      	ldr	r2, [pc, #164]	@ (8005844 <HAL_ADC_Start+0x19c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d105      	bne.n	80057ae <HAL_ADC_Start+0x106>
 80057a2:	4b26      	ldr	r3, [pc, #152]	@ (800583c <HAL_ADC_Start+0x194>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <HAL_ADC_Start+0x1a0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d136      	bne.n	8005826 <HAL_ADC_Start+0x17e>
 80057b8:	4b20      	ldr	r3, [pc, #128]	@ (800583c <HAL_ADC_Start+0x194>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d130      	bne.n	8005826 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d129      	bne.n	8005826 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057e0:	609a      	str	r2, [r3, #8]
 80057e2:	e020      	b.n	8005826 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <HAL_ADC_Start+0x198>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d11b      	bne.n	8005826 <HAL_ADC_Start+0x17e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d114      	bne.n	8005826 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	e00b      	b.n	8005826 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f043 0210 	orr.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	20000008 	.word	0x20000008
 8005838:	431bde83 	.word	0x431bde83
 800583c:	40012300 	.word	0x40012300
 8005840:	40012000 	.word	0x40012000
 8005844:	40012100 	.word	0x40012100
 8005848:	40012200 	.word	0x40012200

0800584c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_ADC_Stop+0x16>
 800585e:	2302      	movs	r3, #2
 8005860:	e021      	b.n	80058a6 <HAL_ADC_Stop+0x5a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ce:	d113      	bne.n	80058f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058de:	d10b      	bne.n	80058f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e063      	b.n	80059c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f8:	f7ff fe62 	bl	80055c0 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058fe:	e021      	b.n	8005944 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d01d      	beq.n	8005944 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_ADC_PollForConversion+0x6c>
 800590e:	f7ff fe57 	bl	80055c0 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d212      	bcs.n	8005944 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b02      	cmp	r3, #2
 800592a:	d00b      	beq.n	8005944 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e03d      	b.n	80059c0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d1d6      	bne.n	8005900 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0212 	mvn.w	r2, #18
 800595a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d123      	bne.n	80059be <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11f      	bne.n	80059be <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005996:	2b00      	cmp	r3, #0
 8005998:	d111      	bne.n	80059be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d105      	bne.n	80059be <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	f043 0201 	orr.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_ConfigChannel+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e113      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x244>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d925      	bls.n	8005a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	3b1e      	subs	r3, #30
 8005a26:	2207      	movs	r2, #7
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43da      	mvns	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	400a      	ands	r2, r1
 8005a34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4618      	mov	r0, r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4403      	add	r3, r0
 8005a4e:	3b1e      	subs	r3, #30
 8005a50:	409a      	lsls	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	e022      	b.n	8005aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6919      	ldr	r1, [r3, #16]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	2207      	movs	r2, #7
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4618      	mov	r0, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4403      	add	r3, r0
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d824      	bhi.n	8005af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	3b05      	subs	r3, #5
 8005abc:	221f      	movs	r2, #31
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	400a      	ands	r2, r1
 8005aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4618      	mov	r0, r3
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3b05      	subs	r3, #5
 8005ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005af2:	e04c      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d824      	bhi.n	8005b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b23      	subs	r3, #35	@ 0x23
 8005b0e:	221f      	movs	r2, #31
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43da      	mvns	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	3b23      	subs	r3, #35	@ 0x23
 8005b38:	fa00 f203 	lsl.w	r2, r0, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b44:	e023      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	3b41      	subs	r3, #65	@ 0x41
 8005b58:	221f      	movs	r2, #31
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	400a      	ands	r2, r1
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4618      	mov	r0, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	3b41      	subs	r3, #65	@ 0x41
 8005b82:	fa00 f203 	lsl.w	r2, r0, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b8e:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <HAL_ADC_ConfigChannel+0x250>)
 8005b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a28      	ldr	r2, [pc, #160]	@ (8005c38 <HAL_ADC_ConfigChannel+0x254>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10f      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x1d8>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b12      	cmp	r3, #18
 8005ba2:	d10b      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <HAL_ADC_ConfigChannel+0x254>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d12b      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x23a>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <HAL_ADC_ConfigChannel+0x258>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <HAL_ADC_ConfigChannel+0x1f4>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b11      	cmp	r3, #17
 8005bd6:	d122      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a11      	ldr	r2, [pc, #68]	@ (8005c3c <HAL_ADC_ConfigChannel+0x258>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d111      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bfa:	4b11      	ldr	r3, [pc, #68]	@ (8005c40 <HAL_ADC_ConfigChannel+0x25c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a11      	ldr	r2, [pc, #68]	@ (8005c44 <HAL_ADC_ConfigChannel+0x260>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	0c9a      	lsrs	r2, r3, #18
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005c10:	e002      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f9      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012300 	.word	0x40012300
 8005c38:	40012000 	.word	0x40012000
 8005c3c:	10000012 	.word	0x10000012
 8005c40:	20000008 	.word	0x20000008
 8005c44:	431bde83 	.word	0x431bde83

08005c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c50:	4b79      	ldr	r3, [pc, #484]	@ (8005e38 <ADC_Init+0x1f0>)
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	021a      	lsls	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6859      	ldr	r1, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6899      	ldr	r1, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	4a58      	ldr	r2, [pc, #352]	@ (8005e3c <ADC_Init+0x1f4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	e00f      	b.n	8005d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005d44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0202 	bic.w	r2, r2, #2
 8005d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7e1b      	ldrb	r3, [r3, #24]
 8005d60:	005a      	lsls	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	035a      	lsls	r2, r3, #13
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	e007      	b.n	8005dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	051a      	lsls	r2, r3, #20
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dfe:	025a      	lsls	r2, r3, #9
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	029a      	lsls	r2, r3, #10
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40012300 	.word	0x40012300
 8005e3c:	0f000001 	.word	0x0f000001

08005e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e50:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e72:	4a04      	ldr	r2, [pc, #16]	@ (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	60d3      	str	r3, [r2, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000ed00 	.word	0xe000ed00

08005e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 0307 	and.w	r3, r3, #7
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	db0b      	blt.n	8005ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	4907      	ldr	r1, [pc, #28]	@ (8005edc <__NVIC_EnableIRQ+0x38>)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db0a      	blt.n	8005f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	490c      	ldr	r1, [pc, #48]	@ (8005f2c <__NVIC_SetPriority+0x4c>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f08:	e00a      	b.n	8005f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4908      	ldr	r1, [pc, #32]	@ (8005f30 <__NVIC_SetPriority+0x50>)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	3b04      	subs	r3, #4
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	761a      	strb	r2, [r3, #24]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b089      	sub	sp, #36	@ 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f1c3 0307 	rsb	r3, r3, #7
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	bf28      	it	cs
 8005f52:	2304      	movcs	r3, #4
 8005f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d902      	bls.n	8005f64 <NVIC_EncodePriority+0x30>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3b03      	subs	r3, #3
 8005f62:	e000      	b.n	8005f66 <NVIC_EncodePriority+0x32>
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	401a      	ands	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	43d9      	mvns	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f8c:	4313      	orrs	r3, r2
         );
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	@ 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fac:	d301      	bcc.n	8005fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e00f      	b.n	8005fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005fdc <SysTick_Config+0x40>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fba:	210f      	movs	r1, #15
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	f7ff ff8e 	bl	8005ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fc4:	4b05      	ldr	r3, [pc, #20]	@ (8005fdc <SysTick_Config+0x40>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fca:	4b04      	ldr	r3, [pc, #16]	@ (8005fdc <SysTick_Config+0x40>)
 8005fcc:	2207      	movs	r2, #7
 8005fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	e000e010 	.word	0xe000e010

08005fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ff29 	bl	8005e40 <__NVIC_SetPriorityGrouping>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006008:	f7ff ff3e 	bl	8005e88 <__NVIC_GetPriorityGrouping>
 800600c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	6978      	ldr	r0, [r7, #20]
 8006014:	f7ff ff8e 	bl	8005f34 <NVIC_EncodePriority>
 8006018:	4602      	mov	r2, r0
 800601a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ff5d 	bl	8005ee0 <__NVIC_SetPriority>
}
 8006026:	bf00      	nop
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	4603      	mov	r3, r0
 8006036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff ff31 	bl	8005ea4 <__NVIC_EnableIRQ>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ffa2 	bl	8005f9c <SysTick_Config>
 8006058:	4603      	mov	r3, r0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	@ 0x24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e165      	b.n	800634c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006080:	2201      	movs	r2, #1
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	429a      	cmp	r2, r3
 800609a:	f040 8154 	bne.w	8006346 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d005      	beq.n	80060b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d130      	bne.n	8006118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	2203      	movs	r2, #3
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060ec:	2201      	movs	r2, #1
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 0201 	and.w	r2, r3, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b03      	cmp	r3, #3
 8006122:	d017      	beq.n	8006154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	2203      	movs	r2, #3
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d123      	bne.n	80061a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	08da      	lsrs	r2, r3, #3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3208      	adds	r2, #8
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	220f      	movs	r2, #15
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4013      	ands	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	08da      	lsrs	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3208      	adds	r2, #8
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	2203      	movs	r2, #3
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4013      	ands	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0203 	and.w	r2, r3, #3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80ae 	beq.w	8006346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80061f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006364 <HAL_GPIO_Init+0x300>)
 80061fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006206:	4a58      	ldr	r2, [pc, #352]	@ (8006368 <HAL_GPIO_Init+0x304>)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	3302      	adds	r3, #2
 800620e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	220f      	movs	r2, #15
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43db      	mvns	r3, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4013      	ands	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a4f      	ldr	r2, [pc, #316]	@ (800636c <HAL_GPIO_Init+0x308>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d025      	beq.n	800627e <HAL_GPIO_Init+0x21a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a4e      	ldr	r2, [pc, #312]	@ (8006370 <HAL_GPIO_Init+0x30c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <HAL_GPIO_Init+0x216>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a4d      	ldr	r2, [pc, #308]	@ (8006374 <HAL_GPIO_Init+0x310>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d019      	beq.n	8006276 <HAL_GPIO_Init+0x212>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a4c      	ldr	r2, [pc, #304]	@ (8006378 <HAL_GPIO_Init+0x314>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <HAL_GPIO_Init+0x20e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a4b      	ldr	r2, [pc, #300]	@ (800637c <HAL_GPIO_Init+0x318>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00d      	beq.n	800626e <HAL_GPIO_Init+0x20a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a4a      	ldr	r2, [pc, #296]	@ (8006380 <HAL_GPIO_Init+0x31c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <HAL_GPIO_Init+0x206>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a49      	ldr	r2, [pc, #292]	@ (8006384 <HAL_GPIO_Init+0x320>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_GPIO_Init+0x202>
 8006262:	2306      	movs	r3, #6
 8006264:	e00c      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 8006266:	2307      	movs	r3, #7
 8006268:	e00a      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 800626a:	2305      	movs	r3, #5
 800626c:	e008      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 800626e:	2304      	movs	r3, #4
 8006270:	e006      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 8006272:	2303      	movs	r3, #3
 8006274:	e004      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 8006276:	2302      	movs	r3, #2
 8006278:	e002      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_GPIO_Init+0x21c>
 800627e:	2300      	movs	r3, #0
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	f002 0203 	and.w	r2, r2, #3
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	4093      	lsls	r3, r2
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006290:	4935      	ldr	r1, [pc, #212]	@ (8006368 <HAL_GPIO_Init+0x304>)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	3302      	adds	r3, #2
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800629e:	4b3a      	ldr	r3, [pc, #232]	@ (8006388 <HAL_GPIO_Init+0x324>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	43db      	mvns	r3, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	4013      	ands	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062c2:	4a31      	ldr	r2, [pc, #196]	@ (8006388 <HAL_GPIO_Init+0x324>)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006388 <HAL_GPIO_Init+0x324>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062ec:	4a26      	ldr	r2, [pc, #152]	@ (8006388 <HAL_GPIO_Init+0x324>)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062f2:	4b25      	ldr	r3, [pc, #148]	@ (8006388 <HAL_GPIO_Init+0x324>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006316:	4a1c      	ldr	r2, [pc, #112]	@ (8006388 <HAL_GPIO_Init+0x324>)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800631c:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <HAL_GPIO_Init+0x324>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	43db      	mvns	r3, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4013      	ands	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006340:	4a11      	ldr	r2, [pc, #68]	@ (8006388 <HAL_GPIO_Init+0x324>)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	f67f ae96 	bls.w	8006080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	3724      	adds	r7, #36	@ 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
 8006368:	40013800 	.word	0x40013800
 800636c:	40020000 	.word	0x40020000
 8006370:	40020400 	.word	0x40020400
 8006374:	40020800 	.word	0x40020800
 8006378:	40020c00 	.word	0x40020c00
 800637c:	40021000 	.word	0x40021000
 8006380:	40021400 	.word	0x40021400
 8006384:	40021800 	.word	0x40021800
 8006388:	40013c00 	.word	0x40013c00

0800638c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
 8006398:	4613      	mov	r3, r2
 800639a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800639c:	787b      	ldrb	r3, [r7, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063a8:	e003      	b.n	80063b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063aa:	887b      	ldrh	r3, [r7, #2]
 80063ac:	041a      	lsls	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	619a      	str	r2, [r3, #24]
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063ca:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d006      	beq.n	80063e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063d6:	4a05      	ldr	r2, [pc, #20]	@ (80063ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa fe56 	bl	8001090 <HAL_GPIO_EXTI_Callback>
  }
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40013c00 	.word	0x40013c00

080063f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0cc      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006404:	4b68      	ldr	r3, [pc, #416]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d90c      	bls.n	800642c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b65      	ldr	r3, [pc, #404]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b63      	ldr	r3, [pc, #396]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0b8      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d020      	beq.n	800647a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006444:	4b59      	ldr	r3, [pc, #356]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a58      	ldr	r2, [pc, #352]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800644e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800645c:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4a52      	ldr	r2, [pc, #328]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006468:	4b50      	ldr	r3, [pc, #320]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	494d      	ldr	r1, [pc, #308]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d044      	beq.n	8006510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b47      	ldr	r3, [pc, #284]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d119      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e07f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b3f      	ldr	r3, [pc, #252]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064be:	4b3b      	ldr	r3, [pc, #236]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e067      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ce:	4b37      	ldr	r3, [pc, #220]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0203 	bic.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4934      	ldr	r1, [pc, #208]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e0:	f7ff f86e 	bl	80055c0 <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e8:	f7ff f86a 	bl	80055c0 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e04f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fe:	4b2b      	ldr	r3, [pc, #172]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 020c 	and.w	r2, r3, #12
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	429a      	cmp	r2, r3
 800650e:	d1eb      	bne.n	80064e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006510:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20c      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b22      	ldr	r3, [pc, #136]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e032      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006544:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4916      	ldr	r1, [pc, #88]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	490e      	ldr	r1, [pc, #56]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	4313      	orrs	r3, r2
 8006574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006576:	f000 f855 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 800657a:	4602      	mov	r2, r0
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	490a      	ldr	r1, [pc, #40]	@ (80065b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	5ccb      	ldrb	r3, [r1, r3]
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006592:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe ffce 	bl	8005538 <HAL_InitTick>

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40023c00 	.word	0x40023c00
 80065ac:	40023800 	.word	0x40023800
 80065b0:	08053080 	.word	0x08053080
 80065b4:	20000008 	.word	0x20000008
 80065b8:	20000010 	.word	0x20000010

080065bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b03      	ldr	r3, [pc, #12]	@ (80065d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000008 	.word	0x20000008

080065d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065d8:	f7ff fff0 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065dc:	4602      	mov	r2, r0
 80065de:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0a9b      	lsrs	r3, r3, #10
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4903      	ldr	r1, [pc, #12]	@ (80065f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ea:	5ccb      	ldrb	r3, [r1, r3]
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40023800 	.word	0x40023800
 80065f8:	08053090 	.word	0x08053090

080065fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006600:	f7ff ffdc 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0b5b      	lsrs	r3, r3, #13
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4903      	ldr	r1, [pc, #12]	@ (8006620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	08053090 	.word	0x08053090

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006628:	b0ae      	sub	sp, #184	@ 0xb8
 800662a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664a:	4bcb      	ldr	r3, [pc, #812]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b0c      	cmp	r3, #12
 8006654:	f200 8206 	bhi.w	8006a64 <HAL_RCC_GetSysClockFreq+0x440>
 8006658:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <HAL_RCC_GetSysClockFreq+0x3c>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006695 	.word	0x08006695
 8006664:	08006a65 	.word	0x08006a65
 8006668:	08006a65 	.word	0x08006a65
 800666c:	08006a65 	.word	0x08006a65
 8006670:	0800669d 	.word	0x0800669d
 8006674:	08006a65 	.word	0x08006a65
 8006678:	08006a65 	.word	0x08006a65
 800667c:	08006a65 	.word	0x08006a65
 8006680:	080066a5 	.word	0x080066a5
 8006684:	08006a65 	.word	0x08006a65
 8006688:	08006a65 	.word	0x08006a65
 800668c:	08006a65 	.word	0x08006a65
 8006690:	08006895 	.word	0x08006895
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006694:	4bb9      	ldr	r3, [pc, #740]	@ (800697c <HAL_RCC_GetSysClockFreq+0x358>)
 8006696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800669a:	e1e7      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800669c:	4bb8      	ldr	r3, [pc, #736]	@ (8006980 <HAL_RCC_GetSysClockFreq+0x35c>)
 800669e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80066a2:	e1e3      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a4:	4bb4      	ldr	r3, [pc, #720]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066b0:	4bb1      	ldr	r3, [pc, #708]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d071      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066bc:	4bae      	ldr	r3, [pc, #696]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	099b      	lsrs	r3, r3, #6
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80066cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f04f 0000 	mov.w	r0, #0
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	0159      	lsls	r1, r3, #5
 80066f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066f4:	0150      	lsls	r0, r2, #5
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4621      	mov	r1, r4
 80066fc:	1a51      	subs	r1, r2, r1
 80066fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8006700:	4629      	mov	r1, r5
 8006702:	eb63 0301 	sbc.w	r3, r3, r1
 8006706:	647b      	str	r3, [r7, #68]	@ 0x44
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006714:	4649      	mov	r1, r9
 8006716:	018b      	lsls	r3, r1, #6
 8006718:	4641      	mov	r1, r8
 800671a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800671e:	4641      	mov	r1, r8
 8006720:	018a      	lsls	r2, r1, #6
 8006722:	4641      	mov	r1, r8
 8006724:	1a51      	subs	r1, r2, r1
 8006726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006728:	4649      	mov	r1, r9
 800672a:	eb63 0301 	sbc.w	r3, r3, r1
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800673c:	4649      	mov	r1, r9
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4641      	mov	r1, r8
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4622      	mov	r2, r4
 8006752:	189b      	adds	r3, r3, r2
 8006754:	633b      	str	r3, [r7, #48]	@ 0x30
 8006756:	462b      	mov	r3, r5
 8006758:	460a      	mov	r2, r1
 800675a:	eb42 0303 	adc.w	r3, r2, r3
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800676c:	4629      	mov	r1, r5
 800676e:	024b      	lsls	r3, r1, #9
 8006770:	4621      	mov	r1, r4
 8006772:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006776:	4621      	mov	r1, r4
 8006778:	024a      	lsls	r2, r1, #9
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800678c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006790:	f7f9 fd38 	bl	8000204 <__aeabi_uldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4613      	mov	r3, r2
 800679a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800679e:	e067      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a0:	4b75      	ldr	r3, [pc, #468]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	099b      	lsrs	r3, r3, #6
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80067b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067ba:	2300      	movs	r3, #0
 80067bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80067c2:	4622      	mov	r2, r4
 80067c4:	462b      	mov	r3, r5
 80067c6:	f04f 0000 	mov.w	r0, #0
 80067ca:	f04f 0100 	mov.w	r1, #0
 80067ce:	0159      	lsls	r1, r3, #5
 80067d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d4:	0150      	lsls	r0, r2, #5
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4621      	mov	r1, r4
 80067dc:	1a51      	subs	r1, r2, r1
 80067de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80067e0:	4629      	mov	r1, r5
 80067e2:	eb63 0301 	sbc.w	r3, r3, r1
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80067f4:	4649      	mov	r1, r9
 80067f6:	018b      	lsls	r3, r1, #6
 80067f8:	4641      	mov	r1, r8
 80067fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067fe:	4641      	mov	r1, r8
 8006800:	018a      	lsls	r2, r1, #6
 8006802:	4641      	mov	r1, r8
 8006804:	ebb2 0a01 	subs.w	sl, r2, r1
 8006808:	4649      	mov	r1, r9
 800680a:	eb63 0b01 	sbc.w	fp, r3, r1
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800681a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800681e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006822:	4692      	mov	sl, r2
 8006824:	469b      	mov	fp, r3
 8006826:	4623      	mov	r3, r4
 8006828:	eb1a 0303 	adds.w	r3, sl, r3
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	462b      	mov	r3, r5
 8006830:	eb4b 0303 	adc.w	r3, fp, r3
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006842:	4629      	mov	r1, r5
 8006844:	028b      	lsls	r3, r1, #10
 8006846:	4621      	mov	r1, r4
 8006848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800684c:	4621      	mov	r1, r4
 800684e:	028a      	lsls	r2, r1, #10
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006858:	2200      	movs	r2, #0
 800685a:	673b      	str	r3, [r7, #112]	@ 0x70
 800685c:	677a      	str	r2, [r7, #116]	@ 0x74
 800685e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006862:	f7f9 fccf 	bl	8000204 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4613      	mov	r3, r2
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006870:	4b41      	ldr	r3, [pc, #260]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	3301      	adds	r3, #1
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006892:	e0eb      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006894:	4b38      	ldr	r3, [pc, #224]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800689c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068a0:	4b35      	ldr	r3, [pc, #212]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d06b      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ac:	4b32      	ldr	r3, [pc, #200]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x354>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	099b      	lsrs	r3, r3, #6
 80068b2:	2200      	movs	r2, #0
 80068b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	663b      	str	r3, [r7, #96]	@ 0x60
 80068c0:	2300      	movs	r3, #0
 80068c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80068c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80068c8:	4622      	mov	r2, r4
 80068ca:	462b      	mov	r3, r5
 80068cc:	f04f 0000 	mov.w	r0, #0
 80068d0:	f04f 0100 	mov.w	r1, #0
 80068d4:	0159      	lsls	r1, r3, #5
 80068d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068da:	0150      	lsls	r0, r2, #5
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4621      	mov	r1, r4
 80068e2:	1a51      	subs	r1, r2, r1
 80068e4:	61b9      	str	r1, [r7, #24]
 80068e6:	4629      	mov	r1, r5
 80068e8:	eb63 0301 	sbc.w	r3, r3, r1
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80068fa:	4659      	mov	r1, fp
 80068fc:	018b      	lsls	r3, r1, #6
 80068fe:	4651      	mov	r1, sl
 8006900:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006904:	4651      	mov	r1, sl
 8006906:	018a      	lsls	r2, r1, #6
 8006908:	4651      	mov	r1, sl
 800690a:	ebb2 0801 	subs.w	r8, r2, r1
 800690e:	4659      	mov	r1, fp
 8006910:	eb63 0901 	sbc.w	r9, r3, r1
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006928:	4690      	mov	r8, r2
 800692a:	4699      	mov	r9, r3
 800692c:	4623      	mov	r3, r4
 800692e:	eb18 0303 	adds.w	r3, r8, r3
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	462b      	mov	r3, r5
 8006936:	eb49 0303 	adc.w	r3, r9, r3
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006948:	4629      	mov	r1, r5
 800694a:	024b      	lsls	r3, r1, #9
 800694c:	4621      	mov	r1, r4
 800694e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006952:	4621      	mov	r1, r4
 8006954:	024a      	lsls	r2, r1, #9
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800695e:	2200      	movs	r2, #0
 8006960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006962:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006964:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006968:	f7f9 fc4c 	bl	8000204 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006976:	e065      	b.n	8006a44 <HAL_RCC_GetSysClockFreq+0x420>
 8006978:	40023800 	.word	0x40023800
 800697c:	00f42400 	.word	0x00f42400
 8006980:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006984:	4b3d      	ldr	r3, [pc, #244]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	099b      	lsrs	r3, r3, #6
 800698a:	2200      	movs	r2, #0
 800698c:	4618      	mov	r0, r3
 800698e:	4611      	mov	r1, r2
 8006990:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006994:	653b      	str	r3, [r7, #80]	@ 0x50
 8006996:	2300      	movs	r3, #0
 8006998:	657b      	str	r3, [r7, #84]	@ 0x54
 800699a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f04f 0100 	mov.w	r1, #0
 80069aa:	0159      	lsls	r1, r3, #5
 80069ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069b0:	0150      	lsls	r0, r2, #5
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4641      	mov	r1, r8
 80069b8:	1a51      	subs	r1, r2, r1
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	4649      	mov	r1, r9
 80069be:	eb63 0301 	sbc.w	r3, r3, r1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80069d0:	4659      	mov	r1, fp
 80069d2:	018b      	lsls	r3, r1, #6
 80069d4:	4651      	mov	r1, sl
 80069d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069da:	4651      	mov	r1, sl
 80069dc:	018a      	lsls	r2, r1, #6
 80069de:	4651      	mov	r1, sl
 80069e0:	1a54      	subs	r4, r2, r1
 80069e2:	4659      	mov	r1, fp
 80069e4:	eb63 0501 	sbc.w	r5, r3, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	00eb      	lsls	r3, r5, #3
 80069f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069f6:	00e2      	lsls	r2, r4, #3
 80069f8:	4614      	mov	r4, r2
 80069fa:	461d      	mov	r5, r3
 80069fc:	4643      	mov	r3, r8
 80069fe:	18e3      	adds	r3, r4, r3
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	464b      	mov	r3, r9
 8006a04:	eb45 0303 	adc.w	r3, r5, r3
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a16:	4629      	mov	r1, r5
 8006a18:	028b      	lsls	r3, r1, #10
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a20:	4621      	mov	r1, r4
 8006a22:	028a      	lsls	r2, r1, #10
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006a32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a36:	f7f9 fbe5 	bl	8000204 <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4613      	mov	r3, r2
 8006a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a44:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	0f1b      	lsrs	r3, r3, #28
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a62:	e003      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a64:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	37b8      	adds	r7, #184	@ 0xb8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	00f42400 	.word	0x00f42400

08006a84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e28d      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8083 	beq.w	8006baa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006aa4:	4b94      	ldr	r3, [pc, #592]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d019      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ab0:	4b91      	ldr	r3, [pc, #580]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
        || \
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d106      	bne.n	8006aca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006abc:	4b8e      	ldr	r3, [pc, #568]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aca:	4b8b      	ldr	r3, [pc, #556]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ad2:	2b0c      	cmp	r3, #12
 8006ad4:	d112      	bne.n	8006afc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad6:	4b88      	ldr	r3, [pc, #544]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae4:	4b84      	ldr	r3, [pc, #528]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d05b      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x124>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d157      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e25a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b04:	d106      	bne.n	8006b14 <HAL_RCC_OscConfig+0x90>
 8006b06:	4b7c      	ldr	r3, [pc, #496]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e01d      	b.n	8006b50 <HAL_RCC_OscConfig+0xcc>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0xb4>
 8006b1e:	4b76      	ldr	r3, [pc, #472]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a75      	ldr	r2, [pc, #468]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b73      	ldr	r3, [pc, #460]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a72      	ldr	r2, [pc, #456]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e00b      	b.n	8006b50 <HAL_RCC_OscConfig+0xcc>
 8006b38:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	4b6c      	ldr	r3, [pc, #432]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6b      	ldr	r2, [pc, #428]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fe fd32 	bl	80055c0 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b60:	f7fe fd2e 	bl	80055c0 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	@ 0x64
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e21f      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b72:	4b61      	ldr	r3, [pc, #388]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0xdc>
 8006b7e:	e014      	b.n	8006baa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b80:	f7fe fd1e 	bl	80055c0 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fe fd1a 	bl	80055c0 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	@ 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e20b      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b9a:	4b57      	ldr	r3, [pc, #348]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f0      	bne.n	8006b88 <HAL_RCC_OscConfig+0x104>
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d06f      	beq.n	8006c96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bb6:	4b50      	ldr	r3, [pc, #320]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d017      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
        || \
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d105      	bne.n	8006bda <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006bce:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bda:	4b47      	ldr	r3, [pc, #284]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d11c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006be6:	4b44      	ldr	r3, [pc, #272]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf2:	4b41      	ldr	r3, [pc, #260]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_RCC_OscConfig+0x186>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e1d3      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4937      	ldr	r1, [pc, #220]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	e03a      	b.n	8006c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d020      	beq.n	8006c6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c28:	4b34      	ldr	r3, [pc, #208]	@ (8006cfc <HAL_RCC_OscConfig+0x278>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2e:	f7fe fcc7 	bl	80055c0 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c36:	f7fe fcc3 	bl	80055c0 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e1b4      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c48:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c54:	4b28      	ldr	r3, [pc, #160]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4925      	ldr	r1, [pc, #148]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]
 8006c68:	e015      	b.n	8006c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <HAL_RCC_OscConfig+0x278>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fe fca6 	bl	80055c0 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c78:	f7fe fca2 	bl	80055c0 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e193      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d036      	beq.n	8006d10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006caa:	4b15      	ldr	r3, [pc, #84]	@ (8006d00 <HAL_RCC_OscConfig+0x27c>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fe fc86 	bl	80055c0 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cb8:	f7fe fc82 	bl	80055c0 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e173      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cca:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <HAL_RCC_OscConfig+0x274>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x234>
 8006cd6:	e01b      	b.n	8006d10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cd8:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <HAL_RCC_OscConfig+0x27c>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cde:	f7fe fc6f 	bl	80055c0 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce4:	e00e      	b.n	8006d04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce6:	f7fe fc6b 	bl	80055c0 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d907      	bls.n	8006d04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e15c      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	42470000 	.word	0x42470000
 8006d00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d04:	4b8a      	ldr	r3, [pc, #552]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1ea      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8097 	beq.w	8006e4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d22:	4b83      	ldr	r3, [pc, #524]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	4b7f      	ldr	r3, [pc, #508]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	4a7e      	ldr	r2, [pc, #504]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4e:	4b79      	ldr	r3, [pc, #484]	@ (8006f34 <HAL_RCC_OscConfig+0x4b0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d118      	bne.n	8006d8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d5a:	4b76      	ldr	r3, [pc, #472]	@ (8006f34 <HAL_RCC_OscConfig+0x4b0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a75      	ldr	r2, [pc, #468]	@ (8006f34 <HAL_RCC_OscConfig+0x4b0>)
 8006d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d66:	f7fe fc2b 	bl	80055c0 <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d6e:	f7fe fc27 	bl	80055c0 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e118      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d80:	4b6c      	ldr	r3, [pc, #432]	@ (8006f34 <HAL_RCC_OscConfig+0x4b0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d106      	bne.n	8006da2 <HAL_RCC_OscConfig+0x31e>
 8006d94:	4b66      	ldr	r3, [pc, #408]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d98:	4a65      	ldr	r2, [pc, #404]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da0:	e01c      	b.n	8006ddc <HAL_RCC_OscConfig+0x358>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x340>
 8006daa:	4b61      	ldr	r3, [pc, #388]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dae:	4a60      	ldr	r2, [pc, #384]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006db0:	f043 0304 	orr.w	r3, r3, #4
 8006db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db6:	4b5e      	ldr	r3, [pc, #376]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dba:	4a5d      	ldr	r2, [pc, #372]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc2:	e00b      	b.n	8006ddc <HAL_RCC_OscConfig+0x358>
 8006dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc8:	4a59      	ldr	r2, [pc, #356]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd0:	4b57      	ldr	r3, [pc, #348]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	4a56      	ldr	r2, [pc, #344]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006dd6:	f023 0304 	bic.w	r3, r3, #4
 8006dda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fe fbec 	bl	80055c0 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dec:	f7fe fbe8 	bl	80055c0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e0d7      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e02:	4b4b      	ldr	r3, [pc, #300]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0ee      	beq.n	8006dec <HAL_RCC_OscConfig+0x368>
 8006e0e:	e014      	b.n	8006e3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e10:	f7fe fbd6 	bl	80055c0 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fe fbd2 	bl	80055c0 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e0c1      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e2e:	4b40      	ldr	r3, [pc, #256]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ee      	bne.n	8006e18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e40:	4b3b      	ldr	r3, [pc, #236]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	4a3a      	ldr	r2, [pc, #232]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80ad 	beq.w	8006fb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e56:	4b36      	ldr	r3, [pc, #216]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d060      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d145      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6a:	4b33      	ldr	r3, [pc, #204]	@ (8006f38 <HAL_RCC_OscConfig+0x4b4>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fe fba6 	bl	80055c0 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fe fba2 	bl	80055c0 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e093      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8a:	4b29      	ldr	r3, [pc, #164]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69da      	ldr	r2, [r3, #28]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	019b      	lsls	r3, r3, #6
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	061b      	lsls	r3, r3, #24
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	071b      	lsls	r3, r3, #28
 8006ec2:	491b      	ldr	r1, [pc, #108]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f38 <HAL_RCC_OscConfig+0x4b4>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ece:	f7fe fb77 	bl	80055c0 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed6:	f7fe fb73 	bl	80055c0 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e064      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee8:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0f0      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x452>
 8006ef4:	e05c      	b.n	8006fb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <HAL_RCC_OscConfig+0x4b4>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fe fb60 	bl	80055c0 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fe fb5c 	bl	80055c0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e04d      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <HAL_RCC_OscConfig+0x4ac>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x480>
 8006f22:	e045      	b.n	8006fb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e040      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40007000 	.word	0x40007000
 8006f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fbc <HAL_RCC_OscConfig+0x538>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d030      	beq.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d129      	bne.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d122      	bne.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d119      	bne.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	3b01      	subs	r3, #1
 8006f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d10f      	bne.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d107      	bne.n	8006fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800

08006fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e041      	b.n	8007056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa f962 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 f95e 	bl	80072c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e046      	b.n	8007106 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a23      	ldr	r2, [pc, #140]	@ (8007114 <HAL_TIM_Base_Start+0xb4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007092:	d01d      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1f      	ldr	r2, [pc, #124]	@ (8007118 <HAL_TIM_Base_Start+0xb8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1e      	ldr	r2, [pc, #120]	@ (800711c <HAL_TIM_Base_Start+0xbc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007120 <HAL_TIM_Base_Start+0xc0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007124 <HAL_TIM_Base_Start+0xc4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a19      	ldr	r2, [pc, #100]	@ (8007128 <HAL_TIM_Base_Start+0xc8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_TIM_Base_Start+0x70>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a18      	ldr	r2, [pc, #96]	@ (800712c <HAL_TIM_Base_Start+0xcc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d111      	bne.n	80070f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d010      	beq.n	8007104 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	e007      	b.n	8007104 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010000 	.word	0x40010000
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40010400 	.word	0x40010400
 8007128:	40014000 	.word	0x40014000
 800712c:	40001800 	.word	0x40001800

08007130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIM_ConfigClockSource+0x1c>
 8007148:	2302      	movs	r3, #2
 800714a:	e0b4      	b.n	80072b6 <HAL_TIM_ConfigClockSource+0x186>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800716a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007184:	d03e      	beq.n	8007204 <HAL_TIM_ConfigClockSource+0xd4>
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800718a:	f200 8087 	bhi.w	800729c <HAL_TIM_ConfigClockSource+0x16c>
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007192:	f000 8086 	beq.w	80072a2 <HAL_TIM_ConfigClockSource+0x172>
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719a:	d87f      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b70      	cmp	r3, #112	@ 0x70
 800719e:	d01a      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0xa6>
 80071a0:	2b70      	cmp	r3, #112	@ 0x70
 80071a2:	d87b      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b60      	cmp	r3, #96	@ 0x60
 80071a6:	d050      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x11a>
 80071a8:	2b60      	cmp	r3, #96	@ 0x60
 80071aa:	d877      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b50      	cmp	r3, #80	@ 0x50
 80071ae:	d03c      	beq.n	800722a <HAL_TIM_ConfigClockSource+0xfa>
 80071b0:	2b50      	cmp	r3, #80	@ 0x50
 80071b2:	d873      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b40      	cmp	r3, #64	@ 0x40
 80071b6:	d058      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x13a>
 80071b8:	2b40      	cmp	r3, #64	@ 0x40
 80071ba:	d86f      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b30      	cmp	r3, #48	@ 0x30
 80071be:	d064      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15a>
 80071c0:	2b30      	cmp	r3, #48	@ 0x30
 80071c2:	d86b      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d060      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15a>
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d867      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d05c      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15a>
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d05a      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15a>
 80071d4:	e062      	b.n	800729c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e6:	f000 f991 	bl	800750c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	609a      	str	r2, [r3, #8]
      break;
 8007202:	e04f      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007214:	f000 f97a 	bl	800750c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007226:	609a      	str	r2, [r3, #8]
      break;
 8007228:	e03c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	461a      	mov	r2, r3
 8007238:	f000 f8ee 	bl	8007418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2150      	movs	r1, #80	@ 0x50
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f947 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8007248:	e02c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007256:	461a      	mov	r2, r3
 8007258:	f000 f90d 	bl	8007476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2160      	movs	r1, #96	@ 0x60
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f937 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8007268:	e01c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007276:	461a      	mov	r2, r3
 8007278:	f000 f8ce 	bl	8007418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2140      	movs	r1, #64	@ 0x40
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f927 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8007288:	e00c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f000 f91e 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 800729a:	e003      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	73fb      	strb	r3, [r7, #15]
      break;
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a46      	ldr	r2, [pc, #280]	@ (80073ec <TIM_Base_SetConfig+0x12c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072de:	d00f      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a43      	ldr	r2, [pc, #268]	@ (80073f0 <TIM_Base_SetConfig+0x130>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00b      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a42      	ldr	r2, [pc, #264]	@ (80073f4 <TIM_Base_SetConfig+0x134>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d007      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a41      	ldr	r2, [pc, #260]	@ (80073f8 <TIM_Base_SetConfig+0x138>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a40      	ldr	r2, [pc, #256]	@ (80073fc <TIM_Base_SetConfig+0x13c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d108      	bne.n	8007312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a35      	ldr	r2, [pc, #212]	@ (80073ec <TIM_Base_SetConfig+0x12c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d02b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007320:	d027      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a32      	ldr	r2, [pc, #200]	@ (80073f0 <TIM_Base_SetConfig+0x130>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d023      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a31      	ldr	r2, [pc, #196]	@ (80073f4 <TIM_Base_SetConfig+0x134>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01f      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a30      	ldr	r2, [pc, #192]	@ (80073f8 <TIM_Base_SetConfig+0x138>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2f      	ldr	r2, [pc, #188]	@ (80073fc <TIM_Base_SetConfig+0x13c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d017      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2e      	ldr	r2, [pc, #184]	@ (8007400 <TIM_Base_SetConfig+0x140>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2d      	ldr	r2, [pc, #180]	@ (8007404 <TIM_Base_SetConfig+0x144>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2c      	ldr	r2, [pc, #176]	@ (8007408 <TIM_Base_SetConfig+0x148>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2b      	ldr	r2, [pc, #172]	@ (800740c <TIM_Base_SetConfig+0x14c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d007      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2a      	ldr	r2, [pc, #168]	@ (8007410 <TIM_Base_SetConfig+0x150>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a29      	ldr	r2, [pc, #164]	@ (8007414 <TIM_Base_SetConfig+0x154>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a10      	ldr	r2, [pc, #64]	@ (80073ec <TIM_Base_SetConfig+0x12c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0xf8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a12      	ldr	r2, [pc, #72]	@ (80073fc <TIM_Base_SetConfig+0x13c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d103      	bne.n	80073c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d105      	bne.n	80073de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]
  }
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40010400 	.word	0x40010400
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	40001800 	.word	0x40001800
 8007410:	40001c00 	.word	0x40001c00
 8007414:	40002000 	.word	0x40002000

08007418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 030a 	bic.w	r3, r3, #10
 8007454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007476:	b480      	push	{r7}
 8007478:	b087      	sub	sp, #28
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f023 0210 	bic.w	r2, r3, #16
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	031b      	lsls	r3, r3, #12
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f043 0307 	orr.w	r3, r3, #7
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	609a      	str	r2, [r3, #8]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	431a      	orrs	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007560:	2302      	movs	r3, #2
 8007562:	e05a      	b.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a21      	ldr	r2, [pc, #132]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d022      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d01d      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d018      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00e      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d009      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a17      	ldr	r2, [pc, #92]	@ (800763c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10c      	bne.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40010000 	.word	0x40010000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40010400 	.word	0x40010400
 800763c:	40014000 	.word	0x40014000
 8007640:	40001800 	.word	0x40001800

08007644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e042      	b.n	80076dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7f9 fe42 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2224      	movs	r2, #36	@ 0x24
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f973 	bl	8007974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800769c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695a      	ldr	r2, [r3, #20]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	@ 0x28
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b20      	cmp	r3, #32
 8007702:	d175      	bne.n	80077f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_UART_Transmit+0x2c>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e06e      	b.n	80077f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2221      	movs	r2, #33	@ 0x21
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007722:	f7fd ff4d 	bl	80055c0 <HAL_GetTick>
 8007726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800773c:	d108      	bne.n	8007750 <HAL_UART_Transmit+0x6c>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e003      	b.n	8007758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007758:	e02e      	b.n	80077b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2200      	movs	r2, #0
 8007762:	2180      	movs	r1, #128	@ 0x80
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f848 	bl	80077fa <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e03a      	b.n	80077f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	3302      	adds	r3, #2
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e007      	b.n	80077aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1cb      	bne.n	800775a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	2140      	movs	r1, #64	@ 0x40
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f814 	bl	80077fa <UART_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e000      	b.n	80077f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077f0:	2302      	movs	r3, #2
  }
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	e03b      	b.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d037      	beq.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007814:	f7fd fed4 	bl	80055c0 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	6a3a      	ldr	r2, [r7, #32]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <UART_WaitOnFlagUntilTimeout+0x30>
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e03a      	b.n	80078a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b80      	cmp	r3, #128	@ 0x80
 8007840:	d020      	beq.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b40      	cmp	r3, #64	@ 0x40
 8007846:	d01d      	beq.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b08      	cmp	r3, #8
 8007854:	d116      	bne.n	8007884 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f81d 	bl	80078ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2208      	movs	r2, #8
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e00f      	b.n	80078a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d0b4      	beq.n	800780c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b095      	sub	sp, #84	@ 0x54
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3314      	adds	r3, #20
 80078ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f023 0301 	bic.w	r3, r3, #1
 80078fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3314      	adds	r3, #20
 8007906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800790a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800790e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e5      	bne.n	80078e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	d119      	bne.n	8007958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	647b      	str	r3, [r7, #68]	@ 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007944:	61ba      	str	r2, [r7, #24]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007966:	bf00      	nop
 8007968:	3754      	adds	r7, #84	@ 0x54
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007978:	b0c0      	sub	sp, #256	@ 0x100
 800797a:	af00      	add	r7, sp, #0
 800797c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007990:	68d9      	ldr	r1, [r3, #12]
 8007992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	ea40 0301 	orr.w	r3, r0, r1
 800799c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079cc:	f021 010c 	bic.w	r1, r1, #12
 80079d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079da:	430b      	orrs	r3, r1
 80079dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ee:	6999      	ldr	r1, [r3, #24]
 80079f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	ea40 0301 	orr.w	r3, r0, r1
 80079fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b8f      	ldr	r3, [pc, #572]	@ (8007c40 <UART_SetConfig+0x2cc>)
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d005      	beq.n	8007a14 <UART_SetConfig+0xa0>
 8007a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007c44 <UART_SetConfig+0x2d0>)
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d104      	bne.n	8007a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a14:	f7fe fdf2 	bl	80065fc <HAL_RCC_GetPCLK2Freq>
 8007a18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a1c:	e003      	b.n	8007a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a1e:	f7fe fdd9 	bl	80065d4 <HAL_RCC_GetPCLK1Freq>
 8007a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a30:	f040 810c 	bne.w	8007c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a46:	4622      	mov	r2, r4
 8007a48:	462b      	mov	r3, r5
 8007a4a:	1891      	adds	r1, r2, r2
 8007a4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a56:	4621      	mov	r1, r4
 8007a58:	eb12 0801 	adds.w	r8, r2, r1
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	eb43 0901 	adc.w	r9, r3, r1
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a76:	4690      	mov	r8, r2
 8007a78:	4699      	mov	r9, r3
 8007a7a:	4623      	mov	r3, r4
 8007a7c:	eb18 0303 	adds.w	r3, r8, r3
 8007a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a84:	462b      	mov	r3, r5
 8007a86:	eb49 0303 	adc.w	r3, r9, r3
 8007a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	18db      	adds	r3, r3, r3
 8007aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	eb42 0303 	adc.w	r3, r2, r3
 8007aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ab8:	f7f8 fba4 	bl	8000204 <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4b61      	ldr	r3, [pc, #388]	@ (8007c48 <UART_SetConfig+0x2d4>)
 8007ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	011c      	lsls	r4, r3, #4
 8007aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007adc:	4642      	mov	r2, r8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	1891      	adds	r1, r2, r2
 8007ae2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ae4:	415b      	adcs	r3, r3
 8007ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007aec:	4641      	mov	r1, r8
 8007aee:	eb12 0a01 	adds.w	sl, r2, r1
 8007af2:	4649      	mov	r1, r9
 8007af4:	eb43 0b01 	adc.w	fp, r3, r1
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b0c:	4692      	mov	sl, r2
 8007b0e:	469b      	mov	fp, r3
 8007b10:	4643      	mov	r3, r8
 8007b12:	eb1a 0303 	adds.w	r3, sl, r3
 8007b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8007b20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	18db      	adds	r3, r3, r3
 8007b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b3e:	4613      	mov	r3, r2
 8007b40:	eb42 0303 	adc.w	r3, r2, r3
 8007b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b4e:	f7f8 fb59 	bl	8000204 <__aeabi_uldivmod>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4611      	mov	r1, r2
 8007b58:	4b3b      	ldr	r3, [pc, #236]	@ (8007c48 <UART_SetConfig+0x2d4>)
 8007b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	2264      	movs	r2, #100	@ 0x64
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	1acb      	subs	r3, r1, r3
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b6e:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <UART_SetConfig+0x2d4>)
 8007b70:	fba3 2302 	umull	r2, r3, r3, r2
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b7c:	441c      	add	r4, r3
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	1851      	adds	r1, r2, r1
 8007ba4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	414b      	adcs	r3, r1
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bb8:	4659      	mov	r1, fp
 8007bba:	00cb      	lsls	r3, r1, #3
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	00ca      	lsls	r2, r1, #3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4642      	mov	r2, r8
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	eb42 0303 	adc.w	r3, r2, r3
 8007bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	18db      	adds	r3, r3, r3
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	eb42 0303 	adc.w	r3, r2, r3
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c0a:	f7f8 fafb 	bl	8000204 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <UART_SetConfig+0x2d4>)
 8007c14:	fba3 1302 	umull	r1, r3, r3, r2
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	2164      	movs	r1, #100	@ 0x64
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	3332      	adds	r3, #50	@ 0x32
 8007c26:	4a08      	ldr	r2, [pc, #32]	@ (8007c48 <UART_SetConfig+0x2d4>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f003 0207 	and.w	r2, r3, #7
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4422      	add	r2, r4
 8007c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c3c:	e106      	b.n	8007e4c <UART_SetConfig+0x4d8>
 8007c3e:	bf00      	nop
 8007c40:	40011000 	.word	0x40011000
 8007c44:	40011400 	.word	0x40011400
 8007c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c5e:	4642      	mov	r2, r8
 8007c60:	464b      	mov	r3, r9
 8007c62:	1891      	adds	r1, r2, r2
 8007c64:	6239      	str	r1, [r7, #32]
 8007c66:	415b      	adcs	r3, r3
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c6e:	4641      	mov	r1, r8
 8007c70:	1854      	adds	r4, r2, r1
 8007c72:	4649      	mov	r1, r9
 8007c74:	eb43 0501 	adc.w	r5, r3, r1
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	00eb      	lsls	r3, r5, #3
 8007c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c86:	00e2      	lsls	r2, r4, #3
 8007c88:	4614      	mov	r4, r2
 8007c8a:	461d      	mov	r5, r3
 8007c8c:	4643      	mov	r3, r8
 8007c8e:	18e3      	adds	r3, r4, r3
 8007c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c94:	464b      	mov	r3, r9
 8007c96:	eb45 0303 	adc.w	r3, r5, r3
 8007c9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007caa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cba:	4629      	mov	r1, r5
 8007cbc:	008b      	lsls	r3, r1, #2
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	008a      	lsls	r2, r1, #2
 8007cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ccc:	f7f8 fa9a 	bl	8000204 <__aeabi_uldivmod>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4b60      	ldr	r3, [pc, #384]	@ (8007e58 <UART_SetConfig+0x4e4>)
 8007cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	011c      	lsls	r4, r3, #4
 8007cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	1891      	adds	r1, r2, r2
 8007cf6:	61b9      	str	r1, [r7, #24]
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d00:	4641      	mov	r1, r8
 8007d02:	1851      	adds	r1, r2, r1
 8007d04:	6139      	str	r1, [r7, #16]
 8007d06:	4649      	mov	r1, r9
 8007d08:	414b      	adcs	r3, r1
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d18:	4659      	mov	r1, fp
 8007d1a:	00cb      	lsls	r3, r1, #3
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d22:	4651      	mov	r1, sl
 8007d24:	00ca      	lsls	r2, r1, #3
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d34:	464b      	mov	r3, r9
 8007d36:	460a      	mov	r2, r1
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	f04f 0300 	mov.w	r3, #0
 8007d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d58:	4649      	mov	r1, r9
 8007d5a:	008b      	lsls	r3, r1, #2
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d62:	4641      	mov	r1, r8
 8007d64:	008a      	lsls	r2, r1, #2
 8007d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d6a:	f7f8 fa4b 	bl	8000204 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	4b38      	ldr	r3, [pc, #224]	@ (8007e58 <UART_SetConfig+0x4e4>)
 8007d76:	fba3 2301 	umull	r2, r3, r3, r1
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	2264      	movs	r2, #100	@ 0x64
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	1acb      	subs	r3, r1, r3
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	3332      	adds	r3, #50	@ 0x32
 8007d88:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <UART_SetConfig+0x4e4>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d94:	441c      	add	r4, r3
 8007d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007da0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	415b      	adcs	r3, r3
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007db4:	4641      	mov	r1, r8
 8007db6:	1851      	adds	r1, r2, r1
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	4649      	mov	r1, r9
 8007dbc:	414b      	adcs	r3, r1
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dcc:	4659      	mov	r1, fp
 8007dce:	00cb      	lsls	r3, r1, #3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	00ca      	lsls	r2, r1, #3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	4642      	mov	r2, r8
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007de6:	464b      	mov	r3, r9
 8007de8:	460a      	mov	r2, r1
 8007dea:	eb42 0303 	adc.w	r3, r2, r3
 8007dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e08:	4649      	mov	r1, r9
 8007e0a:	008b      	lsls	r3, r1, #2
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e12:	4641      	mov	r1, r8
 8007e14:	008a      	lsls	r2, r1, #2
 8007e16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e1a:	f7f8 f9f3 	bl	8000204 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <UART_SetConfig+0x4e4>)
 8007e24:	fba3 1302 	umull	r1, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	2164      	movs	r1, #100	@ 0x64
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	3332      	adds	r3, #50	@ 0x32
 8007e36:	4a08      	ldr	r2, [pc, #32]	@ (8007e58 <UART_SetConfig+0x4e4>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4422      	add	r2, r4
 8007e4a:	609a      	str	r2, [r3, #8]
}
 8007e4c:	bf00      	nop
 8007e4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e52:	46bd      	mov	sp, r7
 8007e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e58:	51eb851f 	.word	0x51eb851f

08007e5c <malloc>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	@ (8007e68 <malloc+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f000 b825 	b.w	8007eb0 <_malloc_r>
 8007e66:	bf00      	nop
 8007e68:	20000018 	.word	0x20000018

08007e6c <sbrk_aligned>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007eac <sbrk_aligned+0x40>)
 8007e70:	460c      	mov	r4, r1
 8007e72:	6831      	ldr	r1, [r6, #0]
 8007e74:	4605      	mov	r5, r0
 8007e76:	b911      	cbnz	r1, 8007e7e <sbrk_aligned+0x12>
 8007e78:	f000 f8ae 	bl	8007fd8 <_sbrk_r>
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f8a9 	bl	8007fd8 <_sbrk_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d103      	bne.n	8007e92 <sbrk_aligned+0x26>
 8007e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e8e:	4620      	mov	r0, r4
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	1cc4      	adds	r4, r0, #3
 8007e94:	f024 0403 	bic.w	r4, r4, #3
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d0f8      	beq.n	8007e8e <sbrk_aligned+0x22>
 8007e9c:	1a21      	subs	r1, r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f89a 	bl	8007fd8 <_sbrk_r>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d1f2      	bne.n	8007e8e <sbrk_aligned+0x22>
 8007ea8:	e7ef      	b.n	8007e8a <sbrk_aligned+0x1e>
 8007eaa:	bf00      	nop
 8007eac:	200001f8 	.word	0x200001f8

08007eb0 <_malloc_r>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	1ccd      	adds	r5, r1, #3
 8007eb6:	f025 0503 	bic.w	r5, r5, #3
 8007eba:	3508      	adds	r5, #8
 8007ebc:	2d0c      	cmp	r5, #12
 8007ebe:	bf38      	it	cc
 8007ec0:	250c      	movcc	r5, #12
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	db01      	blt.n	8007ecc <_malloc_r+0x1c>
 8007ec8:	42a9      	cmp	r1, r5
 8007eca:	d904      	bls.n	8007ed6 <_malloc_r+0x26>
 8007ecc:	230c      	movs	r3, #12
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fac <_malloc_r+0xfc>
 8007eda:	f000 f869 	bl	8007fb0 <__malloc_lock>
 8007ede:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	bb44      	cbnz	r4, 8007f38 <_malloc_r+0x88>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ffbf 	bl	8007e6c <sbrk_aligned>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	d158      	bne.n	8007fa6 <_malloc_r+0xf6>
 8007ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ef8:	4627      	mov	r7, r4
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	d143      	bne.n	8007f86 <_malloc_r+0xd6>
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d04b      	beq.n	8007f9a <_malloc_r+0xea>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	4639      	mov	r1, r7
 8007f06:	4630      	mov	r0, r6
 8007f08:	eb04 0903 	add.w	r9, r4, r3
 8007f0c:	f000 f864 	bl	8007fd8 <_sbrk_r>
 8007f10:	4581      	cmp	r9, r0
 8007f12:	d142      	bne.n	8007f9a <_malloc_r+0xea>
 8007f14:	6821      	ldr	r1, [r4, #0]
 8007f16:	1a6d      	subs	r5, r5, r1
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ffa6 	bl	8007e6c <sbrk_aligned>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d03a      	beq.n	8007f9a <_malloc_r+0xea>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	442b      	add	r3, r5
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	bb62      	cbnz	r2, 8007f8c <_malloc_r+0xdc>
 8007f32:	f8c8 7000 	str.w	r7, [r8]
 8007f36:	e00f      	b.n	8007f58 <_malloc_r+0xa8>
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	1b52      	subs	r2, r2, r5
 8007f3c:	d420      	bmi.n	8007f80 <_malloc_r+0xd0>
 8007f3e:	2a0b      	cmp	r2, #11
 8007f40:	d917      	bls.n	8007f72 <_malloc_r+0xc2>
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	6025      	str	r5, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	6059      	strne	r1, [r3, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	bf08      	it	eq
 8007f50:	f8c8 1000 	streq.w	r1, [r8]
 8007f54:	5162      	str	r2, [r4, r5]
 8007f56:	604b      	str	r3, [r1, #4]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f82f 	bl	8007fbc <__malloc_unlock>
 8007f5e:	f104 000b 	add.w	r0, r4, #11
 8007f62:	1d23      	adds	r3, r4, #4
 8007f64:	f020 0007 	bic.w	r0, r0, #7
 8007f68:	1ac2      	subs	r2, r0, r3
 8007f6a:	bf1c      	itt	ne
 8007f6c:	1a1b      	subne	r3, r3, r0
 8007f6e:	50a3      	strne	r3, [r4, r2]
 8007f70:	e7af      	b.n	8007ed2 <_malloc_r+0x22>
 8007f72:	6862      	ldr	r2, [r4, #4]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bf0c      	ite	eq
 8007f78:	f8c8 2000 	streq.w	r2, [r8]
 8007f7c:	605a      	strne	r2, [r3, #4]
 8007f7e:	e7eb      	b.n	8007f58 <_malloc_r+0xa8>
 8007f80:	4623      	mov	r3, r4
 8007f82:	6864      	ldr	r4, [r4, #4]
 8007f84:	e7ae      	b.n	8007ee4 <_malloc_r+0x34>
 8007f86:	463c      	mov	r4, r7
 8007f88:	687f      	ldr	r7, [r7, #4]
 8007f8a:	e7b6      	b.n	8007efa <_malloc_r+0x4a>
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d1fb      	bne.n	8007f8c <_malloc_r+0xdc>
 8007f94:	2300      	movs	r3, #0
 8007f96:	6053      	str	r3, [r2, #4]
 8007f98:	e7de      	b.n	8007f58 <_malloc_r+0xa8>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 f80c 	bl	8007fbc <__malloc_unlock>
 8007fa4:	e794      	b.n	8007ed0 <_malloc_r+0x20>
 8007fa6:	6005      	str	r5, [r0, #0]
 8007fa8:	e7d6      	b.n	8007f58 <_malloc_r+0xa8>
 8007faa:	bf00      	nop
 8007fac:	200001fc 	.word	0x200001fc

08007fb0 <__malloc_lock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	@ (8007fb8 <__malloc_lock+0x8>)
 8007fb2:	f000 b84b 	b.w	800804c <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	2000033c 	.word	0x2000033c

08007fbc <__malloc_unlock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	@ (8007fc4 <__malloc_unlock+0x8>)
 8007fbe:	f000 b846 	b.w	800804e <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	2000033c 	.word	0x2000033c

08007fc8 <memset>:
 8007fc8:	4402      	add	r2, r0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <memset+0xa>
 8007fd0:	4770      	bx	lr
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	e7f9      	b.n	8007fcc <memset+0x4>

08007fd8 <_sbrk_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	@ (8007ff4 <_sbrk_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7f9 fa04 	bl	80013f0 <_sbrk>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_sbrk_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_sbrk_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000338 	.word	0x20000338

08007ff8 <__errno>:
 8007ff8:	4b01      	ldr	r3, [pc, #4]	@ (8008000 <__errno+0x8>)
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000018 	.word	0x20000018

08008004 <__libc_init_array>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4d0d      	ldr	r5, [pc, #52]	@ (800803c <__libc_init_array+0x38>)
 8008008:	4c0d      	ldr	r4, [pc, #52]	@ (8008040 <__libc_init_array+0x3c>)
 800800a:	1b64      	subs	r4, r4, r5
 800800c:	10a4      	asrs	r4, r4, #2
 800800e:	2600      	movs	r6, #0
 8008010:	42a6      	cmp	r6, r4
 8008012:	d109      	bne.n	8008028 <__libc_init_array+0x24>
 8008014:	4d0b      	ldr	r5, [pc, #44]	@ (8008044 <__libc_init_array+0x40>)
 8008016:	4c0c      	ldr	r4, [pc, #48]	@ (8008048 <__libc_init_array+0x44>)
 8008018:	f000 f81a 	bl	8008050 <_init>
 800801c:	1b64      	subs	r4, r4, r5
 800801e:	10a4      	asrs	r4, r4, #2
 8008020:	2600      	movs	r6, #0
 8008022:	42a6      	cmp	r6, r4
 8008024:	d105      	bne.n	8008032 <__libc_init_array+0x2e>
 8008026:	bd70      	pop	{r4, r5, r6, pc}
 8008028:	f855 3b04 	ldr.w	r3, [r5], #4
 800802c:	4798      	blx	r3
 800802e:	3601      	adds	r6, #1
 8008030:	e7ee      	b.n	8008010 <__libc_init_array+0xc>
 8008032:	f855 3b04 	ldr.w	r3, [r5], #4
 8008036:	4798      	blx	r3
 8008038:	3601      	adds	r6, #1
 800803a:	e7f2      	b.n	8008022 <__libc_init_array+0x1e>
 800803c:	080535a4 	.word	0x080535a4
 8008040:	080535a4 	.word	0x080535a4
 8008044:	080535a4 	.word	0x080535a4
 8008048:	080535a8 	.word	0x080535a8

0800804c <__retarget_lock_acquire_recursive>:
 800804c:	4770      	bx	lr

0800804e <__retarget_lock_release_recursive>:
 800804e:	4770      	bx	lr

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
